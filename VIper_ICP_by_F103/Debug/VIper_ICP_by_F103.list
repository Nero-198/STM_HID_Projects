
VIper_ICP_by_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08009ba8  08009ba8  00019ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d00  08009d00  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009d00  08009d00  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d00  08009d00  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d00  08009d00  00019d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d04  08009d04  00019d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d4  200001d8  08009ee0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aac  08009ee0  00020aac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105c0  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318d  00000000  00000000  000307c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb8  00000000  00000000  00033950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00034808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b506  00000000  00000000  00035558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012af0  00000000  00000000  00050a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dad6  00000000  00000000  0006354e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1024  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042cc  00000000  00000000  000f1074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001d8 	.word	0x200001d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08009b90 	.word	0x08009b90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001dc 	.word	0x200001dc
 8000148:	08009b90 	.word	0x08009b90

0800014c <keyMatrix>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint16_t aADCxConvertedData[ADC_CONVERTED_DATA_BUFFER_SIZE];
uint8_t GPIO[2];

void keyMatrix(gamepadHID_t *gamepad){
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint16_t buttons[NUM_of_OUT];
	GPIOB->ODR = 0x003E;		//0011,1110	//OUT0 だけLOWにする
 8000154:	4b3e      	ldr	r3, [pc, #248]	; (8000250 <keyMatrix+0x104>)
 8000156:	223e      	movs	r2, #62	; 0x3e
 8000158:	60da      	str	r2, [r3, #12]
	buttons[0] = GPIOB->IDR & 0b0000001111000000;
 800015a:	4b3d      	ldr	r3, [pc, #244]	; (8000250 <keyMatrix+0x104>)
 800015c:	689b      	ldr	r3, [r3, #8]
 800015e:	b29b      	uxth	r3, r3
 8000160:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8000164:	b29b      	uxth	r3, r3
 8000166:	81bb      	strh	r3, [r7, #12]
	buttons[0] = buttons[0] >> 6;
 8000168:	89bb      	ldrh	r3, [r7, #12]
 800016a:	099b      	lsrs	r3, r3, #6
 800016c:	b29b      	uxth	r3, r3
 800016e:	81bb      	strh	r3, [r7, #12]
	GPIOB->ODR = 0x003D;		//OUT1 だけLOWにする
 8000170:	4b37      	ldr	r3, [pc, #220]	; (8000250 <keyMatrix+0x104>)
 8000172:	223d      	movs	r2, #61	; 0x3d
 8000174:	60da      	str	r2, [r3, #12]
	buttons[1] = GPIOB->IDR & 0b0000001111000000;
 8000176:	4b36      	ldr	r3, [pc, #216]	; (8000250 <keyMatrix+0x104>)
 8000178:	689b      	ldr	r3, [r3, #8]
 800017a:	b29b      	uxth	r3, r3
 800017c:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 8000180:	b29b      	uxth	r3, r3
 8000182:	81fb      	strh	r3, [r7, #14]
	buttons[1] = buttons[1] >> 6;
 8000184:	89fb      	ldrh	r3, [r7, #14]
 8000186:	099b      	lsrs	r3, r3, #6
 8000188:	b29b      	uxth	r3, r3
 800018a:	81fb      	strh	r3, [r7, #14]
	GPIOB->ODR = 0x003B;
 800018c:	4b30      	ldr	r3, [pc, #192]	; (8000250 <keyMatrix+0x104>)
 800018e:	223b      	movs	r2, #59	; 0x3b
 8000190:	60da      	str	r2, [r3, #12]
	buttons[2] = GPIOB->IDR & 0b0000001111000000;
 8000192:	4b2f      	ldr	r3, [pc, #188]	; (8000250 <keyMatrix+0x104>)
 8000194:	689b      	ldr	r3, [r3, #8]
 8000196:	b29b      	uxth	r3, r3
 8000198:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 800019c:	b29b      	uxth	r3, r3
 800019e:	823b      	strh	r3, [r7, #16]
	buttons[2] = buttons[2] >> 6;
 80001a0:	8a3b      	ldrh	r3, [r7, #16]
 80001a2:	099b      	lsrs	r3, r3, #6
 80001a4:	b29b      	uxth	r3, r3
 80001a6:	823b      	strh	r3, [r7, #16]
	GPIOB->ODR = 0x0037;
 80001a8:	4b29      	ldr	r3, [pc, #164]	; (8000250 <keyMatrix+0x104>)
 80001aa:	2237      	movs	r2, #55	; 0x37
 80001ac:	60da      	str	r2, [r3, #12]
	buttons[3] = GPIOB->IDR & 0b0000001111000000;
 80001ae:	4b28      	ldr	r3, [pc, #160]	; (8000250 <keyMatrix+0x104>)
 80001b0:	689b      	ldr	r3, [r3, #8]
 80001b2:	b29b      	uxth	r3, r3
 80001b4:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 80001b8:	b29b      	uxth	r3, r3
 80001ba:	827b      	strh	r3, [r7, #18]
	buttons[3] = buttons[3] >> 6;
 80001bc:	8a7b      	ldrh	r3, [r7, #18]
 80001be:	099b      	lsrs	r3, r3, #6
 80001c0:	b29b      	uxth	r3, r3
 80001c2:	827b      	strh	r3, [r7, #18]
	GPIOB->ODR = 0x002F;
 80001c4:	4b22      	ldr	r3, [pc, #136]	; (8000250 <keyMatrix+0x104>)
 80001c6:	222f      	movs	r2, #47	; 0x2f
 80001c8:	60da      	str	r2, [r3, #12]
	buttons[4] = GPIOB->IDR & 0b0000001111000000;
 80001ca:	4b21      	ldr	r3, [pc, #132]	; (8000250 <keyMatrix+0x104>)
 80001cc:	689b      	ldr	r3, [r3, #8]
 80001ce:	b29b      	uxth	r3, r3
 80001d0:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	82bb      	strh	r3, [r7, #20]
	buttons[4] = buttons[4] >> 6;
 80001d8:	8abb      	ldrh	r3, [r7, #20]
 80001da:	099b      	lsrs	r3, r3, #6
 80001dc:	b29b      	uxth	r3, r3
 80001de:	82bb      	strh	r3, [r7, #20]
	GPIOB->ODR = 0x001F;
 80001e0:	4b1b      	ldr	r3, [pc, #108]	; (8000250 <keyMatrix+0x104>)
 80001e2:	221f      	movs	r2, #31
 80001e4:	60da      	str	r2, [r3, #12]
	buttons[5] = GPIOB->IDR & 0b0000001111000000;
 80001e6:	4b1a      	ldr	r3, [pc, #104]	; (8000250 <keyMatrix+0x104>)
 80001e8:	689b      	ldr	r3, [r3, #8]
 80001ea:	b29b      	uxth	r3, r3
 80001ec:	f403 7370 	and.w	r3, r3, #960	; 0x3c0
 80001f0:	b29b      	uxth	r3, r3
 80001f2:	82fb      	strh	r3, [r7, #22]
	buttons[5] = buttons[5] >> 6;
 80001f4:	8afb      	ldrh	r3, [r7, #22]
 80001f6:	099b      	lsrs	r3, r3, #6
 80001f8:	b29b      	uxth	r3, r3
 80001fa:	82fb      	strh	r3, [r7, #22]
	gamepad->buttons[0] = ~(uint8_t)(buttons[0] | (buttons[1] << 4));
 80001fc:	89bb      	ldrh	r3, [r7, #12]
 80001fe:	b25a      	sxtb	r2, r3
 8000200:	89fb      	ldrh	r3, [r7, #14]
 8000202:	011b      	lsls	r3, r3, #4
 8000204:	b25b      	sxtb	r3, r3
 8000206:	4313      	orrs	r3, r2
 8000208:	b25b      	sxtb	r3, r3
 800020a:	b2db      	uxtb	r3, r3
 800020c:	43db      	mvns	r3, r3
 800020e:	b2da      	uxtb	r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	701a      	strb	r2, [r3, #0]
	gamepad->buttons[1] = ~(uint8_t)(buttons[2] | (buttons[3] << 4));
 8000214:	8a3b      	ldrh	r3, [r7, #16]
 8000216:	b25a      	sxtb	r2, r3
 8000218:	8a7b      	ldrh	r3, [r7, #18]
 800021a:	011b      	lsls	r3, r3, #4
 800021c:	b25b      	sxtb	r3, r3
 800021e:	4313      	orrs	r3, r2
 8000220:	b25b      	sxtb	r3, r3
 8000222:	b2db      	uxtb	r3, r3
 8000224:	43db      	mvns	r3, r3
 8000226:	b2da      	uxtb	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	705a      	strb	r2, [r3, #1]
	gamepad->buttons[2] = ~(uint8_t)(buttons[4] | (buttons[5] << 4));
 800022c:	8abb      	ldrh	r3, [r7, #20]
 800022e:	b25a      	sxtb	r2, r3
 8000230:	8afb      	ldrh	r3, [r7, #22]
 8000232:	011b      	lsls	r3, r3, #4
 8000234:	b25b      	sxtb	r3, r3
 8000236:	4313      	orrs	r3, r2
 8000238:	b25b      	sxtb	r3, r3
 800023a:	b2db      	uxtb	r3, r3
 800023c:	43db      	mvns	r3, r3
 800023e:	b2da      	uxtb	r2, r3
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	709a      	strb	r2, [r3, #2]
}
 8000244:	bf00      	nop
 8000246:	371c      	adds	r7, #28
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40010c00 	.word	0x40010c00

08000254 <Joy_to_Buttons>:
void Joy_to_Buttons(gamepadHID_t *gamepad){			//要リファクタリング  なぜなら，この関数はgamepad->[3]の6bit目など 専用関数となるから．＋ sbi,cbiマクロを利用するから
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	if(gamepad->axis[3] > 100){		//DCS 上
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8000262:	2b64      	cmp	r3, #100	; 0x64
 8000264:	dd0e      	ble.n	8000284 <Joy_to_Buttons+0x30>
		sbi(gamepad->buttons[3]	, 6);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	78db      	ldrb	r3, [r3, #3]
 800026a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800026e:	b2da      	uxtb	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	70da      	strb	r2, [r3, #3]
		cbi(gamepad->buttons[3]	, 7);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	78db      	ldrb	r3, [r3, #3]
 8000278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800027c:	b2da      	uxtb	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	70da      	strb	r2, [r3, #3]
 8000282:	e022      	b.n	80002ca <Joy_to_Buttons+0x76>
	}else if(gamepad->axis[3] < -100){		//DCS 下
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800028a:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800028e:	da0e      	bge.n	80002ae <Joy_to_Buttons+0x5a>
		sbi(gamepad->buttons[3]	, 7);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	78db      	ldrb	r3, [r3, #3]
 8000294:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000298:	b2da      	uxtb	r2, r3
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	70da      	strb	r2, [r3, #3]
		cbi(gamepad->buttons[3]	, 6);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	78db      	ldrb	r3, [r3, #3]
 80002a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	70da      	strb	r2, [r3, #3]
 80002ac:	e00d      	b.n	80002ca <Joy_to_Buttons+0x76>
	}else{		//DCS 中立
		cbi(gamepad->buttons[3]	, 6);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	78db      	ldrb	r3, [r3, #3]
 80002b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	70da      	strb	r2, [r3, #3]
		cbi(gamepad->buttons[3]	, 7);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	78db      	ldrb	r3, [r3, #3]
 80002c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002c4:	b2da      	uxtb	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	70da      	strb	r2, [r3, #3]
	}
	if(gamepad->axis[1] > 100){		//DCS SEQ
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80002d0:	2b64      	cmp	r3, #100	; 0x64
 80002d2:	dd0e      	ble.n	80002f2 <Joy_to_Buttons+0x9e>
		sbi(gamepad->buttons[4]	, 1);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	791b      	ldrb	r3, [r3, #4]
 80002d8:	f043 0302 	orr.w	r3, r3, #2
 80002dc:	b2da      	uxtb	r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	711a      	strb	r2, [r3, #4]
		cbi(gamepad->buttons[4]	, 0);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	791b      	ldrb	r3, [r3, #4]
 80002e6:	f023 0301 	bic.w	r3, r3, #1
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	711a      	strb	r2, [r3, #4]
		cbi(gamepad->buttons[4]	, 1);
	}else{		//DCS 中立
		cbi(gamepad->buttons[4]	, 0);
		cbi(gamepad->buttons[4]	, 1);
	}
}
 80002f0:	e022      	b.n	8000338 <Joy_to_Buttons+0xe4>
	}else if(gamepad->axis[1] < -100){		//DCS RTN
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80002f8:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80002fc:	da0e      	bge.n	800031c <Joy_to_Buttons+0xc8>
		sbi(gamepad->buttons[4]	, 0);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	791b      	ldrb	r3, [r3, #4]
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	b2da      	uxtb	r2, r3
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	711a      	strb	r2, [r3, #4]
		cbi(gamepad->buttons[4]	, 1);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	791b      	ldrb	r3, [r3, #4]
 8000310:	f023 0302 	bic.w	r3, r3, #2
 8000314:	b2da      	uxtb	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	711a      	strb	r2, [r3, #4]
}
 800031a:	e00d      	b.n	8000338 <Joy_to_Buttons+0xe4>
		cbi(gamepad->buttons[4]	, 0);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	791b      	ldrb	r3, [r3, #4]
 8000320:	f023 0301 	bic.w	r3, r3, #1
 8000324:	b2da      	uxtb	r2, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	711a      	strb	r2, [r3, #4]
		cbi(gamepad->buttons[4]	, 1);
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	791b      	ldrb	r3, [r3, #4]
 800032e:	f023 0302 	bic.w	r3, r3, #2
 8000332:	b2da      	uxtb	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	711a      	strb	r2, [r3, #4]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
	...

08000344 <Way3_Switch>:
void Way3_Switch(gamepadHID_t *gamepad){
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	if(!(GPIOB->IDR & (1 << 12) )){
 800034c:	4b41      	ldr	r3, [pc, #260]	; (8000454 <Way3_Switch+0x110>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000354:	2b00      	cmp	r3, #0
 8000356:	d10e      	bne.n	8000376 <Way3_Switch+0x32>
		sbi(gamepad->buttons[3], 2);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	78db      	ldrb	r3, [r3, #3]
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	b2da      	uxtb	r2, r3
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	70da      	strb	r2, [r3, #3]
		cbi(gamepad->buttons[3], 1);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	78db      	ldrb	r3, [r3, #3]
 800036a:	f023 0302 	bic.w	r3, r3, #2
 800036e:	b2da      	uxtb	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	70da      	strb	r2, [r3, #3]
 8000374:	e029      	b.n	80003ca <Way3_Switch+0x86>
	}
	else if(!(GPIOB->IDR & (1 << 13))){
 8000376:	4b37      	ldr	r3, [pc, #220]	; (8000454 <Way3_Switch+0x110>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800037e:	2b00      	cmp	r3, #0
 8000380:	d10e      	bne.n	80003a0 <Way3_Switch+0x5c>
		sbi(gamepad->buttons[3], 0);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	78db      	ldrb	r3, [r3, #3]
 8000386:	f043 0301 	orr.w	r3, r3, #1
 800038a:	b2da      	uxtb	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	70da      	strb	r2, [r3, #3]
		cbi(gamepad->buttons[3], 1);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	78db      	ldrb	r3, [r3, #3]
 8000394:	f023 0302 	bic.w	r3, r3, #2
 8000398:	b2da      	uxtb	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	70da      	strb	r2, [r3, #3]
 800039e:	e014      	b.n	80003ca <Way3_Switch+0x86>
	}
	else{
		sbi(gamepad->buttons[3], 1);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	78db      	ldrb	r3, [r3, #3]
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	70da      	strb	r2, [r3, #3]
		cbi(gamepad->buttons[3], 0);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	78db      	ldrb	r3, [r3, #3]
 80003b2:	f023 0301 	bic.w	r3, r3, #1
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	70da      	strb	r2, [r3, #3]
		cbi(gamepad->buttons[3], 2);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	78db      	ldrb	r3, [r3, #3]
 80003c0:	f023 0304 	bic.w	r3, r3, #4
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	70da      	strb	r2, [r3, #3]
	}
	if(!(GPIOB->IDR & (1 << 14))){
 80003ca:	4b22      	ldr	r3, [pc, #136]	; (8000454 <Way3_Switch+0x110>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d10e      	bne.n	80003f4 <Way3_Switch+0xb0>
		sbi(gamepad->buttons[3], 5);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	78db      	ldrb	r3, [r3, #3]
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	70da      	strb	r2, [r3, #3]
		cbi(gamepad->buttons[3], 4);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	78db      	ldrb	r3, [r3, #3]
 80003e8:	f023 0310 	bic.w	r3, r3, #16
 80003ec:	b2da      	uxtb	r2, r3
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	70da      	strb	r2, [r3, #3]
	else{
		sbi(gamepad->buttons[3], 4);
		cbi(gamepad->buttons[3], 3);
		cbi(gamepad->buttons[3], 5);
	}
}
 80003f2:	e029      	b.n	8000448 <Way3_Switch+0x104>
	else if(!(GPIOB->IDR & (1 << 15))){
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <Way3_Switch+0x110>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d10e      	bne.n	800041e <Way3_Switch+0xda>
		sbi(gamepad->buttons[3], 3);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	78db      	ldrb	r3, [r3, #3]
 8000404:	f043 0308 	orr.w	r3, r3, #8
 8000408:	b2da      	uxtb	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	70da      	strb	r2, [r3, #3]
		cbi(gamepad->buttons[3], 4);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	78db      	ldrb	r3, [r3, #3]
 8000412:	f023 0310 	bic.w	r3, r3, #16
 8000416:	b2da      	uxtb	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	70da      	strb	r2, [r3, #3]
}
 800041c:	e014      	b.n	8000448 <Way3_Switch+0x104>
		sbi(gamepad->buttons[3], 4);
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	78db      	ldrb	r3, [r3, #3]
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	b2da      	uxtb	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	70da      	strb	r2, [r3, #3]
		cbi(gamepad->buttons[3], 3);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	78db      	ldrb	r3, [r3, #3]
 8000430:	f023 0308 	bic.w	r3, r3, #8
 8000434:	b2da      	uxtb	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	70da      	strb	r2, [r3, #3]
		cbi(gamepad->buttons[3], 5);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	78db      	ldrb	r3, [r3, #3]
 800043e:	f023 0320 	bic.w	r3, r3, #32
 8000442:	b2da      	uxtb	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	70da      	strb	r2, [r3, #3]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40010c00 	.word	0x40010c00

08000458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	for (uint8_t i = 0; i < BUTTONS_DATA_BUFFER_SIZE; i++)
 800045e:	2300      	movs	r3, #0
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e006      	b.n	8000472 <main+0x1a>
	{
		gamepadHID.buttons[i] = 0;
 8000464:	7bfb      	ldrb	r3, [r7, #15]
 8000466:	4a41      	ldr	r2, [pc, #260]	; (800056c <main+0x114>)
 8000468:	2100      	movs	r1, #0
 800046a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < BUTTONS_DATA_BUFFER_SIZE; i++)
 800046c:	7bfb      	ldrb	r3, [r7, #15]
 800046e:	3301      	adds	r3, #1
 8000470:	73fb      	strb	r3, [r7, #15]
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	2b04      	cmp	r3, #4
 8000476:	d9f5      	bls.n	8000464 <main+0xc>
	}
	for (uint8_t i = 0; i < (NUM_of_ADC_12bit * 2); i++) {
 8000478:	2300      	movs	r3, #0
 800047a:	73bb      	strb	r3, [r7, #14]
 800047c:	e007      	b.n	800048e <main+0x36>
		gamepadHID.axis[i] = 0;
 800047e:	7bbb      	ldrb	r3, [r7, #14]
 8000480:	4a3a      	ldr	r2, [pc, #232]	; (800056c <main+0x114>)
 8000482:	4413      	add	r3, r2
 8000484:	2200      	movs	r2, #0
 8000486:	715a      	strb	r2, [r3, #5]
	for (uint8_t i = 0; i < (NUM_of_ADC_12bit * 2); i++) {
 8000488:	7bbb      	ldrb	r3, [r7, #14]
 800048a:	3301      	adds	r3, #1
 800048c:	73bb      	strb	r3, [r7, #14]
 800048e:	7bbb      	ldrb	r3, [r7, #14]
 8000490:	2b0b      	cmp	r3, #11
 8000492:	d9f4      	bls.n	800047e <main+0x26>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000494:	f000 fbb8 	bl	8000c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000498:	f000 f870 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049c:	f000 f97e 	bl	800079c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004a0:	f000 f8ca 	bl	8000638 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80004a4:	f000 f950 	bl	8000748 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004a8:	f007 ff68 	bl	800837c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* ### - 4 - Start conversion  mode ################################# */
  if (HAL_ADCEx_Calibration_Start(&hadc1) !=  HAL_OK)
 80004ac:	4830      	ldr	r0, [pc, #192]	; (8000570 <main+0x118>)
 80004ae:	f001 f839 	bl	8001524 <HAL_ADCEx_Calibration_Start>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <main+0x64>
  {
    Error_Handler();
 80004b8:	f000 f9e8 	bl	800088c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  keyMatrix(&gamepadHID.buttons);
 80004bc:	482b      	ldr	r0, [pc, #172]	; (800056c <main+0x114>)
 80004be:	f7ff fe45 	bl	800014c <keyMatrix>
	  for(int i=0; i < NUM_of_ADC_12bit; i++){
 80004c2:	2300      	movs	r3, #0
 80004c4:	60bb      	str	r3, [r7, #8]
 80004c6:	e020      	b.n	800050a <main+0xb2>
	          HAL_ADC_Start(&hadc1);
 80004c8:	4829      	ldr	r0, [pc, #164]	; (8000570 <main+0x118>)
 80004ca:	f000 fcd7 	bl	8000e7c <HAL_ADC_Start>
	          HAL_ADC_PollForConversion(&hadc1, 100);
 80004ce:	2164      	movs	r1, #100	; 0x64
 80004d0:	4827      	ldr	r0, [pc, #156]	; (8000570 <main+0x118>)
 80004d2:	f000 fd81 	bl	8000fd8 <HAL_ADC_PollForConversion>
	          aADCxConvertedData[i] = HAL_ADC_GetValue(&hadc1); //12bit <<4 ~=16bit
 80004d6:	4826      	ldr	r0, [pc, #152]	; (8000570 <main+0x118>)
 80004d8:	f000 fe84 	bl	80011e4 <HAL_ADC_GetValue>
 80004dc:	4603      	mov	r3, r0
 80004de:	b299      	uxth	r1, r3
 80004e0:	4a24      	ldr	r2, [pc, #144]	; (8000574 <main+0x11c>)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	          aADCxConvertedData[i] = (aADCxConvertedData[i] << 4) - 0x7FF0;
 80004e8:	4a22      	ldr	r2, [pc, #136]	; (8000574 <main+0x11c>)
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004f0:	011b      	lsls	r3, r3, #4
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80004f8:	3b70      	subs	r3, #112	; 0x70
 80004fa:	b299      	uxth	r1, r3
 80004fc:	4a1d      	ldr	r2, [pc, #116]	; (8000574 <main+0x11c>)
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i=0; i < NUM_of_ADC_12bit; i++){
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	3301      	adds	r3, #1
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	2b05      	cmp	r3, #5
 800050e:	dddb      	ble.n	80004c8 <main+0x70>
	  //aADCxConvertedData[4] = aADCxConvertedData[4]*2;

	  	  //gamepadHID.buttons[0] = ~GPIO[0];
	 	  //gamepadHID.buttons[1] = ~((GPIO[1] & 0b11000000) >> 6);//gamepad buttonを左詰めにするためにLSBの方にビットシフトして???��?��??��?��?る�??

	  for(int i=0; i < NUM_of_ADC_12bit; i++){
 8000510:	2300      	movs	r3, #0
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	e01b      	b.n	800054e <main+0xf6>
		  gamepadHID.axis[i * 2] = __UINT16_TO_UINT8_LOW(aADCxConvertedData[i]);
 8000516:	4a17      	ldr	r2, [pc, #92]	; (8000574 <main+0x11c>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	b251      	sxtb	r1, r2
 8000524:	4a11      	ldr	r2, [pc, #68]	; (800056c <main+0x114>)
 8000526:	4413      	add	r3, r2
 8000528:	460a      	mov	r2, r1
 800052a:	715a      	strb	r2, [r3, #5]
		  gamepadHID.axis[(i * 2) + 1] = __UINT16_TO_UINT8_HIGH(aADCxConvertedData[i]);
 800052c:	4a11      	ldr	r2, [pc, #68]	; (8000574 <main+0x11c>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	b29a      	uxth	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	3301      	adds	r3, #1
 800053e:	b251      	sxtb	r1, r2
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <main+0x114>)
 8000542:	4413      	add	r3, r2
 8000544:	460a      	mov	r2, r1
 8000546:	715a      	strb	r2, [r3, #5]
	  for(int i=0; i < NUM_of_ADC_12bit; i++){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3301      	adds	r3, #1
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b05      	cmp	r3, #5
 8000552:	dde0      	ble.n	8000516 <main+0xbe>
	  }
	  Joy_to_Buttons(&gamepadHID);
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <main+0x114>)
 8000556:	f7ff fe7d 	bl	8000254 <Joy_to_Buttons>
	  Way3_Switch(&gamepadHID);
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <main+0x114>)
 800055c:	f7ff fef2 	bl	8000344 <Way3_Switch>

	 	//  HAL_GPIO_WritePin(OUT_D6_GPIO_Port, OUT_D6_Pin, 0);

	 	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &gamepadHID, sizeof(gamepadHID_t));
 8000560:	2211      	movs	r2, #17
 8000562:	4902      	ldr	r1, [pc, #8]	; (800056c <main+0x114>)
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <main+0x120>)
 8000566:	f006 fd87 	bl	8007078 <USBD_CUSTOM_HID_SendReport>
	  keyMatrix(&gamepadHID.buttons);
 800056a:	e7a7      	b.n	80004bc <main+0x64>
 800056c:	20000268 	.word	0x20000268
 8000570:	200001f4 	.word	0x200001f4
 8000574:	2000027c 	.word	0x2000027c
 8000578:	20000294 	.word	0x20000294

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000586:	2228      	movs	r2, #40	; 0x28
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f008 fb08 	bl	8008ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ba:	2301      	movs	r3, #1
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 ffa8 	bl	8003528 <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005de:	f000 f955 	bl	800088c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fa14 	bl	8003a2c <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800060a:	f000 f93f 	bl	800088c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800060e:	2312      	movs	r3, #18
 8000610:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000616:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f003 fb9c 	bl	8003d5c <HAL_RCCEx_PeriphCLKConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800062a:	f000 f92f 	bl	800088c <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000648:	4b3d      	ldr	r3, [pc, #244]	; (8000740 <MX_ADC1_Init+0x108>)
 800064a:	4a3e      	ldr	r2, [pc, #248]	; (8000744 <MX_ADC1_Init+0x10c>)
 800064c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800064e:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <MX_ADC1_Init+0x108>)
 8000650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000654:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <MX_ADC1_Init+0x108>)
 8000658:	2200      	movs	r2, #0
 800065a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800065c:	4b38      	ldr	r3, [pc, #224]	; (8000740 <MX_ADC1_Init+0x108>)
 800065e:	2201      	movs	r2, #1
 8000660:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000662:	4b37      	ldr	r3, [pc, #220]	; (8000740 <MX_ADC1_Init+0x108>)
 8000664:	2201      	movs	r2, #1
 8000666:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4b35      	ldr	r3, [pc, #212]	; (8000740 <MX_ADC1_Init+0x108>)
 800066a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800066e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000670:	4b33      	ldr	r3, [pc, #204]	; (8000740 <MX_ADC1_Init+0x108>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <MX_ADC1_Init+0x108>)
 8000678:	2206      	movs	r2, #6
 800067a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067c:	4830      	ldr	r0, [pc, #192]	; (8000740 <MX_ADC1_Init+0x108>)
 800067e:	f000 fb25 	bl	8000ccc <HAL_ADC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 8000688:	f000 f900 	bl	800088c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000690:	2301      	movs	r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000694:	2302      	movs	r3, #2
 8000696:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4619      	mov	r1, r3
 800069c:	4828      	ldr	r0, [pc, #160]	; (8000740 <MX_ADC1_Init+0x108>)
 800069e:	f000 fdad 	bl	80011fc <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80006a8:	f000 f8f0 	bl	800088c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	4619      	mov	r1, r3
 80006b8:	4821      	ldr	r0, [pc, #132]	; (8000740 <MX_ADC1_Init+0x108>)
 80006ba:	f000 fd9f 	bl	80011fc <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c4:	f000 f8e2 	bl	800088c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006cc:	2303      	movs	r3, #3
 80006ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	481a      	ldr	r0, [pc, #104]	; (8000740 <MX_ADC1_Init+0x108>)
 80006d6:	f000 fd91 	bl	80011fc <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80006e0:	f000 f8d4 	bl	800088c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006e4:	2303      	movs	r3, #3
 80006e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4813      	ldr	r0, [pc, #76]	; (8000740 <MX_ADC1_Init+0x108>)
 80006f2:	f000 fd83 	bl	80011fc <HAL_ADC_ConfigChannel>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006fc:	f000 f8c6 	bl	800088c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000700:	2304      	movs	r3, #4
 8000702:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000704:	2305      	movs	r3, #5
 8000706:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_ADC1_Init+0x108>)
 800070e:	f000 fd75 	bl	80011fc <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000718:	f000 f8b8 	bl	800088c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800071c:	2305      	movs	r3, #5
 800071e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000720:	2306      	movs	r3, #6
 8000722:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4619      	mov	r1, r3
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_ADC1_Init+0x108>)
 800072a:	f000 fd67 	bl	80011fc <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000734:	f000 f8aa 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200001f4 	.word	0x200001f4
 8000744:	40012400 	.word	0x40012400

08000748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <MX_USART1_UART_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_USART1_UART_Init+0x4c>)
 8000780:	f003 fc62 	bl	8004048 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 f87f 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000224 	.word	0x20000224
 8000798:	40013800 	.word	0x40013800

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b0:	4b33      	ldr	r3, [pc, #204]	; (8000880 <MX_GPIO_Init+0xe4>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a32      	ldr	r2, [pc, #200]	; (8000880 <MX_GPIO_Init+0xe4>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b30      	ldr	r3, [pc, #192]	; (8000880 <MX_GPIO_Init+0xe4>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0310 	and.w	r3, r3, #16
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <MX_GPIO_Init+0xe4>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <MX_GPIO_Init+0xe4>)
 80007ce:	f043 0320 	orr.w	r3, r3, #32
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <MX_GPIO_Init+0xe4>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0320 	and.w	r3, r3, #32
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_GPIO_Init+0xe4>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <MX_GPIO_Init+0xe4>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_GPIO_Init+0xe4>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0304 	and.w	r3, r3, #4
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_GPIO_Init+0xe4>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <MX_GPIO_Init+0xe4>)
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_GPIO_Init+0xe4>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0308 	and.w	r3, r3, #8
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2180      	movs	r1, #128	; 0x80
 8000814:	481b      	ldr	r0, [pc, #108]	; (8000884 <MX_GPIO_Init+0xe8>)
 8000816:	f001 f9c3 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin
 800081a:	2200      	movs	r2, #0
 800081c:	213f      	movs	r1, #63	; 0x3f
 800081e:	481a      	ldr	r0, [pc, #104]	; (8000888 <MX_GPIO_Init+0xec>)
 8000820:	f001 f9be 	bl	8001ba0 <HAL_GPIO_WritePin>
                          |OUT4_Pin|OUT5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 8000824:	2380      	movs	r3, #128	; 0x80
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2302      	movs	r3, #2
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	; (8000884 <MX_GPIO_Init+0xe8>)
 800083c:	f001 f82c 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin OUT2_Pin OUT3_Pin
                           OUT4_Pin OUT5_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin|OUT2_Pin|OUT3_Pin
 8000840:	233f      	movs	r3, #63	; 0x3f
 8000842:	613b      	str	r3, [r7, #16]
                          |OUT4_Pin|OUT5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	4619      	mov	r1, r3
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_GPIO_Init+0xec>)
 8000858:	f001 f81e 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN3_Pin WARN_Pin DRIFT_Pin
                           GAIN_Pin AUTO_Pin IN0_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN3_Pin|WARN_Pin|DRIFT_Pin
 800085c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000860:	613b      	str	r3, [r7, #16]
                          |GAIN_Pin|AUTO_Pin|IN0_Pin|IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_GPIO_Init+0xec>)
 8000872:	f001 f811 	bl	8001898 <HAL_GPIO_Init>

}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000
 8000884:	40010800 	.word	0x40010800
 8000888:	40010c00 	.word	0x40010c00

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <HAL_MspInit+0x5c>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6193      	str	r3, [r2, #24]
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_MspInit+0x5c>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <HAL_MspInit+0x5c>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_MspInit+0x5c>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	61d3      	str	r3, [r2, #28]
 80008c2:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_MspInit+0x5c>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ce:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <HAL_MspInit+0x60>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_MspInit+0x60>)
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010000 	.word	0x40010000

080008fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <HAL_ADC_MspInit+0x6c>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d121      	bne.n	8000960 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <HAL_ADC_MspInit+0x70>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a12      	ldr	r2, [pc, #72]	; (800096c <HAL_ADC_MspInit+0x70>)
 8000922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_ADC_MspInit+0x70>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_ADC_MspInit+0x70>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a0c      	ldr	r2, [pc, #48]	; (800096c <HAL_ADC_MspInit+0x70>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_ADC_MspInit+0x70>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800094c:	233f      	movs	r3, #63	; 0x3f
 800094e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000950:	2303      	movs	r3, #3
 8000952:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4619      	mov	r1, r3
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <HAL_ADC_MspInit+0x74>)
 800095c:	f000 ff9c 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40012400 	.word	0x40012400
 800096c:	40021000 	.word	0x40021000
 8000970:	40010800 	.word	0x40010800

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <HAL_UART_MspInit+0x8c>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d131      	bne.n	80009f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <HAL_UART_MspInit+0x90>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <HAL_UART_MspInit+0x90>)
 800099a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x90>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_UART_MspInit+0x90>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <HAL_UART_MspInit+0x90>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_UART_MspInit+0x90>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4619      	mov	r1, r3
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <HAL_UART_MspInit+0x94>)
 80009da:	f000 ff5d 	bl	8001898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_UART_MspInit+0x94>)
 80009f4:	f000 ff50 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40013800 	.word	0x40013800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010800 	.word	0x40010800

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <NMI_Handler+0x4>

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <MemManage_Handler+0x4>

08000a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a52:	f000 f91f 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a62:	f001 f9e6 	bl	8001e32 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000758 	.word	0x20000758

08000a70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
  }

  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b086      	sub	sp, #24
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	60b9      	str	r1, [r7, #8]
 8000ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e009      	b.n	8000ad0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3301      	adds	r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697a      	ldr	r2, [r7, #20]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	dbf1      	blt.n	8000abc <_write+0x12>
  }
  return len;
 8000ad8:	687b      	ldr	r3, [r7, #4]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_close>:

int _close(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b08:	605a      	str	r2, [r3, #4]
  return 0;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr

08000b16 <_isatty>:

int _isatty(int file)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b085      	sub	sp, #20
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
	...

08000b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <_sbrk+0x5c>)
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <_sbrk+0x60>)
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <_sbrk+0x64>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <_sbrk+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d207      	bcs.n	8000b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b74:	f007 ffea 	bl	8008b4c <__errno>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	e009      	b.n	8000b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <_sbrk+0x64>)
 8000b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20005000 	.word	0x20005000
 8000ba4:	00000400 	.word	0x00000400
 8000ba8:	20000288 	.word	0x20000288
 8000bac:	20000ab0 	.word	0x20000ab0

08000bb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr

08000bbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	; (8000bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	; (8000c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000be2:	f7ff ffe5 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be6:	f007 ffb7 	bl	8008b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bea:	f7ff fc35 	bl	8000458 <main>
  bx lr
 8000bee:	4770      	bx	lr
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000bf8:	08009d08 	.word	0x08009d08
  ldr r2, =_sbss
 8000bfc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000c00:	20000aac 	.word	0x20000aac

08000c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_2_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_Init+0x28>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_Init+0x28>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 fdfb 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	200f      	movs	r0, #15
 8000c20:	f000 f808 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fe38 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40022000 	.word	0x40022000

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x54>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x58>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fe13 	bl	800187e <HAL_SYSTICK_Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00e      	b.n	8000c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d80a      	bhi.n	8000c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f000 fddb 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_InitTick+0x5c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <HAL_IncTick+0x1c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <HAL_IncTick+0x20>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a03      	ldr	r2, [pc, #12]	; (8000cb4 <HAL_IncTick+0x20>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	2000028c 	.word	0x2000028c

08000cb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b02      	ldr	r3, [pc, #8]	; (8000cc8 <HAL_GetTick+0x10>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	2000028c 	.word	0x2000028c

08000ccc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e0be      	b.n	8000e6c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d109      	bne.n	8000d10 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fdf6 	bl	80008fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f000 fbc5 	bl	80014a0 <ADC_ConversionStop_Disable>
 8000d16:	4603      	mov	r3, r0
 8000d18:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1e:	f003 0310 	and.w	r3, r3, #16
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	f040 8099 	bne.w	8000e5a <HAL_ADC_Init+0x18e>
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f040 8095 	bne.w	8000e5a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d38:	f023 0302 	bic.w	r3, r3, #2
 8000d3c:	f043 0202 	orr.w	r2, r3, #2
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d4c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7b1b      	ldrb	r3, [r3, #12]
 8000d52:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d54:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d64:	d003      	beq.n	8000d6e <HAL_ADC_Init+0xa2>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d102      	bne.n	8000d74 <HAL_ADC_Init+0xa8>
 8000d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d72:	e000      	b.n	8000d76 <HAL_ADC_Init+0xaa>
 8000d74:	2300      	movs	r3, #0
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7d1b      	ldrb	r3, [r3, #20]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d119      	bne.n	8000db8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	7b1b      	ldrb	r3, [r3, #12]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d109      	bne.n	8000da0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	035a      	lsls	r2, r3, #13
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	e00b      	b.n	8000db8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da4:	f043 0220 	orr.w	r2, r3, #32
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	f043 0201 	orr.w	r2, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <HAL_ADC_Init+0x1a8>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	430b      	orrs	r3, r1
 8000dde:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000de8:	d003      	beq.n	8000df2 <HAL_ADC_Init+0x126>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d104      	bne.n	8000dfc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	051b      	lsls	r3, r3, #20
 8000dfa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e02:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <HAL_ADC_Init+0x1ac>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d10b      	bne.n	8000e38 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2a:	f023 0303 	bic.w	r3, r3, #3
 8000e2e:	f043 0201 	orr.w	r2, r3, #1
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e36:	e018      	b.n	8000e6a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3c:	f023 0312 	bic.w	r3, r3, #18
 8000e40:	f043 0210 	orr.w	r2, r3, #16
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	f043 0201 	orr.w	r2, r3, #1
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e54:	2301      	movs	r3, #1
 8000e56:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e58:	e007      	b.n	8000e6a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5e:	f043 0210 	orr.w	r2, r3, #16
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3718      	adds	r7, #24
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	ffe1f7fd 	.word	0xffe1f7fd
 8000e78:	ff1f0efe 	.word	0xff1f0efe

08000e7c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d101      	bne.n	8000e96 <HAL_ADC_Start+0x1a>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e098      	b.n	8000fc8 <HAL_ADC_Start+0x14c>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 faa4 	bl	80013ec <ADC_Enable>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 8087 	bne.w	8000fbe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a41      	ldr	r2, [pc, #260]	; (8000fd0 <HAL_ADC_Start+0x154>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d105      	bne.n	8000eda <HAL_ADC_Start+0x5e>
 8000ece:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <HAL_ADC_Start+0x158>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d115      	bne.n	8000f06 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d026      	beq.n	8000f42 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000efc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f04:	e01d      	b.n	8000f42 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <HAL_ADC_Start+0x158>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d004      	beq.n	8000f26 <HAL_ADC_Start+0xaa>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a2b      	ldr	r2, [pc, #172]	; (8000fd0 <HAL_ADC_Start+0x154>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10d      	bne.n	8000f42 <HAL_ADC_Start+0xc6>
 8000f26:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <HAL_ADC_Start+0x158>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d006      	beq.n	8000f5c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	f023 0206 	bic.w	r2, r3, #6
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f5a:	e002      	b.n	8000f62 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f06f 0202 	mvn.w	r2, #2
 8000f72:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f7e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f82:	d113      	bne.n	8000fac <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f88:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <HAL_ADC_Start+0x154>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d105      	bne.n	8000f9a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_ADC_Start+0x158>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d108      	bne.n	8000fac <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	e00c      	b.n	8000fc6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	e003      	b.n	8000fc6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40012800 	.word	0x40012800
 8000fd4:	40012400 	.word	0x40012400

08000fd8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fee:	f7ff fe63 	bl	8000cb8 <HAL_GetTick>
 8000ff2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	f043 0220 	orr.w	r2, r3, #32
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e0d3      	b.n	80011c2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001024:	2b00      	cmp	r3, #0
 8001026:	d131      	bne.n	800108c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001032:	2b00      	cmp	r3, #0
 8001034:	d12a      	bne.n	800108c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001036:	e021      	b.n	800107c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103e:	d01d      	beq.n	800107c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <HAL_ADC_PollForConversion+0x7e>
 8001046:	f7ff fe37 	bl	8000cb8 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d212      	bcs.n	800107c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10b      	bne.n	800107c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001068:	f043 0204 	orr.w	r2, r3, #4
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e0a2      	b.n	80011c2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0d6      	beq.n	8001038 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800108a:	e070      	b.n	800116e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800108c:	4b4f      	ldr	r3, [pc, #316]	; (80011cc <HAL_ADC_PollForConversion+0x1f4>)
 800108e:	681c      	ldr	r4, [r3, #0]
 8001090:	2002      	movs	r0, #2
 8001092:	f002 ff19 	bl	8003ec8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001096:	4603      	mov	r3, r0
 8001098:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6919      	ldr	r1, [r3, #16]
 80010a2:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <HAL_ADC_PollForConversion+0x1f8>)
 80010a4:	400b      	ands	r3, r1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d118      	bne.n	80010dc <HAL_ADC_PollForConversion+0x104>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68d9      	ldr	r1, [r3, #12]
 80010b0:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <HAL_ADC_PollForConversion+0x1fc>)
 80010b2:	400b      	ands	r3, r1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d111      	bne.n	80010dc <HAL_ADC_PollForConversion+0x104>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6919      	ldr	r1, [r3, #16]
 80010be:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <HAL_ADC_PollForConversion+0x200>)
 80010c0:	400b      	ands	r3, r1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d108      	bne.n	80010d8 <HAL_ADC_PollForConversion+0x100>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68d9      	ldr	r1, [r3, #12]
 80010cc:	4b43      	ldr	r3, [pc, #268]	; (80011dc <HAL_ADC_PollForConversion+0x204>)
 80010ce:	400b      	ands	r3, r1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_ADC_PollForConversion+0x100>
 80010d4:	2314      	movs	r3, #20
 80010d6:	e020      	b.n	800111a <HAL_ADC_PollForConversion+0x142>
 80010d8:	2329      	movs	r3, #41	; 0x29
 80010da:	e01e      	b.n	800111a <HAL_ADC_PollForConversion+0x142>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6919      	ldr	r1, [r3, #16]
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <HAL_ADC_PollForConversion+0x200>)
 80010e4:	400b      	ands	r3, r1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d106      	bne.n	80010f8 <HAL_ADC_PollForConversion+0x120>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68d9      	ldr	r1, [r3, #12]
 80010f0:	4b3a      	ldr	r3, [pc, #232]	; (80011dc <HAL_ADC_PollForConversion+0x204>)
 80010f2:	400b      	ands	r3, r1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00d      	beq.n	8001114 <HAL_ADC_PollForConversion+0x13c>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6919      	ldr	r1, [r3, #16]
 80010fe:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <HAL_ADC_PollForConversion+0x208>)
 8001100:	400b      	ands	r3, r1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d108      	bne.n	8001118 <HAL_ADC_PollForConversion+0x140>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68d9      	ldr	r1, [r3, #12]
 800110c:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <HAL_ADC_PollForConversion+0x208>)
 800110e:	400b      	ands	r3, r1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_ADC_PollForConversion+0x140>
 8001114:	2354      	movs	r3, #84	; 0x54
 8001116:	e000      	b.n	800111a <HAL_ADC_PollForConversion+0x142>
 8001118:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001120:	e021      	b.n	8001166 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d01a      	beq.n	8001160 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d007      	beq.n	8001140 <HAL_ADC_PollForConversion+0x168>
 8001130:	f7ff fdc2 	bl	8000cb8 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	429a      	cmp	r2, r3
 800113e:	d20f      	bcs.n	8001160 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d90b      	bls.n	8001160 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	f043 0204 	orr.w	r2, r3, #4
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e030      	b.n	80011c2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3301      	adds	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	429a      	cmp	r2, r3
 800116c:	d8d9      	bhi.n	8001122 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f06f 0212 	mvn.w	r2, #18
 8001176:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800118e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001192:	d115      	bne.n	80011c0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001198:	2b00      	cmp	r3, #0
 800119a:	d111      	bne.n	80011c0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d105      	bne.n	80011c0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000000 	.word	0x20000000
 80011d0:	24924924 	.word	0x24924924
 80011d4:	00924924 	.word	0x00924924
 80011d8:	12492492 	.word	0x12492492
 80011dc:	00492492 	.word	0x00492492
 80011e0:	00249249 	.word	0x00249249

080011e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_ADC_ConfigChannel+0x20>
 8001218:	2302      	movs	r3, #2
 800121a:	e0dc      	b.n	80013d6 <HAL_ADC_ConfigChannel+0x1da>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b06      	cmp	r3, #6
 800122a:	d81c      	bhi.n	8001266 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	3b05      	subs	r3, #5
 800123e:	221f      	movs	r2, #31
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	4019      	ands	r1, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	3b05      	subs	r3, #5
 8001258:	fa00 f203 	lsl.w	r2, r0, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	635a      	str	r2, [r3, #52]	; 0x34
 8001264:	e03c      	b.n	80012e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b0c      	cmp	r3, #12
 800126c:	d81c      	bhi.n	80012a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	3b23      	subs	r3, #35	; 0x23
 8001280:	221f      	movs	r2, #31
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	4019      	ands	r1, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	3b23      	subs	r3, #35	; 0x23
 800129a:	fa00 f203 	lsl.w	r2, r0, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	631a      	str	r2, [r3, #48]	; 0x30
 80012a6:	e01b      	b.n	80012e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	3b41      	subs	r3, #65	; 0x41
 80012ba:	221f      	movs	r2, #31
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4019      	ands	r1, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	3b41      	subs	r3, #65	; 0x41
 80012d4:	fa00 f203 	lsl.w	r2, r0, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b09      	cmp	r3, #9
 80012e6:	d91c      	bls.n	8001322 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68d9      	ldr	r1, [r3, #12]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4613      	mov	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	3b1e      	subs	r3, #30
 80012fa:	2207      	movs	r2, #7
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	4019      	ands	r1, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	6898      	ldr	r0, [r3, #8]
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	3b1e      	subs	r3, #30
 8001314:	fa00 f203 	lsl.w	r2, r0, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	e019      	b.n	8001356 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6919      	ldr	r1, [r3, #16]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	2207      	movs	r2, #7
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	4019      	ands	r1, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6898      	ldr	r0, [r3, #8]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	fa00 f203 	lsl.w	r2, r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b10      	cmp	r3, #16
 800135c:	d003      	beq.n	8001366 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001362:	2b11      	cmp	r3, #17
 8001364:	d132      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <HAL_ADC_ConfigChannel+0x1e4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d125      	bne.n	80013bc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d126      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800138c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b10      	cmp	r3, #16
 8001394:	d11a      	bne.n	80013cc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <HAL_ADC_ConfigChannel+0x1ec>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	0c9a      	lsrs	r2, r3, #18
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ac:	e002      	b.n	80013b4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f9      	bne.n	80013ae <HAL_ADC_ConfigChannel+0x1b2>
 80013ba:	e007      	b.n	80013cc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	f043 0220 	orr.w	r2, r3, #32
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	40012400 	.word	0x40012400
 80013e4:	20000000 	.word	0x20000000
 80013e8:	431bde83 	.word	0x431bde83

080013ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b01      	cmp	r3, #1
 8001408:	d040      	beq.n	800148c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0201 	orr.w	r2, r2, #1
 8001418:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <ADC_Enable+0xac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a1f      	ldr	r2, [pc, #124]	; (800149c <ADC_Enable+0xb0>)
 8001420:	fba2 2303 	umull	r2, r3, r2, r3
 8001424:	0c9b      	lsrs	r3, r3, #18
 8001426:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001428:	e002      	b.n	8001430 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	3b01      	subs	r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f9      	bne.n	800142a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001436:	f7ff fc3f 	bl	8000cb8 <HAL_GetTick>
 800143a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800143c:	e01f      	b.n	800147e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800143e:	f7ff fc3b 	bl	8000cb8 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d918      	bls.n	800147e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b01      	cmp	r3, #1
 8001458:	d011      	beq.n	800147e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	f043 0210 	orr.w	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e007      	b.n	800148e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d1d8      	bne.n	800143e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000
 800149c:	431bde83 	.word	0x431bde83

080014a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d12e      	bne.n	8001518 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ca:	f7ff fbf5 	bl	8000cb8 <HAL_GetTick>
 80014ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014d0:	e01b      	b.n	800150a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014d2:	f7ff fbf1 	bl	8000cb8 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d914      	bls.n	800150a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d10d      	bne.n	800150a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	f043 0210 	orr.w	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	f043 0201 	orr.w	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e007      	b.n	800151a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b01      	cmp	r3, #1
 8001516:	d0dc      	beq.n	80014d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b087      	sub	sp, #28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800153a:	2b01      	cmp	r3, #1
 800153c:	d101      	bne.n	8001542 <HAL_ADCEx_Calibration_Start+0x1e>
 800153e:	2302      	movs	r3, #2
 8001540:	e095      	b.n	800166e <HAL_ADCEx_Calibration_Start+0x14a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffa8 	bl	80014a0 <ADC_ConversionStop_Disable>
 8001550:	4603      	mov	r3, r0
 8001552:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001554:	7dfb      	ldrb	r3, [r7, #23]
 8001556:	2b00      	cmp	r3, #0
 8001558:	f040 8084 	bne.w	8001664 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001564:	f023 0302 	bic.w	r3, r3, #2
 8001568:	f043 0202 	orr.w	r2, r3, #2
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001570:	4b41      	ldr	r3, [pc, #260]	; (8001678 <HAL_ADCEx_Calibration_Start+0x154>)
 8001572:	681c      	ldr	r4, [r3, #0]
 8001574:	2002      	movs	r0, #2
 8001576:	f002 fca7 	bl	8003ec8 <HAL_RCCEx_GetPeriphCLKFreq>
 800157a:	4603      	mov	r3, r0
 800157c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001580:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001582:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001584:	e002      	b.n	800158c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3b01      	subs	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f9      	bne.n	8001586 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff2a 	bl	80013ec <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0208 	orr.w	r2, r2, #8
 80015a6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80015a8:	f7ff fb86 	bl	8000cb8 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015ae:	e01b      	b.n	80015e8 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015b0:	f7ff fb82 	bl	8000cb8 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b0a      	cmp	r3, #10
 80015bc:	d914      	bls.n	80015e8 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00d      	beq.n	80015e8 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	f023 0312 	bic.w	r3, r3, #18
 80015d4:	f043 0210 	orr.w	r2, r3, #16
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e042      	b.n	800166e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 0308 	and.w	r3, r3, #8
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1dc      	bne.n	80015b0 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0204 	orr.w	r2, r2, #4
 8001604:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001606:	f7ff fb57 	bl	8000cb8 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800160c:	e01b      	b.n	8001646 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800160e:	f7ff fb53 	bl	8000cb8 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b0a      	cmp	r3, #10
 800161a:	d914      	bls.n	8001646 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00d      	beq.n	8001646 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162e:	f023 0312 	bic.w	r3, r3, #18
 8001632:	f043 0210 	orr.w	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e013      	b.n	800166e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1dc      	bne.n	800160e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	f023 0303 	bic.w	r3, r3, #3
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800166c:	7dfb      	ldrb	r3, [r7, #23]
}
 800166e:	4618      	mov	r0, r3
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4906      	ldr	r1, [pc, #24]	; (8001714 <__NVIC_EnableIRQ+0x34>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff90 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff2d 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff42 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff90 	bl	800176c <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5f 	bl	8001718 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff35 	bl	80016e0 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b08b      	sub	sp, #44	; 0x2c
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	e169      	b.n	8001b80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018ac:	2201      	movs	r2, #1
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	69fa      	ldr	r2, [r7, #28]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 8158 	bne.w	8001b7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a9a      	ldr	r2, [pc, #616]	; (8001b38 <HAL_GPIO_Init+0x2a0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d05e      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018d4:	4a98      	ldr	r2, [pc, #608]	; (8001b38 <HAL_GPIO_Init+0x2a0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d875      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018da:	4a98      	ldr	r2, [pc, #608]	; (8001b3c <HAL_GPIO_Init+0x2a4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d058      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018e0:	4a96      	ldr	r2, [pc, #600]	; (8001b3c <HAL_GPIO_Init+0x2a4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d86f      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018e6:	4a96      	ldr	r2, [pc, #600]	; (8001b40 <HAL_GPIO_Init+0x2a8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d052      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018ec:	4a94      	ldr	r2, [pc, #592]	; (8001b40 <HAL_GPIO_Init+0x2a8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d869      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018f2:	4a94      	ldr	r2, [pc, #592]	; (8001b44 <HAL_GPIO_Init+0x2ac>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d04c      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 80018f8:	4a92      	ldr	r2, [pc, #584]	; (8001b44 <HAL_GPIO_Init+0x2ac>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d863      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 80018fe:	4a92      	ldr	r2, [pc, #584]	; (8001b48 <HAL_GPIO_Init+0x2b0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d046      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
 8001904:	4a90      	ldr	r2, [pc, #576]	; (8001b48 <HAL_GPIO_Init+0x2b0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d85d      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 800190a:	2b12      	cmp	r3, #18
 800190c:	d82a      	bhi.n	8001964 <HAL_GPIO_Init+0xcc>
 800190e:	2b12      	cmp	r3, #18
 8001910:	d859      	bhi.n	80019c6 <HAL_GPIO_Init+0x12e>
 8001912:	a201      	add	r2, pc, #4	; (adr r2, 8001918 <HAL_GPIO_Init+0x80>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	08001993 	.word	0x08001993
 800191c:	0800196d 	.word	0x0800196d
 8001920:	0800197f 	.word	0x0800197f
 8001924:	080019c1 	.word	0x080019c1
 8001928:	080019c7 	.word	0x080019c7
 800192c:	080019c7 	.word	0x080019c7
 8001930:	080019c7 	.word	0x080019c7
 8001934:	080019c7 	.word	0x080019c7
 8001938:	080019c7 	.word	0x080019c7
 800193c:	080019c7 	.word	0x080019c7
 8001940:	080019c7 	.word	0x080019c7
 8001944:	080019c7 	.word	0x080019c7
 8001948:	080019c7 	.word	0x080019c7
 800194c:	080019c7 	.word	0x080019c7
 8001950:	080019c7 	.word	0x080019c7
 8001954:	080019c7 	.word	0x080019c7
 8001958:	080019c7 	.word	0x080019c7
 800195c:	08001975 	.word	0x08001975
 8001960:	08001989 	.word	0x08001989
 8001964:	4a79      	ldr	r2, [pc, #484]	; (8001b4c <HAL_GPIO_Init+0x2b4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800196a:	e02c      	b.n	80019c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e029      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	3304      	adds	r3, #4
 800197a:	623b      	str	r3, [r7, #32]
          break;
 800197c:	e024      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	3308      	adds	r3, #8
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e01f      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	330c      	adds	r3, #12
 800198e:	623b      	str	r3, [r7, #32]
          break;
 8001990:	e01a      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800199a:	2304      	movs	r3, #4
 800199c:	623b      	str	r3, [r7, #32]
          break;
 800199e:	e013      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a8:	2308      	movs	r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	611a      	str	r2, [r3, #16]
          break;
 80019b2:	e009      	b.n	80019c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b4:	2308      	movs	r3, #8
 80019b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	615a      	str	r2, [r3, #20]
          break;
 80019be:	e003      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e000      	b.n	80019c8 <HAL_GPIO_Init+0x130>
          break;
 80019c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2bff      	cmp	r3, #255	; 0xff
 80019cc:	d801      	bhi.n	80019d2 <HAL_GPIO_Init+0x13a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	e001      	b.n	80019d6 <HAL_GPIO_Init+0x13e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3304      	adds	r3, #4
 80019d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	2bff      	cmp	r3, #255	; 0xff
 80019dc:	d802      	bhi.n	80019e4 <HAL_GPIO_Init+0x14c>
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_Init+0x152>
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	3b08      	subs	r3, #8
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	210f      	movs	r1, #15
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	401a      	ands	r2, r3
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	431a      	orrs	r2, r3
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80b1 	beq.w	8001b7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a18:	4b4d      	ldr	r3, [pc, #308]	; (8001b50 <HAL_GPIO_Init+0x2b8>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4a4c      	ldr	r2, [pc, #304]	; (8001b50 <HAL_GPIO_Init+0x2b8>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6193      	str	r3, [r2, #24]
 8001a24:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <HAL_GPIO_Init+0x2b8>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a30:	4a48      	ldr	r2, [pc, #288]	; (8001b54 <HAL_GPIO_Init+0x2bc>)
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a40      	ldr	r2, [pc, #256]	; (8001b58 <HAL_GPIO_Init+0x2c0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d013      	beq.n	8001a84 <HAL_GPIO_Init+0x1ec>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a3f      	ldr	r2, [pc, #252]	; (8001b5c <HAL_GPIO_Init+0x2c4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d00d      	beq.n	8001a80 <HAL_GPIO_Init+0x1e8>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a3e      	ldr	r2, [pc, #248]	; (8001b60 <HAL_GPIO_Init+0x2c8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d007      	beq.n	8001a7c <HAL_GPIO_Init+0x1e4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a3d      	ldr	r2, [pc, #244]	; (8001b64 <HAL_GPIO_Init+0x2cc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d101      	bne.n	8001a78 <HAL_GPIO_Init+0x1e0>
 8001a74:	2303      	movs	r3, #3
 8001a76:	e006      	b.n	8001a86 <HAL_GPIO_Init+0x1ee>
 8001a78:	2304      	movs	r3, #4
 8001a7a:	e004      	b.n	8001a86 <HAL_GPIO_Init+0x1ee>
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	e002      	b.n	8001a86 <HAL_GPIO_Init+0x1ee>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_GPIO_Init+0x1ee>
 8001a84:	2300      	movs	r3, #0
 8001a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a88:	f002 0203 	and.w	r2, r2, #3
 8001a8c:	0092      	lsls	r2, r2, #2
 8001a8e:	4093      	lsls	r3, r2
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a96:	492f      	ldr	r1, [pc, #188]	; (8001b54 <HAL_GPIO_Init+0x2bc>)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ab0:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	492c      	ldr	r1, [pc, #176]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	600b      	str	r3, [r1, #0]
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	4928      	ldr	r1, [pc, #160]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	4922      	ldr	r1, [pc, #136]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	491e      	ldr	r1, [pc, #120]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	4918      	ldr	r1, [pc, #96]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4914      	ldr	r1, [pc, #80]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d021      	beq.n	8001b6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	490e      	ldr	r1, [pc, #56]	; (8001b68 <HAL_GPIO_Init+0x2d0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
 8001b34:	e021      	b.n	8001b7a <HAL_GPIO_Init+0x2e2>
 8001b36:	bf00      	nop
 8001b38:	10320000 	.word	0x10320000
 8001b3c:	10310000 	.word	0x10310000
 8001b40:	10220000 	.word	0x10220000
 8001b44:	10210000 	.word	0x10210000
 8001b48:	10120000 	.word	0x10120000
 8001b4c:	10110000 	.word	0x10110000
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40010800 	.word	0x40010800
 8001b5c:	40010c00 	.word	0x40010c00
 8001b60:	40011000 	.word	0x40011000
 8001b64:	40011400 	.word	0x40011400
 8001b68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	4909      	ldr	r1, [pc, #36]	; (8001b9c <HAL_GPIO_Init+0x304>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f47f ae8e 	bne.w	80018ac <HAL_GPIO_Init+0x14>
  }
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	372c      	adds	r7, #44	; 0x2c
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bbc:	e003      	b.n	8001bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	041a      	lsls	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd2:	b08b      	sub	sp, #44	; 0x2c
 8001bd4:	af06      	add	r7, sp, #24
 8001bd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0fd      	b.n	8001dde <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f006 fd1a 	bl	8008630 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2203      	movs	r2, #3
 8001c00:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 fb1f 	bl	800424c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	687e      	ldr	r6, [r7, #4]
 8001c16:	466d      	mov	r5, sp
 8001c18:	f106 0410 	add.w	r4, r6, #16
 8001c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	602b      	str	r3, [r5, #0]
 8001c24:	1d33      	adds	r3, r6, #4
 8001c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c28:	6838      	ldr	r0, [r7, #0]
 8001c2a:	f002 fae9 	bl	8004200 <USB_CoreInit>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0ce      	b.n	8001dde <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 fb1a 	bl	8004280 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e04c      	b.n	8001cec <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	440b      	add	r3, r1
 8001c62:	3301      	adds	r3, #1
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	b298      	uxth	r0, r3
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3336      	adds	r3, #54	; 0x36
 8001c90:	4602      	mov	r2, r0
 8001c92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	3303      	adds	r3, #3
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3338      	adds	r3, #56	; 0x38
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	440b      	add	r3, r1
 8001ccc:	333c      	adds	r3, #60	; 0x3c
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	3340      	adds	r3, #64	; 0x40
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d3ad      	bcc.n	8001c52 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e044      	b.n	8001d86 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	440b      	add	r3, r1
 8001d20:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	440b      	add	r3, r1
 8001d78:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	3301      	adds	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3b5      	bcc.n	8001cfc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	603b      	str	r3, [r7, #0]
 8001d96:	687e      	ldr	r6, [r7, #4]
 8001d98:	466d      	mov	r5, sp
 8001d9a:	f106 0410 	add.w	r4, r6, #16
 8001d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	602b      	str	r3, [r5, #0]
 8001da6:	1d33      	adds	r3, r6, #4
 8001da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001daa:	6838      	ldr	r0, [r7, #0]
 8001dac:	f002 fa74 	bl	8004298 <USB_DevInit>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d005      	beq.n	8001dc2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00d      	b.n	8001dde <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f004 ff26 	bl	8006c28 <USB_DevDisconnect>

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001de6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_PCD_Start+0x16>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e016      	b.n	8001e2a <HAL_PCD_Start+0x44>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 fa09 	bl	8004220 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e0e:	2101      	movs	r1, #1
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f006 fe64 	bl	8008ade <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 fefa 	bl	8006c14 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b088      	sub	sp, #32
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f004 fefc 	bl	8006c3c <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e4e:	d102      	bne.n	8001e56 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fb48 	bl	80024e6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f004 feee 	bl	8006c3c <USB_ReadInterrupts>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6a:	d112      	bne.n	8001e92 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7e:	b292      	uxth	r2, r2
 8001e80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f006 fc4e 	bl	8008726 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f923 	bl	80020d8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f004 fed0 	bl	8006c3c <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001eba:	b292      	uxth	r2, r2
 8001ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f004 feb9 	bl	8006c3c <USB_ReadInterrupts>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ed4:	d10b      	bne.n	8001eee <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ee8:	b292      	uxth	r2, r2
 8001eea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 fea2 	bl	8006c3c <USB_ReadInterrupts>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f02:	d126      	bne.n	8001f52 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0204 	bic.w	r2, r2, #4
 8001f16:	b292      	uxth	r2, r2
 8001f18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0208 	bic.w	r2, r2, #8
 8001f2e:	b292      	uxth	r2, r2
 8001f30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f006 fc2f 	bl	8008798 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f4c:	b292      	uxth	r2, r2
 8001f4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 fe70 	bl	8006c3c <USB_ReadInterrupts>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f66:	f040 8082 	bne.w	800206e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	77fb      	strb	r3, [r7, #31]
 8001f6e:	e010      	b.n	8001f92 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	7ffb      	ldrb	r3, [r7, #31]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	441a      	add	r2, r3
 8001f7c:	7ffb      	ldrb	r3, [r7, #31]
 8001f7e:	8812      	ldrh	r2, [r2, #0]
 8001f80:	b292      	uxth	r2, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	3320      	adds	r3, #32
 8001f86:	443b      	add	r3, r7
 8001f88:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001f8c:	7ffb      	ldrb	r3, [r7, #31]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	77fb      	strb	r3, [r7, #31]
 8001f92:	7ffb      	ldrb	r3, [r7, #31]
 8001f94:	2b07      	cmp	r3, #7
 8001f96:	d9eb      	bls.n	8001f70 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	b292      	uxth	r2, r2
 8001fac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0201 	bic.w	r2, r2, #1
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001fc8:	bf00      	nop
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0f6      	beq.n	8001fca <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fee:	b292      	uxth	r2, r2
 8001ff0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	77fb      	strb	r3, [r7, #31]
 8001ff8:	e00f      	b.n	800201a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001ffa:	7ffb      	ldrb	r3, [r7, #31]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	4611      	mov	r1, r2
 8002002:	7ffa      	ldrb	r2, [r7, #31]
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	440a      	add	r2, r1
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	3320      	adds	r3, #32
 800200c:	443b      	add	r3, r7
 800200e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002012:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002014:	7ffb      	ldrb	r3, [r7, #31]
 8002016:	3301      	adds	r3, #1
 8002018:	77fb      	strb	r3, [r7, #31]
 800201a:	7ffb      	ldrb	r3, [r7, #31]
 800201c:	2b07      	cmp	r3, #7
 800201e:	d9ec      	bls.n	8001ffa <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002028:	b29a      	uxth	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f042 0208 	orr.w	r2, r2, #8
 8002032:	b292      	uxth	r2, r2
 8002034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002040:	b29a      	uxth	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204a:	b292      	uxth	r2, r2
 800204c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002058:	b29a      	uxth	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0204 	orr.w	r2, r2, #4
 8002062:	b292      	uxth	r2, r2
 8002064:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f006 fb7b 	bl	8008764 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f004 fde2 	bl	8006c3c <USB_ReadInterrupts>
 8002078:	4603      	mov	r3, r0
 800207a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002082:	d10e      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800208c:	b29a      	uxth	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002096:	b292      	uxth	r2, r2
 8002098:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f006 fb34 	bl	800870a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f004 fdc8 	bl	8006c3c <USB_ReadInterrupts>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b6:	d10b      	bne.n	80020d0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ca:	b292      	uxth	r2, r2
 80020cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80020d0:	bf00      	nop
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_PCD_SetAddress+0x1a>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e013      	b.n	800211a <HAL_PCD_SetAddress+0x42>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	4611      	mov	r1, r2
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fd6f 	bl	8006bee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	4608      	mov	r0, r1
 800212c:	4611      	mov	r1, r2
 800212e:	461a      	mov	r2, r3
 8002130:	4603      	mov	r3, r0
 8002132:	70fb      	strb	r3, [r7, #3]
 8002134:	460b      	mov	r3, r1
 8002136:	803b      	strh	r3, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800213c:	2300      	movs	r3, #0
 800213e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002144:	2b00      	cmp	r3, #0
 8002146:	da0e      	bge.n	8002166 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	705a      	strb	r2, [r3, #1]
 8002164:	e00e      	b.n	8002184 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	f003 0207 	and.w	r2, r3, #7
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	b2da      	uxtb	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002190:	883a      	ldrh	r2, [r7, #0]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	78ba      	ldrb	r2, [r7, #2]
 800219a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	785b      	ldrb	r3, [r3, #1]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021ae:	78bb      	ldrb	r3, [r7, #2]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d102      	bne.n	80021ba <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_PCD_EP_Open+0xa6>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e00e      	b.n	80021e6 <HAL_PCD_EP_Open+0xc4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68f9      	ldr	r1, [r7, #12]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f002 f87e 	bl	80042d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80021e4:	7afb      	ldrb	r3, [r7, #11]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da0e      	bge.n	8002220 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	705a      	strb	r2, [r3, #1]
 800221e:	e00e      	b.n	800223e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	f003 0207 	and.w	r2, r3, #7
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_PCD_EP_Close+0x6a>
 8002254:	2302      	movs	r3, #2
 8002256:	e00e      	b.n	8002276 <HAL_PCD_EP_Close+0x88>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68f9      	ldr	r1, [r7, #12]
 8002266:	4618      	mov	r0, r3
 8002268:	f002 fba0 	bl	80049ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	603b      	str	r3, [r7, #0]
 800228a:	460b      	mov	r3, r1
 800228c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800228e:	7afb      	ldrb	r3, [r7, #11]
 8002290:	f003 0207 	and.w	r2, r3, #7
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2200      	movs	r2, #0
 80022b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2200      	movs	r2, #0
 80022bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022be:	7afb      	ldrb	r3, [r7, #11]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d106      	bne.n	80022e2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6979      	ldr	r1, [r7, #20]
 80022da:	4618      	mov	r0, r3
 80022dc:	f002 fd52 	bl	8004d84 <USB_EPStartXfer>
 80022e0:	e005      	b.n	80022ee <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6979      	ldr	r1, [r7, #20]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f002 fd4b 	bl	8004d84 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	460b      	mov	r3, r1
 8002306:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002308:	7afb      	ldrb	r3, [r7, #11]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2201      	movs	r2, #1
 8002342:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002344:	7afb      	ldrb	r3, [r7, #11]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	b2da      	uxtb	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6979      	ldr	r1, [r7, #20]
 8002360:	4618      	mov	r0, r3
 8002362:	f002 fd0f 	bl	8004d84 <USB_EPStartXfer>
 8002366:	e005      	b.n	8002374 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6979      	ldr	r1, [r7, #20]
 800236e:	4618      	mov	r0, r3
 8002370:	f002 fd08 	bl	8004d84 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f003 0207 	and.w	r2, r3, #7
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d901      	bls.n	800239c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e04c      	b.n	8002436 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800239c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da0e      	bge.n	80023c2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	705a      	strb	r2, [r3, #1]
 80023c0:	e00c      	b.n	80023dc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_PCD_EP_SetStall+0x7e>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e01c      	b.n	8002436 <HAL_PCD_EP_SetStall+0xb8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68f9      	ldr	r1, [r7, #12]
 800240a:	4618      	mov	r0, r3
 800240c:	f004 faf2 	bl	80069f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	2b00      	cmp	r3, #0
 8002418:	d108      	bne.n	800242c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002424:	4619      	mov	r1, r3
 8002426:	4610      	mov	r0, r2
 8002428:	f004 fc17 	bl	8006c5a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	f003 020f 	and.w	r2, r3, #15
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d901      	bls.n	800245c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e040      	b.n	80024de <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800245c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002460:	2b00      	cmp	r3, #0
 8002462:	da0e      	bge.n	8002482 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	705a      	strb	r2, [r3, #1]
 8002480:	e00e      	b.n	80024a0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	f003 0207 	and.w	r2, r3, #7
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_PCD_EP_ClrStall+0x82>
 80024bc:	2302      	movs	r3, #2
 80024be:	e00e      	b.n	80024de <HAL_PCD_EP_ClrStall+0xa0>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f004 fae0 	bl	8006a94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b08e      	sub	sp, #56	; 0x38
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024ee:	e2ec      	b.n	8002aca <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024f8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002506:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800250a:	2b00      	cmp	r3, #0
 800250c:	f040 8161 	bne.w	80027d2 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002510:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	d152      	bne.n	80025c0 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	81fb      	strh	r3, [r7, #14]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	89fb      	ldrh	r3, [r7, #14]
 8002532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253a:	b29b      	uxth	r3, r3
 800253c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3328      	adds	r3, #40	; 0x28
 8002542:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	3302      	adds	r3, #2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	441a      	add	r2, r3
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800257e:	2100      	movs	r1, #0
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f006 f8a8 	bl	80086d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 829b 	beq.w	8002aca <PCD_EP_ISR_Handler+0x5e4>
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	f040 8296 	bne.w	8002aca <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	b292      	uxth	r2, r2
 80025b2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025be:	e284      	b.n	8002aca <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80025d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80025d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d034      	beq.n	8002644 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	3306      	adds	r3, #6
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002618:	b29b      	uxth	r3, r3
 800261a:	f004 fb6e 	bl	8006cfa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29a      	uxth	r2, r3
 8002626:	f640 738f 	movw	r3, #3983	; 0xf8f
 800262a:	4013      	ands	r3, r2
 800262c:	823b      	strh	r3, [r7, #16]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	8a3a      	ldrh	r2, [r7, #16]
 8002634:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002638:	b292      	uxth	r2, r2
 800263a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f006 f81d 	bl	800867c <HAL_PCD_SetupStageCallback>
 8002642:	e242      	b.n	8002aca <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002644:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002648:	2b00      	cmp	r3, #0
 800264a:	f280 823e 	bge.w	8002aca <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29a      	uxth	r2, r3
 8002656:	f640 738f 	movw	r3, #3983	; 0xf8f
 800265a:	4013      	ands	r3, r2
 800265c:	83bb      	strh	r3, [r7, #28]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	8bba      	ldrh	r2, [r7, #28]
 8002664:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002668:	b292      	uxth	r2, r2
 800266a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002674:	b29b      	uxth	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	3306      	adds	r3, #6
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	4413      	add	r3, r2
 800268a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d019      	beq.n	80026d4 <PCD_EP_ISR_Handler+0x1ee>
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d015      	beq.n	80026d4 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	6959      	ldr	r1, [r3, #20]
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f004 fb1e 	bl	8006cfa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	441a      	add	r2, r3
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80026cc:	2100      	movs	r1, #0
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f005 ffe6 	bl	80086a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f040 81f2 	bne.w	8002aca <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	4413      	add	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d112      	bne.n	8002734 <PCD_EP_ISR_Handler+0x24e>
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002718:	b29a      	uxth	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	801a      	strh	r2, [r3, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800272c:	b29a      	uxth	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	e02f      	b.n	8002794 <PCD_EP_ISR_Handler+0x2ae>
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b3e      	cmp	r3, #62	; 0x3e
 800273a:	d813      	bhi.n	8002764 <PCD_EP_ISR_Handler+0x27e>
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <PCD_EP_ISR_Handler+0x270>
 8002750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002752:	3301      	adds	r3, #1
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	b29b      	uxth	r3, r3
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	b29a      	uxth	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	801a      	strh	r2, [r3, #0]
 8002762:	e017      	b.n	8002794 <PCD_EP_ISR_Handler+0x2ae>
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	633b      	str	r3, [r7, #48]	; 0x30
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f003 031f 	and.w	r3, r3, #31
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <PCD_EP_ISR_Handler+0x298>
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	3b01      	subs	r3, #1
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	b29b      	uxth	r3, r3
 8002782:	029b      	lsls	r3, r3, #10
 8002784:	b29b      	uxth	r3, r3
 8002786:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800278e:	b29a      	uxth	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a4:	827b      	strh	r3, [r7, #18]
 80027a6:	8a7b      	ldrh	r3, [r7, #18]
 80027a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80027ac:	827b      	strh	r3, [r7, #18]
 80027ae:	8a7b      	ldrh	r3, [r7, #18]
 80027b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80027b4:	827b      	strh	r3, [r7, #18]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	8a7b      	ldrh	r3, [r7, #18]
 80027bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	8013      	strh	r3, [r2, #0]
 80027d0:	e17b      	b.n	8002aca <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027e4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f280 80ea 	bge.w	80029c2 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002804:	4013      	ands	r3, r2
 8002806:	853b      	strh	r3, [r7, #40]	; 0x28
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002818:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800281c:	b292      	uxth	r2, r2
 800281e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002820:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	7b1b      	ldrb	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d122      	bne.n	8002884 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	3306      	adds	r3, #6
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002866:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002868:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8087 	beq.w	800297e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	6959      	ldr	r1, [r3, #20]
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	88da      	ldrh	r2, [r3, #6]
 800287c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800287e:	f004 fa3c 	bl	8006cfa <USB_ReadPMA>
 8002882:	e07c      	b.n	800297e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	78db      	ldrb	r3, [r3, #3]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d108      	bne.n	800289e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800288c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800288e:	461a      	mov	r2, r3
 8002890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f927 	bl	8002ae6 <HAL_PCD_EP_DB_Receive>
 8002898:	4603      	mov	r3, r0
 800289a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800289c:	e06f      	b.n	800297e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	461a      	mov	r2, r3
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	441a      	add	r2, r3
 80028c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028da:	b29b      	uxth	r3, r3
 80028dc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d021      	beq.n	800293c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002900:	b29b      	uxth	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	3302      	adds	r3, #2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002920:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002922:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002924:	2b00      	cmp	r3, #0
 8002926:	d02a      	beq.n	800297e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	6959      	ldr	r1, [r3, #20]
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	891a      	ldrh	r2, [r3, #8]
 8002934:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002936:	f004 f9e0 	bl	8006cfa <USB_ReadPMA>
 800293a:	e020      	b.n	800297e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	3306      	adds	r3, #6
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002964:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002966:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	6959      	ldr	r1, [r3, #20]
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	895a      	ldrh	r2, [r3, #10]
 8002978:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800297a:	f004 f9be 	bl	8006cfa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	69da      	ldr	r2, [r3, #28]
 8002982:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002984:	441a      	add	r2, r3
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	695a      	ldr	r2, [r3, #20]
 800298e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002990:	441a      	add	r2, r3
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <PCD_EP_ISR_Handler+0x4c2>
 800299e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d206      	bcs.n	80029b6 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f005 fe76 	bl	80086a0 <HAL_PCD_DataOutStageCallback>
 80029b4:	e005      	b.n	80029c2 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 f9e1 	bl	8004d84 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d07e      	beq.n	8002aca <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80029cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	843b      	strh	r3, [r7, #32]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	8c3b      	ldrh	r3, [r7, #32]
 8002a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	78db      	ldrb	r3, [r3, #3]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d00c      	beq.n	8002a3a <PCD_EP_ISR_Handler+0x554>
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	78db      	ldrb	r3, [r3, #3]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d146      	bne.n	8002abe <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002a30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d141      	bne.n	8002abe <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	461a      	mov	r2, r3
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3302      	adds	r3, #2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a62:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	8bfb      	ldrh	r3, [r7, #30]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d906      	bls.n	8002a7c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	699a      	ldr	r2, [r3, #24]
 8002a72:	8bfb      	ldrh	r3, [r7, #30]
 8002a74:	1ad2      	subs	r2, r2, r3
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	619a      	str	r2, [r3, #24]
 8002a7a:	e002      	b.n	8002a82 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	2200      	movs	r2, #0
 8002a80:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d106      	bne.n	8002a98 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f005 fe20 	bl	80086d6 <HAL_PCD_DataInStageCallback>
 8002a96:	e018      	b.n	8002aca <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	8bfb      	ldrh	r3, [r7, #30]
 8002a9e:	441a      	add	r2, r3
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	69da      	ldr	r2, [r3, #28]
 8002aa8:	8bfb      	ldrh	r3, [r7, #30]
 8002aaa:	441a      	add	r2, r3
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 f964 	bl	8004d84 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002abc:	e005      	b.n	8002aca <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002abe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f91b 	bl	8002d00 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	b21b      	sxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f6ff ad0a 	blt.w	80024f0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3738      	adds	r7, #56	; 0x38
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b088      	sub	sp, #32
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	4613      	mov	r3, r2
 8002af2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d07e      	beq.n	8002bfc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4413      	add	r3, r2
 8002b12:	3302      	adds	r3, #2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	6812      	ldr	r2, [r2, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b26:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	699a      	ldr	r2, [r3, #24]
 8002b2c:	8b7b      	ldrh	r3, [r7, #26]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d306      	bcc.n	8002b40 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	8b7b      	ldrh	r3, [r7, #26]
 8002b38:	1ad2      	subs	r2, r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	619a      	str	r2, [r3, #24]
 8002b3e:	e002      	b.n	8002b46 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2200      	movs	r2, #0
 8002b44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d123      	bne.n	8002b96 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b68:	833b      	strh	r3, [r7, #24]
 8002b6a:	8b3b      	ldrh	r3, [r7, #24]
 8002b6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b70:	833b      	strh	r3, [r7, #24]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	441a      	add	r2, r3
 8002b80:	8b3b      	ldrh	r3, [r7, #24]
 8002b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01f      	beq.n	8002be0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bba:	82fb      	strh	r3, [r7, #22]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	441a      	add	r2, r3
 8002bca:	8afb      	ldrh	r3, [r7, #22]
 8002bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002be0:	8b7b      	ldrh	r3, [r7, #26]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8087 	beq.w	8002cf6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	6959      	ldr	r1, [r3, #20]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	891a      	ldrh	r2, [r3, #8]
 8002bf4:	8b7b      	ldrh	r3, [r7, #26]
 8002bf6:	f004 f880 	bl	8006cfa <USB_ReadPMA>
 8002bfa:	e07c      	b.n	8002cf6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3306      	adds	r3, #6
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c24:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	8b7b      	ldrh	r3, [r7, #26]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d306      	bcc.n	8002c3e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	8b7b      	ldrh	r3, [r7, #26]
 8002c36:	1ad2      	subs	r2, r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	619a      	str	r2, [r3, #24]
 8002c3c:	e002      	b.n	8002c44 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d123      	bne.n	8002c94 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c66:	83fb      	strh	r3, [r7, #30]
 8002c68:	8bfb      	ldrh	r3, [r7, #30]
 8002c6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c6e:	83fb      	strh	r3, [r7, #30]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	441a      	add	r2, r3
 8002c7e:	8bfb      	ldrh	r3, [r7, #30]
 8002c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11f      	bne.n	8002cde <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb8:	83bb      	strh	r3, [r7, #28]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	441a      	add	r2, r3
 8002cc8:	8bbb      	ldrh	r3, [r7, #28]
 8002cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cde:	8b7b      	ldrh	r3, [r7, #26]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6959      	ldr	r1, [r3, #20]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	895a      	ldrh	r2, [r3, #10]
 8002cf0:	8b7b      	ldrh	r3, [r7, #26]
 8002cf2:	f004 f802 	bl	8006cfa <USB_ReadPMA>
    }
  }

  return count;
 8002cf6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b0a2      	sub	sp, #136	; 0x88
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 81c7 	beq.w	80030a8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3302      	adds	r3, #2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d907      	bls.n	8002d62 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d5a:	1ad2      	subs	r2, r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	619a      	str	r2, [r3, #24]
 8002d60:	e002      	b.n	8002d68 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2200      	movs	r2, #0
 8002d66:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f040 80b9 	bne.w	8002ee4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d126      	bne.n	8002dc8 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	4413      	add	r3, r2
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	011a      	lsls	r2, r3, #4
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	801a      	strh	r2, [r3, #0]
 8002dc6:	e01a      	b.n	8002dfe <HAL_PCD_EP_DB_Transmit+0xfe>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d116      	bne.n	8002dfe <HAL_PCD_EP_DB_Transmit+0xfe>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	461a      	mov	r2, r3
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	4413      	add	r3, r2
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	011a      	lsls	r2, r3, #4
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	4413      	add	r3, r2
 8002df2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	623b      	str	r3, [r7, #32]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	785b      	ldrb	r3, [r3, #1]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d126      	bne.n	8002e5a <HAL_PCD_EP_DB_Transmit+0x15a>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	4413      	add	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	011a      	lsls	r2, r3, #4
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	801a      	strh	r2, [r3, #0]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	801a      	strh	r2, [r3, #0]
 8002e58:	e017      	b.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	785b      	ldrb	r3, [r3, #1]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d113      	bne.n	8002e8a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	4413      	add	r3, r2
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	011a      	lsls	r2, r3, #4
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2200      	movs	r2, #0
 8002e88:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f005 fc20 	bl	80086d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 82d4 	beq.w	800344a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebc:	827b      	strh	r3, [r7, #18]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	441a      	add	r2, r3
 8002ecc:	8a7b      	ldrh	r3, [r7, #18]
 8002ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	8013      	strh	r3, [r2, #0]
 8002ee2:	e2b2      	b.n	800344a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d021      	beq.n	8002f32 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	441a      	add	r2, r3
 8002f1a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	f040 8286 	bne.w	800344a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f46:	441a      	add	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	69da      	ldr	r2, [r3, #28]
 8002f50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f54:	441a      	add	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	6a1a      	ldr	r2, [r3, #32]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d309      	bcc.n	8002f7a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f72:	1ad2      	subs	r2, r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	621a      	str	r2, [r3, #32]
 8002f78:	e015      	b.n	8002fa6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d107      	bne.n	8002f92 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002f82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f86:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f90:	e009      	b.n	8002fa6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	785b      	ldrb	r3, [r3, #1]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d155      	bne.n	800305a <HAL_PCD_EP_DB_Transmit+0x35a>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc2:	4413      	add	r3, r2
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	011a      	lsls	r2, r3, #4
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	4413      	add	r3, r2
 8002fd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d112      	bne.n	8003002 <HAL_PCD_EP_DB_Transmit+0x302>
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fea:	801a      	strh	r2, [r3, #0]
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffe:	801a      	strh	r2, [r3, #0]
 8003000:	e047      	b.n	8003092 <HAL_PCD_EP_DB_Transmit+0x392>
 8003002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003004:	2b3e      	cmp	r3, #62	; 0x3e
 8003006:	d811      	bhi.n	800302c <HAL_PCD_EP_DB_Transmit+0x32c>
 8003008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	64bb      	str	r3, [r7, #72]	; 0x48
 800300e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_PCD_EP_DB_Transmit+0x31e>
 8003018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800301a:	3301      	adds	r3, #1
 800301c:	64bb      	str	r3, [r7, #72]	; 0x48
 800301e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003020:	b29b      	uxth	r3, r3
 8003022:	029b      	lsls	r3, r3, #10
 8003024:	b29a      	uxth	r2, r3
 8003026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	e032      	b.n	8003092 <HAL_PCD_EP_DB_Transmit+0x392>
 800302c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	64bb      	str	r3, [r7, #72]	; 0x48
 8003032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <HAL_PCD_EP_DB_Transmit+0x342>
 800303c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800303e:	3b01      	subs	r3, #1
 8003040:	64bb      	str	r3, [r7, #72]	; 0x48
 8003042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003044:	b29b      	uxth	r3, r3
 8003046:	029b      	lsls	r3, r3, #10
 8003048:	b29b      	uxth	r3, r3
 800304a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800304e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003052:	b29a      	uxth	r2, r3
 8003054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003056:	801a      	strh	r2, [r3, #0]
 8003058:	e01b      	b.n	8003092 <HAL_PCD_EP_DB_Transmit+0x392>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d117      	bne.n	8003092 <HAL_PCD_EP_DB_Transmit+0x392>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	643b      	str	r3, [r7, #64]	; 0x40
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003070:	b29b      	uxth	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003076:	4413      	add	r3, r2
 8003078:	643b      	str	r3, [r7, #64]	; 0x40
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	011a      	lsls	r2, r3, #4
 8003080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003082:	4413      	add	r3, r2
 8003084:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800308a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308c:	b29a      	uxth	r2, r3
 800308e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003090:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	6959      	ldr	r1, [r3, #20]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	891a      	ldrh	r2, [r3, #8]
 800309e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	f003 fde5 	bl	8006c70 <USB_WritePMA>
 80030a6:	e1d0      	b.n	800344a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	3306      	adds	r3, #6
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	699a      	ldr	r2, [r3, #24]
 80030d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030dc:	429a      	cmp	r2, r3
 80030de:	d307      	bcc.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030e8:	1ad2      	subs	r2, r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	619a      	str	r2, [r3, #24]
 80030ee:	e002      	b.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 80c4 	bne.w	8003288 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	785b      	ldrb	r3, [r3, #1]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d126      	bne.n	8003156 <HAL_PCD_EP_DB_Transmit+0x456>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311c:	4413      	add	r3, r2
 800311e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	011a      	lsls	r2, r3, #4
 8003126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003128:	4413      	add	r3, r2
 800312a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800312e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800313a:	b29a      	uxth	r2, r3
 800313c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800313e:	801a      	strh	r2, [r3, #0]
 8003140:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800314a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800314e:	b29a      	uxth	r2, r3
 8003150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003152:	801a      	strh	r2, [r3, #0]
 8003154:	e01a      	b.n	800318c <HAL_PCD_EP_DB_Transmit+0x48c>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d116      	bne.n	800318c <HAL_PCD_EP_DB_Transmit+0x48c>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	677b      	str	r3, [r7, #116]	; 0x74
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316c:	b29b      	uxth	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003172:	4413      	add	r3, r2
 8003174:	677b      	str	r3, [r7, #116]	; 0x74
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	011a      	lsls	r2, r3, #4
 800317c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317e:	4413      	add	r3, r2
 8003180:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003184:	673b      	str	r3, [r7, #112]	; 0x70
 8003186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003188:	2200      	movs	r2, #0
 800318a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	67bb      	str	r3, [r7, #120]	; 0x78
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d12f      	bne.n	80031fa <HAL_PCD_EP_DB_Transmit+0x4fa>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031b2:	4413      	add	r3, r2
 80031b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	011a      	lsls	r2, r3, #4
 80031be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031c2:	4413      	add	r3, r2
 80031c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031d8:	b29a      	uxth	r2, r3
 80031da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031de:	801a      	strh	r2, [r3, #0]
 80031e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031f6:	801a      	strh	r2, [r3, #0]
 80031f8:	e017      	b.n	800322a <HAL_PCD_EP_DB_Transmit+0x52a>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	785b      	ldrb	r3, [r3, #1]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d113      	bne.n	800322a <HAL_PCD_EP_DB_Transmit+0x52a>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003210:	4413      	add	r3, r2
 8003212:	67bb      	str	r3, [r7, #120]	; 0x78
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	011a      	lsls	r2, r3, #4
 800321a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800321c:	4413      	add	r3, r2
 800321e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003222:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003226:	2200      	movs	r2, #0
 8003228:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	4619      	mov	r1, r3
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f005 fa50 	bl	80086d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 8104 	bne.w	800344a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	b29b      	uxth	r3, r3
 8003254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	441a      	add	r2, r3
 800326e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800327a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800327e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003282:	b29b      	uxth	r3, r3
 8003284:	8013      	strh	r3, [r2, #0]
 8003286:	e0e0      	b.n	800344a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d121      	bne.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032dc:	2b01      	cmp	r3, #1
 80032de:	f040 80b4 	bne.w	800344a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032ea:	441a      	add	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032f8:	441a      	add	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6a1a      	ldr	r2, [r3, #32]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	429a      	cmp	r2, r3
 8003308:	d309      	bcc.n	800331e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	6a1a      	ldr	r2, [r3, #32]
 8003314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003316:	1ad2      	subs	r2, r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	621a      	str	r2, [r3, #32]
 800331c:	e015      	b.n	800334a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d107      	bne.n	8003336 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003326:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800332a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003334:	e009      	b.n	800334a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2200      	movs	r2, #0
 8003340:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	667b      	str	r3, [r7, #100]	; 0x64
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	785b      	ldrb	r3, [r3, #1]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d155      	bne.n	8003404 <HAL_PCD_EP_DB_Transmit+0x704>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003366:	b29b      	uxth	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336c:	4413      	add	r3, r2
 800336e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	011a      	lsls	r2, r3, #4
 8003376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003378:	4413      	add	r3, r2
 800337a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800337e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003382:	2b00      	cmp	r3, #0
 8003384:	d112      	bne.n	80033ac <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003390:	b29a      	uxth	r2, r3
 8003392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003394:	801a      	strh	r2, [r3, #0]
 8003396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a8:	801a      	strh	r2, [r3, #0]
 80033aa:	e044      	b.n	8003436 <HAL_PCD_EP_DB_Transmit+0x736>
 80033ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ae:	2b3e      	cmp	r3, #62	; 0x3e
 80033b0:	d811      	bhi.n	80033d6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80033b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	657b      	str	r3, [r7, #84]	; 0x54
 80033b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80033c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c4:	3301      	adds	r3, #1
 80033c6:	657b      	str	r3, [r7, #84]	; 0x54
 80033c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	029b      	lsls	r3, r3, #10
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	e02f      	b.n	8003436 <HAL_PCD_EP_DB_Transmit+0x736>
 80033d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	657b      	str	r3, [r7, #84]	; 0x54
 80033dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d102      	bne.n	80033ec <HAL_PCD_EP_DB_Transmit+0x6ec>
 80033e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033e8:	3b01      	subs	r3, #1
 80033ea:	657b      	str	r3, [r7, #84]	; 0x54
 80033ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	029b      	lsls	r3, r3, #10
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	e018      	b.n	8003436 <HAL_PCD_EP_DB_Transmit+0x736>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d114      	bne.n	8003436 <HAL_PCD_EP_DB_Transmit+0x736>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003414:	b29b      	uxth	r3, r3
 8003416:	461a      	mov	r2, r3
 8003418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800341a:	4413      	add	r3, r2
 800341c:	667b      	str	r3, [r7, #100]	; 0x64
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	011a      	lsls	r2, r3, #4
 8003424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003426:	4413      	add	r3, r2
 8003428:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800342c:	663b      	str	r3, [r7, #96]	; 0x60
 800342e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003430:	b29a      	uxth	r2, r3
 8003432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003434:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6818      	ldr	r0, [r3, #0]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	6959      	ldr	r1, [r3, #20]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	895a      	ldrh	r2, [r3, #10]
 8003442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003444:	b29b      	uxth	r3, r3
 8003446:	f003 fc13 	bl	8006c70 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	b29b      	uxth	r3, r3
 800345c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003464:	823b      	strh	r3, [r7, #16]
 8003466:	8a3b      	ldrh	r3, [r7, #16]
 8003468:	f083 0310 	eor.w	r3, r3, #16
 800346c:	823b      	strh	r3, [r7, #16]
 800346e:	8a3b      	ldrh	r3, [r7, #16]
 8003470:	f083 0320 	eor.w	r3, r3, #32
 8003474:	823b      	strh	r3, [r7, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	441a      	add	r2, r3
 8003484:	8a3b      	ldrh	r3, [r7, #16]
 8003486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800348a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800348e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003496:	b29b      	uxth	r3, r3
 8003498:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3788      	adds	r7, #136	; 0x88
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	817b      	strh	r3, [r7, #10]
 80034b2:	4613      	mov	r3, r2
 80034b4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034b6:	897b      	ldrh	r3, [r7, #10]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c2:	897b      	ldrh	r3, [r7, #10]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	4613      	mov	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4413      	add	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	e009      	b.n	80034ee <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034da:	897a      	ldrh	r2, [r7, #10]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034ee:	893b      	ldrh	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d107      	bne.n	8003504 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	2200      	movs	r2, #0
 80034f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	80da      	strh	r2, [r3, #6]
 8003502:	e00b      	b.n	800351c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2201      	movs	r2, #1
 8003508:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	b29a      	uxth	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	b29a      	uxth	r2, r3
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e272      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8087 	beq.w	8003656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003548:	4b92      	ldr	r3, [pc, #584]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b04      	cmp	r3, #4
 8003552:	d00c      	beq.n	800356e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003554:	4b8f      	ldr	r3, [pc, #572]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d112      	bne.n	8003586 <HAL_RCC_OscConfig+0x5e>
 8003560:	4b8c      	ldr	r3, [pc, #560]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d10b      	bne.n	8003586 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356e:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d06c      	beq.n	8003654 <HAL_RCC_OscConfig+0x12c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d168      	bne.n	8003654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e24c      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x76>
 8003590:	4b80      	ldr	r3, [pc, #512]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a7f      	ldr	r2, [pc, #508]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	e02e      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x98>
 80035a6:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7a      	ldr	r2, [pc, #488]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b78      	ldr	r3, [pc, #480]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a77      	ldr	r2, [pc, #476]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e01d      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0xbc>
 80035ca:	4b72      	ldr	r3, [pc, #456]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a71      	ldr	r2, [pc, #452]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e00b      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 80035e4:	4b6b      	ldr	r3, [pc, #428]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a6a      	ldr	r2, [pc, #424]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b68      	ldr	r3, [pc, #416]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a67      	ldr	r2, [pc, #412]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fd fb58 	bl	8000cb8 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360c:	f7fd fb54 	bl	8000cb8 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	; 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e200      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0xe4>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fd fb44 	bl	8000cb8 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003634:	f7fd fb40 	bl	8000cb8 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e1ec      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x10c>
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d063      	beq.n	800372a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003662:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800366e:	4b49      	ldr	r3, [pc, #292]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b08      	cmp	r3, #8
 8003678:	d11c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x18c>
 800367a:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_RCC_OscConfig+0x176>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e1c0      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4939      	ldr	r1, [pc, #228]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b2:	e03a      	b.n	800372a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036bc:	4b36      	ldr	r3, [pc, #216]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fd faf9 	bl	8000cb8 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ca:	f7fd faf5 	bl	8000cb8 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e1a1      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4927      	ldr	r1, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]
 80036fc:	e015      	b.n	800372a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fd fad8 	bl	8000cb8 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370c:	f7fd fad4 	bl	8000cb8 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e180      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d03a      	beq.n	80037ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d019      	beq.n	8003772 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373e:	4b17      	ldr	r3, [pc, #92]	; (800379c <HAL_RCC_OscConfig+0x274>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003744:	f7fd fab8 	bl	8000cb8 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374c:	f7fd fab4 	bl	8000cb8 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e160      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800376a:	2001      	movs	r0, #1
 800376c:	f000 fad8 	bl	8003d20 <RCC_Delay>
 8003770:	e01c      	b.n	80037ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_RCC_OscConfig+0x274>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003778:	f7fd fa9e 	bl	8000cb8 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377e:	e00f      	b.n	80037a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003780:	f7fd fa9a 	bl	8000cb8 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d908      	bls.n	80037a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e146      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	42420000 	.word	0x42420000
 800379c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	4b92      	ldr	r3, [pc, #584]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e9      	bne.n	8003780 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a6 	beq.w	8003906 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037be:	4b8b      	ldr	r3, [pc, #556]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10d      	bne.n	80037e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	4b88      	ldr	r3, [pc, #544]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4a87      	ldr	r2, [pc, #540]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	61d3      	str	r3, [r2, #28]
 80037d6:	4b85      	ldr	r3, [pc, #532]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b82      	ldr	r3, [pc, #520]	; (80039f0 <HAL_RCC_OscConfig+0x4c8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d118      	bne.n	8003824 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f2:	4b7f      	ldr	r3, [pc, #508]	; (80039f0 <HAL_RCC_OscConfig+0x4c8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a7e      	ldr	r2, [pc, #504]	; (80039f0 <HAL_RCC_OscConfig+0x4c8>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fe:	f7fd fa5b 	bl	8000cb8 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003806:	f7fd fa57 	bl	8000cb8 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b64      	cmp	r3, #100	; 0x64
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e103      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	4b75      	ldr	r3, [pc, #468]	; (80039f0 <HAL_RCC_OscConfig+0x4c8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x312>
 800382c:	4b6f      	ldr	r3, [pc, #444]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4a6e      	ldr	r2, [pc, #440]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	e02d      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x334>
 8003842:	4b6a      	ldr	r3, [pc, #424]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4a69      	ldr	r2, [pc, #420]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	6213      	str	r3, [r2, #32]
 800384e:	4b67      	ldr	r3, [pc, #412]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4a66      	ldr	r2, [pc, #408]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	6213      	str	r3, [r2, #32]
 800385a:	e01c      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b05      	cmp	r3, #5
 8003862:	d10c      	bne.n	800387e <HAL_RCC_OscConfig+0x356>
 8003864:	4b61      	ldr	r3, [pc, #388]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a60      	ldr	r2, [pc, #384]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 800386a:	f043 0304 	orr.w	r3, r3, #4
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	4b5e      	ldr	r3, [pc, #376]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4a5d      	ldr	r2, [pc, #372]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6213      	str	r3, [r2, #32]
 800387c:	e00b      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800387e:	4b5b      	ldr	r3, [pc, #364]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4a5a      	ldr	r2, [pc, #360]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	6213      	str	r3, [r2, #32]
 800388a:	4b58      	ldr	r3, [pc, #352]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a57      	ldr	r2, [pc, #348]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003890:	f023 0304 	bic.w	r3, r3, #4
 8003894:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d015      	beq.n	80038ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389e:	f7fd fa0b 	bl	8000cb8 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fd fa07 	bl	8000cb8 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0b1      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	4b4b      	ldr	r3, [pc, #300]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ee      	beq.n	80038a6 <HAL_RCC_OscConfig+0x37e>
 80038c8:	e014      	b.n	80038f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ca:	f7fd f9f5 	bl	8000cb8 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fd f9f1 	bl	8000cb8 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e09b      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e8:	4b40      	ldr	r3, [pc, #256]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1ee      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d105      	bne.n	8003906 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fa:	4b3c      	ldr	r3, [pc, #240]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4a3b      	ldr	r2, [pc, #236]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003904:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8087 	beq.w	8003a1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003910:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 030c 	and.w	r3, r3, #12
 8003918:	2b08      	cmp	r3, #8
 800391a:	d061      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d146      	bne.n	80039b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003924:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7fd f9c5 	bl	8000cb8 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003932:	f7fd f9c1 	bl	8000cb8 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e06d      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003944:	4b29      	ldr	r3, [pc, #164]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d108      	bne.n	800396c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	4921      	ldr	r1, [pc, #132]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800396c:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a19      	ldr	r1, [r3, #32]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	430b      	orrs	r3, r1
 800397e:	491b      	ldr	r1, [pc, #108]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fd f995 	bl	8000cb8 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fd f991 	bl	8000cb8 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e03d      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x46a>
 80039b0:	e035      	b.n	8003a1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fd f97e 	bl	8000cb8 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fd f97a 	bl	8000cb8 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e026      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x498>
 80039de:	e01e      	b.n	8003a1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e019      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40007000 	.word	0x40007000
 80039f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_RCC_OscConfig+0x500>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000

08003a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0d0      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a40:	4b6a      	ldr	r3, [pc, #424]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d910      	bls.n	8003a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b67      	ldr	r3, [pc, #412]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 0207 	bic.w	r2, r3, #7
 8003a56:	4965      	ldr	r1, [pc, #404]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b63      	ldr	r3, [pc, #396]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0b8      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a88:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a58      	ldr	r2, [pc, #352]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4a52      	ldr	r2, [pc, #328]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003aaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aac:	4b50      	ldr	r3, [pc, #320]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	494d      	ldr	r1, [pc, #308]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d040      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d115      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aea:	4b41      	ldr	r3, [pc, #260]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e073      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afa:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e06b      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0a:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f023 0203 	bic.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4936      	ldr	r1, [pc, #216]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b1c:	f7fd f8cc 	bl	8000cb8 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b24:	f7fd f8c8 	bl	8000cb8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e053      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 020c 	and.w	r2, r3, #12
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d1eb      	bne.n	8003b24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b27      	ldr	r3, [pc, #156]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d210      	bcs.n	8003b7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 0207 	bic.w	r2, r3, #7
 8003b62:	4922      	ldr	r1, [pc, #136]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e032      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4916      	ldr	r1, [pc, #88]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	490e      	ldr	r1, [pc, #56]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bba:	f000 f821 	bl	8003c00 <HAL_RCC_GetSysClockFreq>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	490a      	ldr	r1, [pc, #40]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	5ccb      	ldrb	r3, [r1, r3]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8003bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_RCC_ClockConfig+0x1d0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd f82a 	bl	8000c34 <HAL_InitTick>

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40022000 	.word	0x40022000
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	08009c50 	.word	0x08009c50
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	20000004 	.word	0x20000004

08003c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c00:	b490      	push	{r4, r7}
 8003c02:	b08a      	sub	sp, #40	; 0x28
 8003c04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c06:	4b29      	ldr	r3, [pc, #164]	; (8003cac <HAL_RCC_GetSysClockFreq+0xac>)
 8003c08:	1d3c      	adds	r4, r7, #4
 8003c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c10:	f240 2301 	movw	r3, #513	; 0x201
 8003c14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c2a:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d002      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x40>
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCC_GetSysClockFreq+0x46>
 8003c3e:	e02b      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c42:	623b      	str	r3, [r7, #32]
      break;
 8003c44:	e02b      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	0c9b      	lsrs	r3, r3, #18
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	3328      	adds	r3, #40	; 0x28
 8003c50:	443b      	add	r3, r7
 8003c52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d012      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c62:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	0c5b      	lsrs	r3, r3, #17
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	3328      	adds	r3, #40	; 0x28
 8003c6e:	443b      	add	r3, r7
 8003c70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	4a0e      	ldr	r2, [pc, #56]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c7a:	fb03 f202 	mul.w	r2, r3, r2
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
 8003c86:	e004      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	623b      	str	r3, [r7, #32]
      break;
 8003c96:	e002      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c9a:	623b      	str	r3, [r7, #32]
      break;
 8003c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3728      	adds	r7, #40	; 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc90      	pop	{r4, r7}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	08009ba8 	.word	0x08009ba8
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	007a1200 	.word	0x007a1200
 8003cb8:	003d0900 	.word	0x003d0900

08003cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc0:	4b02      	ldr	r3, [pc, #8]	; (8003ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	20000000 	.word	0x20000000

08003cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd4:	f7ff fff2 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	08009c60 	.word	0x08009c60

08003cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cfc:	f7ff ffde 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	0adb      	lsrs	r3, r3, #11
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4903      	ldr	r1, [pc, #12]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	08009c60 	.word	0x08009c60

08003d20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <RCC_Delay+0x34>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <RCC_Delay+0x38>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	0a5b      	lsrs	r3, r3, #9
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d3c:	bf00      	nop
  }
  while (Delay --);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1e5a      	subs	r2, r3, #1
 8003d42:	60fa      	str	r2, [r7, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f9      	bne.n	8003d3c <RCC_Delay+0x1c>
}
 8003d48:	bf00      	nop
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr
 8003d54:	20000000 	.word	0x20000000
 8003d58:	10624dd3 	.word	0x10624dd3

08003d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d07d      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7c:	4b4f      	ldr	r3, [pc, #316]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10d      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d88:	4b4c      	ldr	r3, [pc, #304]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	4a4b      	ldr	r2, [pc, #300]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d92:	61d3      	str	r3, [r2, #28]
 8003d94:	4b49      	ldr	r3, [pc, #292]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da0:	2301      	movs	r3, #1
 8003da2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d118      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db0:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a42      	ldr	r2, [pc, #264]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbc:	f7fc ff7c 	bl	8000cb8 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc4:	f7fc ff78 	bl	8000cb8 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e06d      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd6:	4b3a      	ldr	r3, [pc, #232]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de2:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d02e      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d027      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e00:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e10:	4b2c      	ldr	r3, [pc, #176]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e16:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d014      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fc ff47 	bl	8000cb8 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2c:	e00a      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2e:	f7fc ff43 	bl	8000cb8 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e036      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e44:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ee      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4917      	ldr	r1, [pc, #92]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d105      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e68:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e80:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	490b      	ldr	r1, [pc, #44]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	4904      	ldr	r1, [pc, #16]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40007000 	.word	0x40007000
 8003ec4:	42420440 	.word	0x42420440

08003ec8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b08d      	sub	sp, #52	; 0x34
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ed0:	4b58      	ldr	r3, [pc, #352]	; (8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003ed2:	f107 040c 	add.w	r4, r7, #12
 8003ed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ed8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003edc:	f240 2301 	movw	r3, #513	; 0x201
 8003ee0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eea:	2300      	movs	r3, #0
 8003eec:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b10      	cmp	r3, #16
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b10      	cmp	r3, #16
 8003f00:	f200 808e 	bhi.w	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d049      	beq.n	8003f9e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d079      	beq.n	8004004 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003f10:	e086      	b.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003f12:	4b49      	ldr	r3, [pc, #292]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003f18:	4b47      	ldr	r3, [pc, #284]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d07f      	beq.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	0c9b      	lsrs	r3, r3, #18
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	3330      	adds	r3, #48	; 0x30
 8003f2e:	443b      	add	r3, r7
 8003f30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f34:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d017      	beq.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f40:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0c5b      	lsrs	r3, r3, #17
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	3330      	adds	r3, #48	; 0x30
 8003f4c:	443b      	add	r3, r7
 8003f4e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f5e:	4a37      	ldr	r2, [pc, #220]	; (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6e:	e004      	b.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	4a33      	ldr	r2, [pc, #204]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f86:	d102      	bne.n	8003f8e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f8c:	e04a      	b.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	4a2c      	ldr	r2, [pc, #176]	; (8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f9c:	e042      	b.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003f9e:	4b26      	ldr	r3, [pc, #152]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fae:	d108      	bne.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fc0:	e01f      	b.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fcc:	d109      	bne.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003fce:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003fda:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe0:	e00f      	b.n	8004002 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fec:	d11c      	bne.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003fee:	4b12      	ldr	r3, [pc, #72]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003ffa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004000:	e012      	b.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004002:	e011      	b.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004004:	f7ff fe78 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	0b9b      	lsrs	r3, r3, #14
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	3301      	adds	r3, #1
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800401e:	e004      	b.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004020:	bf00      	nop
 8004022:	e002      	b.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004024:	bf00      	nop
 8004026:	e000      	b.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004028:	bf00      	nop
    }
  }
  return (frequency);
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800402c:	4618      	mov	r0, r3
 800402e:	3734      	adds	r7, #52	; 0x34
 8004030:	46bd      	mov	sp, r7
 8004032:	bd90      	pop	{r4, r7, pc}
 8004034:	08009bb8 	.word	0x08009bb8
 8004038:	40021000 	.word	0x40021000
 800403c:	007a1200 	.word	0x007a1200
 8004040:	003d0900 	.word	0x003d0900
 8004044:	aaaaaaab 	.word	0xaaaaaaab

08004048 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e03f      	b.n	80040da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc fc80 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2224      	movs	r2, #36	; 0x24
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800408a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f829 	bl	80040e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695a      	ldr	r2, [r3, #20]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800411e:	f023 030c 	bic.w	r3, r3, #12
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	430b      	orrs	r3, r1
 800412a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2c      	ldr	r2, [pc, #176]	; (80041f8 <UART_SetConfig+0x114>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d103      	bne.n	8004154 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800414c:	f7ff fdd4 	bl	8003cf8 <HAL_RCC_GetPCLK2Freq>
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	e002      	b.n	800415a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004154:	f7ff fdbc 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8004158:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	009a      	lsls	r2, r3, #2
 8004164:	441a      	add	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	4a22      	ldr	r2, [pc, #136]	; (80041fc <UART_SetConfig+0x118>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	0119      	lsls	r1, r3, #4
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	009a      	lsls	r2, r3, #2
 8004184:	441a      	add	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004190:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <UART_SetConfig+0x118>)
 8004192:	fba3 0302 	umull	r0, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	2064      	movs	r0, #100	; 0x64
 800419a:	fb00 f303 	mul.w	r3, r0, r3
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	3332      	adds	r3, #50	; 0x32
 80041a4:	4a15      	ldr	r2, [pc, #84]	; (80041fc <UART_SetConfig+0x118>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b0:	4419      	add	r1, r3
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	009a      	lsls	r2, r3, #2
 80041bc:	441a      	add	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <UART_SetConfig+0x118>)
 80041ca:	fba3 0302 	umull	r0, r3, r3, r2
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2064      	movs	r0, #100	; 0x64
 80041d2:	fb00 f303 	mul.w	r3, r0, r3
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	3332      	adds	r3, #50	; 0x32
 80041dc:	4a07      	ldr	r2, [pc, #28]	; (80041fc <UART_SetConfig+0x118>)
 80041de:	fba2 2303 	umull	r2, r3, r2, r3
 80041e2:	095b      	lsrs	r3, r3, #5
 80041e4:	f003 020f 	and.w	r2, r3, #15
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	440a      	add	r2, r1
 80041ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40013800 	.word	0x40013800
 80041fc:	51eb851f 	.word	0x51eb851f

08004200 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004200:	b084      	sub	sp, #16
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	f107 0014 	add.w	r0, r7, #20
 800420e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	b004      	add	sp, #16
 800421e:	4770      	bx	lr

08004220 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004230:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004234:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004254:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004258:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	b29b      	uxth	r3, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	b29b      	uxth	r3, r3
 800426a:	4013      	ands	r3, r2
 800426c:	b29a      	uxth	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr

08004298 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004298:	b084      	sub	sp, #16
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	f107 0014 	add.w	r0, r7, #20
 80042a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	b004      	add	sp, #16
 80042d6:	4770      	bx	lr

080042d8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80042d8:	b480      	push	{r7}
 80042da:	b09b      	sub	sp, #108	; 0x6c
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80042fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	78db      	ldrb	r3, [r3, #3]
 8004306:	2b03      	cmp	r3, #3
 8004308:	d81f      	bhi.n	800434a <USB_ActivateEndpoint+0x72>
 800430a:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <USB_ActivateEndpoint+0x38>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004321 	.word	0x08004321
 8004314:	0800433d 	.word	0x0800433d
 8004318:	08004353 	.word	0x08004353
 800431c:	0800432f 	.word	0x0800432f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004320:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004328:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800432c:	e012      	b.n	8004354 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800432e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004332:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004336:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800433a:	e00b      	b.n	8004354 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800433c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004344:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004348:	e004      	b.n	8004354 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004350:	e000      	b.n	8004354 <USB_ActivateEndpoint+0x7c>
      break;
 8004352:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	441a      	add	r2, r3
 800435e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004372:	b29b      	uxth	r3, r3
 8004374:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438c:	b29a      	uxth	r2, r3
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	4313      	orrs	r3, r2
 8004396:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	441a      	add	r2, r3
 80043a4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	7b1b      	ldrb	r3, [r3, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f040 8149 	bne.w	8004658 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8084 	beq.w	80044d8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043da:	b29b      	uxth	r3, r3
 80043dc:	461a      	mov	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	4413      	add	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	011a      	lsls	r2, r3, #4
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	88db      	ldrh	r3, [r3, #6]
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	81fb      	strh	r3, [r7, #14]
 8004412:	89fb      	ldrh	r3, [r7, #14]
 8004414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01b      	beq.n	8004454 <USB_ActivateEndpoint+0x17c>
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	b29b      	uxth	r3, r3
 800442a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	81bb      	strh	r3, [r7, #12]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	441a      	add	r2, r3
 800443e:	89bb      	ldrh	r3, [r7, #12]
 8004440:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004444:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800444c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004450:	b29b      	uxth	r3, r3
 8004452:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	78db      	ldrb	r3, [r3, #3]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d020      	beq.n	800449e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004472:	813b      	strh	r3, [r7, #8]
 8004474:	893b      	ldrh	r3, [r7, #8]
 8004476:	f083 0320 	eor.w	r3, r3, #32
 800447a:	813b      	strh	r3, [r7, #8]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	441a      	add	r2, r3
 8004486:	893b      	ldrh	r3, [r7, #8]
 8004488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800448c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004498:	b29b      	uxth	r3, r3
 800449a:	8013      	strh	r3, [r2, #0]
 800449c:	e27f      	b.n	800499e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	4413      	add	r3, r2
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b4:	817b      	strh	r3, [r7, #10]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	441a      	add	r2, r3
 80044c0:	897b      	ldrh	r3, [r7, #10]
 80044c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	8013      	strh	r3, [r2, #0]
 80044d6:	e262      	b.n	800499e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	4413      	add	r3, r2
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	011a      	lsls	r2, r3, #4
 80044f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	88db      	ldrh	r3, [r3, #6]
 8004500:	085b      	lsrs	r3, r3, #1
 8004502:	b29b      	uxth	r3, r3
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004516:	b29b      	uxth	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	4413      	add	r3, r2
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	011a      	lsls	r2, r3, #4
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	4413      	add	r3, r2
 800452a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800452e:	623b      	str	r3, [r7, #32]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d112      	bne.n	800455e <USB_ActivateEndpoint+0x286>
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004542:	b29a      	uxth	r2, r3
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	801a      	strh	r2, [r3, #0]
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004556:	b29a      	uxth	r2, r3
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	801a      	strh	r2, [r3, #0]
 800455c:	e02f      	b.n	80045be <USB_ActivateEndpoint+0x2e6>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b3e      	cmp	r3, #62	; 0x3e
 8004564:	d813      	bhi.n	800458e <USB_ActivateEndpoint+0x2b6>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	085b      	lsrs	r3, r3, #1
 800456c:	663b      	str	r3, [r7, #96]	; 0x60
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <USB_ActivateEndpoint+0x2a8>
 800457a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800457c:	3301      	adds	r3, #1
 800457e:	663b      	str	r3, [r7, #96]	; 0x60
 8004580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004582:	b29b      	uxth	r3, r3
 8004584:	029b      	lsls	r3, r3, #10
 8004586:	b29a      	uxth	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	801a      	strh	r2, [r3, #0]
 800458c:	e017      	b.n	80045be <USB_ActivateEndpoint+0x2e6>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	663b      	str	r3, [r7, #96]	; 0x60
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <USB_ActivateEndpoint+0x2d0>
 80045a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045a4:	3b01      	subs	r3, #1
 80045a6:	663b      	str	r3, [r7, #96]	; 0x60
 80045a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	029b      	lsls	r3, r3, #10
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	83fb      	strh	r3, [r7, #30]
 80045cc:	8bfb      	ldrh	r3, [r7, #30]
 80045ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01b      	beq.n	800460e <USB_ActivateEndpoint+0x336>
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ec:	83bb      	strh	r3, [r7, #28]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	8bbb      	ldrh	r3, [r7, #28]
 80045fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460a:	b29b      	uxth	r3, r3
 800460c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	837b      	strh	r3, [r7, #26]
 8004626:	8b7b      	ldrh	r3, [r7, #26]
 8004628:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800462c:	837b      	strh	r3, [r7, #26]
 800462e:	8b7b      	ldrh	r3, [r7, #26]
 8004630:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004634:	837b      	strh	r3, [r7, #26]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	441a      	add	r2, r3
 8004640:	8b7b      	ldrh	r3, [r7, #26]
 8004642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004652:	b29b      	uxth	r3, r3
 8004654:	8013      	strh	r3, [r2, #0]
 8004656:	e1a2      	b.n	800499e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	441a      	add	r2, r3
 800467c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004680:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004684:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004688:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800468c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004690:	b29b      	uxth	r3, r3
 8004692:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	65bb      	str	r3, [r7, #88]	; 0x58
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a4:	4413      	add	r3, r2
 80046a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	011a      	lsls	r2, r3, #4
 80046ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046b6:	657b      	str	r3, [r7, #84]	; 0x54
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	891b      	ldrh	r3, [r3, #8]
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	b29b      	uxth	r3, r3
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	653b      	str	r3, [r7, #80]	; 0x50
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d8:	4413      	add	r3, r2
 80046da:	653b      	str	r3, [r7, #80]	; 0x50
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	011a      	lsls	r2, r3, #4
 80046e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80046ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	895b      	ldrh	r3, [r3, #10]
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	785b      	ldrb	r3, [r3, #1]
 8004700:	2b00      	cmp	r3, #0
 8004702:	f040 8091 	bne.w	8004828 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004714:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01b      	beq.n	8004756 <USB_ActivateEndpoint+0x47e>
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	441a      	add	r2, r3
 8004740:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800474e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004752:	b29b      	uxth	r3, r3
 8004754:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	873b      	strh	r3, [r7, #56]	; 0x38
 8004764:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01b      	beq.n	80047a6 <USB_ActivateEndpoint+0x4ce>
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004784:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	441a      	add	r2, r3
 8004790:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800479a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80047c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80047cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80047da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004804:	867b      	strh	r3, [r7, #50]	; 0x32
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	441a      	add	r2, r3
 8004810:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800481a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004822:	b29b      	uxth	r3, r3
 8004824:	8013      	strh	r3, [r2, #0]
 8004826:	e0ba      	b.n	800499e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800483c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01d      	beq.n	8004880 <USB_ActivateEndpoint+0x5a8>
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b29b      	uxth	r3, r3
 8004852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800486c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004890:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01d      	beq.n	80048d8 <USB_ActivateEndpoint+0x600>
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	441a      	add	r2, r3
 80048c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80048c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	78db      	ldrb	r3, [r3, #3]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d024      	beq.n	800492a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80048fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048fe:	f083 0320 	eor.w	r3, r3, #32
 8004902:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	441a      	add	r2, r3
 8004910:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800491c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004924:	b29b      	uxth	r3, r3
 8004926:	8013      	strh	r3, [r2, #0]
 8004928:	e01d      	b.n	8004966 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	b29b      	uxth	r3, r3
 8004938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800493c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004940:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	441a      	add	r2, r3
 800494e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800495e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004962:	b29b      	uxth	r3, r3
 8004964:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	441a      	add	r2, r3
 8004988:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800498a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499a:	b29b      	uxth	r3, r3
 800499c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800499e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	376c      	adds	r7, #108	; 0x6c
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr

080049ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b08d      	sub	sp, #52	; 0x34
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	7b1b      	ldrb	r3, [r3, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f040 808e 	bne.w	8004adc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	785b      	ldrb	r3, [r3, #1]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d044      	beq.n	8004a52 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	81bb      	strh	r3, [r7, #12]
 80049d6:	89bb      	ldrh	r3, [r7, #12]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01b      	beq.n	8004a18 <USB_DeactivateEndpoint+0x6c>
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	817b      	strh	r3, [r7, #10]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	441a      	add	r2, r3
 8004a02:	897b      	ldrh	r3, [r7, #10]
 8004a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a2e:	813b      	strh	r3, [r7, #8]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	893b      	ldrh	r3, [r7, #8]
 8004a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8013      	strh	r3, [r2, #0]
 8004a50:	e192      	b.n	8004d78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	827b      	strh	r3, [r7, #18]
 8004a60:	8a7b      	ldrh	r3, [r7, #18]
 8004a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01b      	beq.n	8004aa2 <USB_DeactivateEndpoint+0xf6>
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a80:	823b      	strh	r3, [r7, #16]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	8a3b      	ldrh	r3, [r7, #16]
 8004a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab8:	81fb      	strh	r3, [r7, #14]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	89fb      	ldrh	r3, [r7, #14]
 8004ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	8013      	strh	r3, [r2, #0]
 8004ada:	e14d      	b.n	8004d78 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	785b      	ldrb	r3, [r3, #1]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f040 80a5 	bne.w	8004c30 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	843b      	strh	r3, [r7, #32]
 8004af4:	8c3b      	ldrh	r3, [r7, #32]
 8004af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01b      	beq.n	8004b36 <USB_DeactivateEndpoint+0x18a>
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b14:	83fb      	strh	r3, [r7, #30]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	8bfb      	ldrh	r3, [r7, #30]
 8004b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	83bb      	strh	r3, [r7, #28]
 8004b44:	8bbb      	ldrh	r3, [r7, #28]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01b      	beq.n	8004b86 <USB_DeactivateEndpoint+0x1da>
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b64:	837b      	strh	r3, [r7, #26]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	8b7b      	ldrh	r3, [r7, #26]
 8004b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	833b      	strh	r3, [r7, #24]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	8b3b      	ldrh	r3, [r7, #24]
 8004baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd4:	82fb      	strh	r3, [r7, #22]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	441a      	add	r2, r3
 8004be0:	8afb      	ldrh	r3, [r7, #22]
 8004be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c0c:	82bb      	strh	r3, [r7, #20]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	441a      	add	r2, r3
 8004c18:	8abb      	ldrh	r3, [r7, #20]
 8004c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	8013      	strh	r3, [r2, #0]
 8004c2e:	e0a3      	b.n	8004d78 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004c3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01b      	beq.n	8004c80 <USB_DeactivateEndpoint+0x2d4>
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	441a      	add	r2, r3
 8004c6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004c8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01b      	beq.n	8004cd0 <USB_DeactivateEndpoint+0x324>
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cae:	853b      	strh	r3, [r7, #40]	; 0x28
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	441a      	add	r2, r3
 8004cba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	441a      	add	r2, r3
 8004cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	441a      	add	r2, r3
 8004d2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d56:	847b      	strh	r3, [r7, #34]	; 0x22
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3734      	adds	r7, #52	; 0x34
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b0cc      	sub	sp, #304	; 0x130
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d92:	6018      	str	r0, [r3, #0]
 8004d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d9c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	f041 817d 	bne.w	80060aa <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699a      	ldr	r2, [r3, #24]
 8004dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d908      	bls.n	8004dde <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004ddc:	e007      	b.n	8004dee <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	7b1b      	ldrb	r3, [r3, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d152      	bne.n	8004ea4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6959      	ldr	r1, [r3, #20]
 8004e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	88da      	ldrh	r2, [r3, #6]
 8004e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e20:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e24:	6800      	ldr	r0, [r0, #0]
 8004e26:	f001 ff23 	bl	8006c70 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e36:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	4619      	mov	r1, r3
 8004e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e54:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e5c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	440a      	add	r2, r1
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	011a      	lsls	r2, r3, #4
 8004e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e78:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e98:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	f001 b8b5 	b.w	800600e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	78db      	ldrb	r3, [r3, #3]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	f040 84c6 	bne.w	8005842 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6a1a      	ldr	r2, [r3, #32]
 8004ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	f240 8443 	bls.w	800575a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4413      	add	r3, r2
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	441a      	add	r2, r3
 8004f18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6a1a      	ldr	r2, [r3, #32]
 8004f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f40:	1ad2      	subs	r2, r2, r3
 8004f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 823e 	beq.w	80053f2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f82:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	785b      	ldrb	r3, [r3, #1]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 809a 	bne.w	80050d0 <USB_EPStartXfer+0x34c>
 8004f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fa8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fce:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	011a      	lsls	r2, r3, #4
 8004fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d122      	bne.n	800504e <USB_EPStartXfer+0x2ca>
 8005008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b29b      	uxth	r3, r3
 8005016:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800501a:	b29a      	uxth	r2, r3
 800501c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005020:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800503a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503e:	b29a      	uxth	r2, r3
 8005040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005044:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	801a      	strh	r2, [r3, #0]
 800504c:	e079      	b.n	8005142 <USB_EPStartXfer+0x3be>
 800504e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005052:	2b3e      	cmp	r3, #62	; 0x3e
 8005054:	d81b      	bhi.n	800508e <USB_EPStartXfer+0x30a>
 8005056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <USB_EPStartXfer+0x2f2>
 800506c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005070:	3301      	adds	r3, #1
 8005072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005076:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800507a:	b29b      	uxth	r3, r3
 800507c:	029b      	lsls	r3, r3, #10
 800507e:	b29a      	uxth	r2, r3
 8005080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005084:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	801a      	strh	r2, [r3, #0]
 800508c:	e059      	b.n	8005142 <USB_EPStartXfer+0x3be>
 800508e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <USB_EPStartXfer+0x32a>
 80050a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050a8:	3b01      	subs	r3, #1
 80050aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80050ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	029b      	lsls	r3, r3, #10
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	801a      	strh	r2, [r3, #0]
 80050ce:	e038      	b.n	8005142 <USB_EPStartXfer+0x3be>
 80050d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d130      	bne.n	8005142 <USB_EPStartXfer+0x3be>
 80050e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	4619      	mov	r1, r3
 80050f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80050fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050fe:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005102:	6812      	ldr	r2, [r2, #0]
 8005104:	440a      	add	r2, r1
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800510c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	011a      	lsls	r2, r3, #4
 8005116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800511a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4413      	add	r3, r2
 8005122:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005134:	b29a      	uxth	r2, r3
 8005136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005146:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	895b      	ldrh	r3, [r3, #10]
 800514e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6959      	ldr	r1, [r3, #20]
 800515e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005162:	b29b      	uxth	r3, r3
 8005164:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005168:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800516c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005170:	6800      	ldr	r0, [r0, #0]
 8005172:	f001 fd7d 	bl	8006c70 <USB_WritePMA>
            ep->xfer_buff += len;
 8005176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695a      	ldr	r2, [r3, #20]
 8005182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005186:	441a      	add	r2, r3
 8005188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800518c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005198:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6a1a      	ldr	r2, [r3, #32]
 80051a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d90f      	bls.n	80051d0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80051b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c0:	1ad2      	subs	r2, r2, r3
 80051c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	621a      	str	r2, [r3, #32]
 80051ce:	e00e      	b.n	80051ee <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80051d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80051e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2200      	movs	r2, #0
 80051ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	785b      	ldrb	r3, [r3, #1]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 809a 	bne.w	8005334 <USB_EPStartXfer+0x5b0>
 8005200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005204:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005208:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800520c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005222:	b29b      	uxth	r3, r3
 8005224:	4619      	mov	r1, r3
 8005226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800522e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005232:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	440a      	add	r2, r1
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	011a      	lsls	r2, r3, #4
 800524a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4413      	add	r3, r2
 8005256:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800525a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d122      	bne.n	80052b2 <USB_EPStartXfer+0x52e>
 800526c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005270:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800527e:	b29a      	uxth	r2, r3
 8005280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005284:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005290:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	881b      	ldrh	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	801a      	strh	r2, [r3, #0]
 80052b0:	e083      	b.n	80053ba <USB_EPStartXfer+0x636>
 80052b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b6:	2b3e      	cmp	r3, #62	; 0x3e
 80052b8:	d81b      	bhi.n	80052f2 <USB_EPStartXfer+0x56e>
 80052ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052be:	085b      	lsrs	r3, r3, #1
 80052c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80052c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d004      	beq.n	80052da <USB_EPStartXfer+0x556>
 80052d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80052d4:	3301      	adds	r3, #1
 80052d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80052da:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80052de:	b29b      	uxth	r3, r3
 80052e0:	029b      	lsls	r3, r3, #10
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	801a      	strh	r2, [r3, #0]
 80052f0:	e063      	b.n	80053ba <USB_EPStartXfer+0x636>
 80052f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80052fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <USB_EPStartXfer+0x58e>
 8005308:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800530c:	3b01      	subs	r3, #1
 800530e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005312:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005316:	b29b      	uxth	r3, r3
 8005318:	029b      	lsls	r3, r3, #10
 800531a:	b29b      	uxth	r3, r3
 800531c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005324:	b29a      	uxth	r2, r3
 8005326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e042      	b.n	80053ba <USB_EPStartXfer+0x636>
 8005334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	785b      	ldrb	r3, [r3, #1]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d13a      	bne.n	80053ba <USB_EPStartXfer+0x636>
 8005344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005348:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800534c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005350:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005366:	b29b      	uxth	r3, r3
 8005368:	4619      	mov	r1, r3
 800536a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005372:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005376:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	440a      	add	r2, r1
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	011a      	lsls	r2, r3, #4
 800538e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005392:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4413      	add	r3, r2
 800539a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800539e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	891b      	ldrh	r3, [r3, #8]
 80053c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6959      	ldr	r1, [r3, #20]
 80053d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053da:	b29b      	uxth	r3, r3
 80053dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80053e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053e8:	6800      	ldr	r0, [r0, #0]
 80053ea:	f001 fc41 	bl	8006c70 <USB_WritePMA>
 80053ee:	f000 be0e 	b.w	800600e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80053f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d16d      	bne.n	80054de <USB_EPStartXfer+0x75a>
 8005402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005406:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	64bb      	str	r3, [r7, #72]	; 0x48
 800540e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005412:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800541c:	b29b      	uxth	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005422:	4413      	add	r3, r2
 8005424:	64bb      	str	r3, [r7, #72]	; 0x48
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	011a      	lsls	r2, r3, #4
 8005434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005436:	4413      	add	r3, r2
 8005438:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800543c:	647b      	str	r3, [r7, #68]	; 0x44
 800543e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d112      	bne.n	800546c <USB_EPStartXfer+0x6e8>
 8005446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005450:	b29a      	uxth	r2, r3
 8005452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005454:	801a      	strh	r2, [r3, #0]
 8005456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005464:	b29a      	uxth	r2, r3
 8005466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	e063      	b.n	8005534 <USB_EPStartXfer+0x7b0>
 800546c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005470:	2b3e      	cmp	r3, #62	; 0x3e
 8005472:	d817      	bhi.n	80054a4 <USB_EPStartXfer+0x720>
 8005474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800547e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <USB_EPStartXfer+0x710>
 800548a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800548e:	3301      	adds	r3, #1
 8005490:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005494:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005498:	b29b      	uxth	r3, r3
 800549a:	029b      	lsls	r3, r3, #10
 800549c:	b29a      	uxth	r2, r3
 800549e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	e047      	b.n	8005534 <USB_EPStartXfer+0x7b0>
 80054a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <USB_EPStartXfer+0x740>
 80054ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054be:	3b01      	subs	r3, #1
 80054c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80054c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	029b      	lsls	r3, r3, #10
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054da:	801a      	strh	r2, [r3, #0]
 80054dc:	e02a      	b.n	8005534 <USB_EPStartXfer+0x7b0>
 80054de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	785b      	ldrb	r3, [r3, #1]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d122      	bne.n	8005534 <USB_EPStartXfer+0x7b0>
 80054ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	653b      	str	r3, [r7, #80]	; 0x50
 80054fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005508:	b29b      	uxth	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550e:	4413      	add	r3, r2
 8005510:	653b      	str	r3, [r7, #80]	; 0x50
 8005512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	011a      	lsls	r2, r3, #4
 8005520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005522:	4413      	add	r3, r2
 8005524:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800552a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552e:	b29a      	uxth	r2, r3
 8005530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005532:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	891b      	ldrh	r3, [r3, #8]
 8005540:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6959      	ldr	r1, [r3, #20]
 8005550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005554:	b29b      	uxth	r3, r3
 8005556:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800555a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800555e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005562:	6800      	ldr	r0, [r0, #0]
 8005564:	f001 fb84 	bl	8006c70 <USB_WritePMA>
            ep->xfer_buff += len;
 8005568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005578:	441a      	add	r2, r3
 800557a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800557e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6a1a      	ldr	r2, [r3, #32]
 8005592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d90f      	bls.n	80055c2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80055a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6a1a      	ldr	r2, [r3, #32]
 80055ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	621a      	str	r2, [r3, #32]
 80055c0:	e00e      	b.n	80055e0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80055c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80055d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2200      	movs	r2, #0
 80055de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	643b      	str	r3, [r7, #64]	; 0x40
 80055ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d16d      	bne.n	80056d8 <USB_EPStartXfer+0x954>
 80055fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005600:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	63bb      	str	r3, [r7, #56]	; 0x38
 8005608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005616:	b29b      	uxth	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	4413      	add	r3, r2
 800561e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	011a      	lsls	r2, r3, #4
 800562e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005630:	4413      	add	r3, r2
 8005632:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005636:	637b      	str	r3, [r7, #52]	; 0x34
 8005638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563c:	2b00      	cmp	r3, #0
 800563e:	d112      	bne.n	8005666 <USB_EPStartXfer+0x8e2>
 8005640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800564a:	b29a      	uxth	r2, r3
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	801a      	strh	r2, [r3, #0]
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565e:	b29a      	uxth	r2, r3
 8005660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005662:	801a      	strh	r2, [r3, #0]
 8005664:	e05d      	b.n	8005722 <USB_EPStartXfer+0x99e>
 8005666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566a:	2b3e      	cmp	r3, #62	; 0x3e
 800566c:	d817      	bhi.n	800569e <USB_EPStartXfer+0x91a>
 800566e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <USB_EPStartXfer+0x90a>
 8005684:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005688:	3301      	adds	r3, #1
 800568a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800568e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005692:	b29b      	uxth	r3, r3
 8005694:	029b      	lsls	r3, r3, #10
 8005696:	b29a      	uxth	r2, r3
 8005698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	e041      	b.n	8005722 <USB_EPStartXfer+0x99e>
 800569e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80056a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <USB_EPStartXfer+0x93a>
 80056b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056b8:	3b01      	subs	r3, #1
 80056ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80056be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	e024      	b.n	8005722 <USB_EPStartXfer+0x99e>
 80056d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d11c      	bne.n	8005722 <USB_EPStartXfer+0x99e>
 80056e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056fc:	4413      	add	r3, r2
 80056fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	011a      	lsls	r2, r3, #4
 800570e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005710:	4413      	add	r3, r2
 8005712:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571c:	b29a      	uxth	r2, r3
 800571e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005720:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	895b      	ldrh	r3, [r3, #10]
 800572e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6959      	ldr	r1, [r3, #20]
 800573e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005742:	b29b      	uxth	r3, r3
 8005744:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005748:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800574c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005750:	6800      	ldr	r0, [r0, #0]
 8005752:	f001 fa8d 	bl	8006c70 <USB_WritePMA>
 8005756:	f000 bc5a 	b.w	800600e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800575a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800576a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005778:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	b29b      	uxth	r3, r3
 8005788:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800578c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005790:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	441a      	add	r2, r3
 80057ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80057b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e6:	4413      	add	r3, r2
 80057e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	011a      	lsls	r2, r3, #4
 80057f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057fa:	4413      	add	r3, r2
 80057fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005800:	65bb      	str	r3, [r7, #88]	; 0x58
 8005802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005806:	b29a      	uxth	r2, r3
 8005808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800580a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800580c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	891b      	ldrh	r3, [r3, #8]
 8005818:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800581c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6959      	ldr	r1, [r3, #20]
 8005828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582c:	b29b      	uxth	r3, r3
 800582e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005832:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005836:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800583a:	6800      	ldr	r0, [r0, #0]
 800583c:	f001 fa18 	bl	8006c70 <USB_WritePMA>
 8005840:	e3e5      	b.n	800600e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	881b      	ldrh	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005868:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800586c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800588a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005892:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589a:	b29b      	uxth	r3, r3
 800589c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800589e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6a1a      	ldr	r2, [r3, #32]
 80058aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ae:	1ad2      	subs	r2, r2, r3
 80058b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80058bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 81bc 	beq.w	8005c5c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d16d      	bne.n	80059de <USB_EPStartXfer+0xc5a>
 8005902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	67bb      	str	r3, [r7, #120]	; 0x78
 800590e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591c:	b29b      	uxth	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005922:	4413      	add	r3, r2
 8005924:	67bb      	str	r3, [r7, #120]	; 0x78
 8005926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	011a      	lsls	r2, r3, #4
 8005934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005936:	4413      	add	r3, r2
 8005938:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800593c:	677b      	str	r3, [r7, #116]	; 0x74
 800593e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d112      	bne.n	800596c <USB_EPStartXfer+0xbe8>
 8005946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005950:	b29a      	uxth	r2, r3
 8005952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005954:	801a      	strh	r2, [r3, #0]
 8005956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005958:	881b      	ldrh	r3, [r3, #0]
 800595a:	b29b      	uxth	r3, r3
 800595c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005960:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005964:	b29a      	uxth	r2, r3
 8005966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005968:	801a      	strh	r2, [r3, #0]
 800596a:	e060      	b.n	8005a2e <USB_EPStartXfer+0xcaa>
 800596c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005970:	2b3e      	cmp	r3, #62	; 0x3e
 8005972:	d817      	bhi.n	80059a4 <USB_EPStartXfer+0xc20>
 8005974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800597e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <USB_EPStartXfer+0xc10>
 800598a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800598e:	3301      	adds	r3, #1
 8005990:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005994:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005998:	b29b      	uxth	r3, r3
 800599a:	029b      	lsls	r3, r3, #10
 800599c:	b29a      	uxth	r2, r3
 800599e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	e044      	b.n	8005a2e <USB_EPStartXfer+0xcaa>
 80059a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80059ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d104      	bne.n	80059c4 <USB_EPStartXfer+0xc40>
 80059ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059be:	3b01      	subs	r3, #1
 80059c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80059c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	029b      	lsls	r3, r3, #10
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e027      	b.n	8005a2e <USB_EPStartXfer+0xcaa>
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d11f      	bne.n	8005a2e <USB_EPStartXfer+0xcaa>
 80059ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a04:	4413      	add	r3, r2
 8005a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	011a      	lsls	r2, r3, #4
 8005a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	895b      	ldrh	r3, [r3, #10]
 8005a3a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6959      	ldr	r1, [r3, #20]
 8005a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a54:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a58:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a5c:	6800      	ldr	r0, [r0, #0]
 8005a5e:	f001 f907 	bl	8006c70 <USB_WritePMA>
          ep->xfer_buff += len;
 8005a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a72:	441a      	add	r2, r3
 8005a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a1a      	ldr	r2, [r3, #32]
 8005a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d90f      	bls.n	8005abc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a1a      	ldr	r2, [r3, #32]
 8005aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aac:	1ad2      	subs	r2, r2, r3
 8005aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	621a      	str	r2, [r3, #32]
 8005aba:	e00e      	b.n	8005ada <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8295 	beq.w	800600e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d16d      	bne.n	8005bd0 <USB_EPStartXfer+0xe4c>
 8005af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b14:	4413      	add	r3, r2
 8005b16:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	011a      	lsls	r2, r3, #4
 8005b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b28:	4413      	add	r3, r2
 8005b2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b2e:	667b      	str	r3, [r7, #100]	; 0x64
 8005b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d112      	bne.n	8005b5e <USB_EPStartXfer+0xdda>
 8005b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b46:	801a      	strh	r2, [r3, #0]
 8005b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5a:	801a      	strh	r2, [r3, #0]
 8005b5c:	e063      	b.n	8005c26 <USB_EPStartXfer+0xea2>
 8005b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b62:	2b3e      	cmp	r3, #62	; 0x3e
 8005b64:	d817      	bhi.n	8005b96 <USB_EPStartXfer+0xe12>
 8005b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <USB_EPStartXfer+0xe02>
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b80:	3301      	adds	r3, #1
 8005b82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	029b      	lsls	r3, r3, #10
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e047      	b.n	8005c26 <USB_EPStartXfer+0xea2>
 8005b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <USB_EPStartXfer+0xe32>
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e02a      	b.n	8005c26 <USB_EPStartXfer+0xea2>
 8005bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d122      	bne.n	8005c26 <USB_EPStartXfer+0xea2>
 8005be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	673b      	str	r3, [r7, #112]	; 0x70
 8005bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c00:	4413      	add	r3, r2
 8005c02:	673b      	str	r3, [r7, #112]	; 0x70
 8005c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	011a      	lsls	r2, r3, #4
 8005c12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c14:	4413      	add	r3, r2
 8005c16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	891b      	ldrh	r3, [r3, #8]
 8005c32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6959      	ldr	r1, [r3, #20]
 8005c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c4c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c50:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c54:	6800      	ldr	r0, [r0, #0]
 8005c56:	f001 f80b 	bl	8006c70 <USB_WritePMA>
 8005c5a:	e1d8      	b.n	800600e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	785b      	ldrb	r3, [r3, #1]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d178      	bne.n	8005d5e <USB_EPStartXfer+0xfda>
 8005c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c90:	4413      	add	r3, r2
 8005c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	011a      	lsls	r2, r3, #4
 8005ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ca8:	4413      	add	r3, r2
 8005caa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d116      	bne.n	8005ce8 <USB_EPStartXfer+0xf64>
 8005cba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ce4:	801a      	strh	r2, [r3, #0]
 8005ce6:	e06b      	b.n	8005dc0 <USB_EPStartXfer+0x103c>
 8005ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cec:	2b3e      	cmp	r3, #62	; 0x3e
 8005cee:	d818      	bhi.n	8005d22 <USB_EPStartXfer+0xf9e>
 8005cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d004      	beq.n	8005d10 <USB_EPStartXfer+0xf8c>
 8005d06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e04e      	b.n	8005dc0 <USB_EPStartXfer+0x103c>
 8005d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <USB_EPStartXfer+0xfbe>
 8005d38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	029b      	lsls	r3, r3, #10
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d5a:	801a      	strh	r2, [r3, #0]
 8005d5c:	e030      	b.n	8005dc0 <USB_EPStartXfer+0x103c>
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d128      	bne.n	8005dc0 <USB_EPStartXfer+0x103c>
 8005d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d92:	4413      	add	r3, r2
 8005d94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	011a      	lsls	r2, r3, #4
 8005da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005daa:	4413      	add	r3, r2
 8005dac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005db0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005dbe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	891b      	ldrh	r3, [r3, #8]
 8005dcc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	6959      	ldr	r1, [r3, #20]
 8005ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005de6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005dea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005dee:	6800      	ldr	r0, [r0, #0]
 8005df0:	f000 ff3e 	bl	8006c70 <USB_WritePMA>
          ep->xfer_buff += len;
 8005df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695a      	ldr	r2, [r3, #20]
 8005e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e04:	441a      	add	r2, r3
 8005e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6a1a      	ldr	r2, [r3, #32]
 8005e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d90f      	bls.n	8005e4e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6a1a      	ldr	r2, [r3, #32]
 8005e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	621a      	str	r2, [r3, #32]
 8005e4c:	e00e      	b.n	8005e6c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80cc 	beq.w	800600e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d178      	bne.n	8005f86 <USB_EPStartXfer+0x1202>
 8005e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005eb8:	4413      	add	r3, r2
 8005eba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	011a      	lsls	r2, r3, #4
 8005ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d116      	bne.n	8005f10 <USB_EPStartXfer+0x118c>
 8005ee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ee6:	881b      	ldrh	r3, [r3, #0]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f0c:	801a      	strh	r2, [r3, #0]
 8005f0e:	e064      	b.n	8005fda <USB_EPStartXfer+0x1256>
 8005f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f14:	2b3e      	cmp	r3, #62	; 0x3e
 8005f16:	d818      	bhi.n	8005f4a <USB_EPStartXfer+0x11c6>
 8005f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <USB_EPStartXfer+0x11b4>
 8005f2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f32:	3301      	adds	r3, #1
 8005f34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	029b      	lsls	r3, r3, #10
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	e047      	b.n	8005fda <USB_EPStartXfer+0x1256>
 8005f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <USB_EPStartXfer+0x11e6>
 8005f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f64:	3b01      	subs	r3, #1
 8005f66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	029b      	lsls	r3, r3, #10
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	e029      	b.n	8005fda <USB_EPStartXfer+0x1256>
 8005f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d121      	bne.n	8005fda <USB_EPStartXfer+0x1256>
 8005f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fac:	4413      	add	r3, r2
 8005fae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	011a      	lsls	r2, r3, #4
 8005fc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd2:	b29a      	uxth	r2, r3
 8005fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	895b      	ldrh	r3, [r3, #10]
 8005fe6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6959      	ldr	r1, [r3, #20]
 8005ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006000:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006004:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006008:	6800      	ldr	r0, [r0, #0]
 800600a:	f000 fe31 	bl	8006c70 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800600e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006012:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006030:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800603c:	8013      	strh	r3, [r2, #0]
 800603e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006042:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006046:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800604a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800604e:	8812      	ldrh	r2, [r2, #0]
 8006050:	f082 0210 	eor.w	r2, r2, #16
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800605e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006062:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006066:	8812      	ldrh	r2, [r2, #0]
 8006068:	f082 0220 	eor.w	r2, r2, #32
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800608c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	8013      	strh	r3, [r2, #0]
 80060a6:	f000 bc9f 	b.w	80069e8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80060aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	7b1b      	ldrb	r3, [r3, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f040 80ae 	bne.w	8006218 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80060bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699a      	ldr	r2, [r3, #24]
 80060c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d917      	bls.n	8006108 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80060d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80060e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699a      	ldr	r2, [r3, #24]
 80060f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f8:	1ad2      	subs	r2, r2, r3
 80060fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	619a      	str	r2, [r3, #24]
 8006106:	e00e      	b.n	8006126 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800610c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800611c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2200      	movs	r2, #0
 8006124:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006138:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006142:	b29b      	uxth	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800614a:	4413      	add	r3, r2
 800614c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	011a      	lsls	r2, r3, #4
 800615e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006162:	4413      	add	r3, r2
 8006164:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006168:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800616c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d116      	bne.n	80061a2 <USB_EPStartXfer+0x141e>
 8006174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006180:	b29a      	uxth	r2, r3
 8006182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006186:	801a      	strh	r2, [r3, #0]
 8006188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	b29b      	uxth	r3, r3
 8006190:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006194:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006198:	b29a      	uxth	r2, r3
 800619a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800619e:	801a      	strh	r2, [r3, #0]
 80061a0:	e3e8      	b.n	8006974 <USB_EPStartXfer+0x1bf0>
 80061a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a6:	2b3e      	cmp	r3, #62	; 0x3e
 80061a8:	d818      	bhi.n	80061dc <USB_EPStartXfer+0x1458>
 80061aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ae:	085b      	lsrs	r3, r3, #1
 80061b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d004      	beq.n	80061ca <USB_EPStartXfer+0x1446>
 80061c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061c4:	3301      	adds	r3, #1
 80061c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	029b      	lsls	r3, r3, #10
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	e3cb      	b.n	8006974 <USB_EPStartXfer+0x1bf0>
 80061dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e0:	095b      	lsrs	r3, r3, #5
 80061e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ea:	f003 031f 	and.w	r3, r3, #31
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <USB_EPStartXfer+0x1478>
 80061f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80061f6:	3b01      	subs	r3, #1
 80061f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006200:	b29b      	uxth	r3, r3
 8006202:	029b      	lsls	r3, r3, #10
 8006204:	b29b      	uxth	r3, r3
 8006206:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800620a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620e:	b29a      	uxth	r2, r3
 8006210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	e3ad      	b.n	8006974 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	78db      	ldrb	r3, [r3, #3]
 8006224:	2b02      	cmp	r3, #2
 8006226:	f040 8200 	bne.w	800662a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800622a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800622e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	785b      	ldrb	r3, [r3, #1]
 8006236:	2b00      	cmp	r3, #0
 8006238:	f040 8091 	bne.w	800635e <USB_EPStartXfer+0x15da>
 800623c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006260:	4413      	add	r3, r2
 8006262:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800626a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	011a      	lsls	r2, r3, #4
 8006274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006278:	4413      	add	r3, r2
 800627a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800627e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d116      	bne.n	80062c0 <USB_EPStartXfer+0x153c>
 8006292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800629e:	b29a      	uxth	r2, r3
 80062a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	e083      	b.n	80063c8 <USB_EPStartXfer+0x1644>
 80062c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b3e      	cmp	r3, #62	; 0x3e
 80062ce:	d820      	bhi.n	8006312 <USB_EPStartXfer+0x158e>
 80062d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80062e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d004      	beq.n	8006300 <USB_EPStartXfer+0x157c>
 80062f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062fa:	3301      	adds	r3, #1
 80062fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006304:	b29b      	uxth	r3, r3
 8006306:	029b      	lsls	r3, r3, #10
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	e05a      	b.n	80063c8 <USB_EPStartXfer+0x1644>
 8006312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	f003 031f 	and.w	r3, r3, #31
 8006334:	2b00      	cmp	r3, #0
 8006336:	d104      	bne.n	8006342 <USB_EPStartXfer+0x15be>
 8006338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800633c:	3b01      	subs	r3, #1
 800633e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006346:	b29b      	uxth	r3, r3
 8006348:	029b      	lsls	r3, r3, #10
 800634a:	b29b      	uxth	r3, r3
 800634c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006354:	b29a      	uxth	r2, r3
 8006356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800635a:	801a      	strh	r2, [r3, #0]
 800635c:	e034      	b.n	80063c8 <USB_EPStartXfer+0x1644>
 800635e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d12c      	bne.n	80063c8 <USB_EPStartXfer+0x1644>
 800636e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006372:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800637c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006380:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638a:	b29b      	uxth	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006392:	4413      	add	r3, r2
 8006394:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	011a      	lsls	r2, r3, #4
 80063a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063aa:	4413      	add	r3, r2
 80063ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063c6:	801a      	strh	r2, [r3, #0]
 80063c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	785b      	ldrb	r3, [r3, #1]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f040 8091 	bne.w	800650a <USB_EPStartXfer+0x1786>
 80063e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006404:	b29b      	uxth	r3, r3
 8006406:	461a      	mov	r2, r3
 8006408:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800640c:	4413      	add	r3, r2
 800640e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	011a      	lsls	r2, r3, #4
 8006420:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006424:	4413      	add	r3, r2
 8006426:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800642a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800642e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d116      	bne.n	800646c <USB_EPStartXfer+0x16e8>
 800643e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29b      	uxth	r3, r3
 8006446:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800644a:	b29a      	uxth	r2, r3
 800644c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006450:	801a      	strh	r2, [r3, #0]
 8006452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006462:	b29a      	uxth	r2, r3
 8006464:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	e07c      	b.n	8006566 <USB_EPStartXfer+0x17e2>
 800646c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b3e      	cmp	r3, #62	; 0x3e
 800647a:	d820      	bhi.n	80064be <USB_EPStartXfer+0x173a>
 800647c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	085b      	lsrs	r3, r3, #1
 800648a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800648e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <USB_EPStartXfer+0x1728>
 80064a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064a6:	3301      	adds	r3, #1
 80064a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	029b      	lsls	r3, r3, #10
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064ba:	801a      	strh	r2, [r3, #0]
 80064bc:	e053      	b.n	8006566 <USB_EPStartXfer+0x17e2>
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <USB_EPStartXfer+0x176a>
 80064e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064e8:	3b01      	subs	r3, #1
 80064ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80064ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	029b      	lsls	r3, r3, #10
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006500:	b29a      	uxth	r2, r3
 8006502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006506:	801a      	strh	r2, [r3, #0]
 8006508:	e02d      	b.n	8006566 <USB_EPStartXfer+0x17e2>
 800650a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	785b      	ldrb	r3, [r3, #1]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d125      	bne.n	8006566 <USB_EPStartXfer+0x17e2>
 800651a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006528:	b29b      	uxth	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006530:	4413      	add	r3, r2
 8006532:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	011a      	lsls	r2, r3, #4
 8006544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006548:	4413      	add	r3, r2
 800654a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800654e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	b29a      	uxth	r2, r3
 8006560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006564:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 81fe 	beq.w	8006974 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006586:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006598:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800659c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <USB_EPStartXfer+0x182c>
 80065a4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80065a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10d      	bne.n	80065cc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80065b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f040 81db 	bne.w	8006974 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80065be:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f040 81d4 	bne.w	8006974 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80065cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	881b      	ldrh	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80065f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	441a      	add	r2, r3
 8006610:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006620:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006624:	b29b      	uxth	r3, r3
 8006626:	8013      	strh	r3, [r2, #0]
 8006628:	e1a4      	b.n	8006974 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800662a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800662e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	78db      	ldrb	r3, [r3, #3]
 8006636:	2b01      	cmp	r3, #1
 8006638:	f040 819a 	bne.w	8006970 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800663c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699a      	ldr	r2, [r3, #24]
 8006648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	429a      	cmp	r2, r3
 8006656:	d917      	bls.n	8006688 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699a      	ldr	r2, [r3, #24]
 8006674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006678:	1ad2      	subs	r2, r2, r3
 800667a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	619a      	str	r2, [r3, #24]
 8006686:	e00e      	b.n	80066a6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2200      	movs	r2, #0
 80066a4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80066a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	785b      	ldrb	r3, [r3, #1]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d178      	bne.n	80067a8 <USB_EPStartXfer+0x1a24>
 80066b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	461a      	mov	r2, r3
 80066d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066da:	4413      	add	r3, r2
 80066dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80066e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	011a      	lsls	r2, r3, #4
 80066ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066f2:	4413      	add	r3, r2
 80066f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006700:	2b00      	cmp	r3, #0
 8006702:	d116      	bne.n	8006732 <USB_EPStartXfer+0x19ae>
 8006704:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006710:	b29a      	uxth	r2, r3
 8006712:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006728:	b29a      	uxth	r2, r3
 800672a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e06b      	b.n	800680a <USB_EPStartXfer+0x1a86>
 8006732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006736:	2b3e      	cmp	r3, #62	; 0x3e
 8006738:	d818      	bhi.n	800676c <USB_EPStartXfer+0x19e8>
 800673a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673e:	085b      	lsrs	r3, r3, #1
 8006740:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d004      	beq.n	800675a <USB_EPStartXfer+0x19d6>
 8006750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006754:	3301      	adds	r3, #1
 8006756:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800675a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800675e:	b29b      	uxth	r3, r3
 8006760:	029b      	lsls	r3, r3, #10
 8006762:	b29a      	uxth	r2, r3
 8006764:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	e04e      	b.n	800680a <USB_EPStartXfer+0x1a86>
 800676c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	2b00      	cmp	r3, #0
 8006780:	d104      	bne.n	800678c <USB_EPStartXfer+0x1a08>
 8006782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006786:	3b01      	subs	r3, #1
 8006788:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800678c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006790:	b29b      	uxth	r3, r3
 8006792:	029b      	lsls	r3, r3, #10
 8006794:	b29b      	uxth	r3, r3
 8006796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800679a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679e:	b29a      	uxth	r2, r3
 80067a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067a4:	801a      	strh	r2, [r3, #0]
 80067a6:	e030      	b.n	800680a <USB_EPStartXfer+0x1a86>
 80067a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d128      	bne.n	800680a <USB_EPStartXfer+0x1a86>
 80067b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80067c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067dc:	4413      	add	r3, r2
 80067de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80067e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	011a      	lsls	r2, r3, #4
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f4:	4413      	add	r3, r2
 80067f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006802:	b29a      	uxth	r2, r3
 8006804:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006808:	801a      	strh	r2, [r3, #0]
 800680a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800680e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d178      	bne.n	800691a <USB_EPStartXfer+0x1b96>
 8006828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006844:	b29b      	uxth	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684c:	4413      	add	r3, r2
 800684e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	011a      	lsls	r2, r3, #4
 8006860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006864:	4413      	add	r3, r2
 8006866:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800686a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800686e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d116      	bne.n	80068a4 <USB_EPStartXfer+0x1b20>
 8006876:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006882:	b29a      	uxth	r2, r3
 8006884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006888:	801a      	strh	r2, [r3, #0]
 800688a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29b      	uxth	r3, r3
 8006892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689a:	b29a      	uxth	r2, r3
 800689c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e067      	b.n	8006974 <USB_EPStartXfer+0x1bf0>
 80068a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a8:	2b3e      	cmp	r3, #62	; 0x3e
 80068aa:	d818      	bhi.n	80068de <USB_EPStartXfer+0x1b5a>
 80068ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d004      	beq.n	80068cc <USB_EPStartXfer+0x1b48>
 80068c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068c6:	3301      	adds	r3, #1
 80068c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	029b      	lsls	r3, r3, #10
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068da:	801a      	strh	r2, [r3, #0]
 80068dc:	e04a      	b.n	8006974 <USB_EPStartXfer+0x1bf0>
 80068de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ec:	f003 031f 	and.w	r3, r3, #31
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <USB_EPStartXfer+0x1b7a>
 80068f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068f8:	3b01      	subs	r3, #1
 80068fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006902:	b29b      	uxth	r3, r3
 8006904:	029b      	lsls	r3, r3, #10
 8006906:	b29b      	uxth	r3, r3
 8006908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800690c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006910:	b29a      	uxth	r2, r3
 8006912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006916:	801a      	strh	r2, [r3, #0]
 8006918:	e02c      	b.n	8006974 <USB_EPStartXfer+0x1bf0>
 800691a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d124      	bne.n	8006974 <USB_EPStartXfer+0x1bf0>
 800692a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006938:	b29b      	uxth	r3, r3
 800693a:	461a      	mov	r2, r3
 800693c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006940:	4413      	add	r3, r2
 8006942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800694a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	011a      	lsls	r2, r3, #4
 8006954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006958:	4413      	add	r3, r2
 800695a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800695e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006962:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006966:	b29a      	uxth	r2, r3
 8006968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800696c:	801a      	strh	r2, [r3, #0]
 800696e:	e001      	b.n	8006974 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e03a      	b.n	80069ea <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006978:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800699e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80069a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80069aa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80069ae:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80069b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	441a      	add	r2, r3
 80069d0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80069d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	785b      	ldrb	r3, [r3, #1]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d020      	beq.n	8006a48 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a1c:	81bb      	strh	r3, [r7, #12]
 8006a1e:	89bb      	ldrh	r3, [r7, #12]
 8006a20:	f083 0310 	eor.w	r3, r3, #16
 8006a24:	81bb      	strh	r3, [r7, #12]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	441a      	add	r2, r3
 8006a30:	89bb      	ldrh	r3, [r7, #12]
 8006a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	8013      	strh	r3, [r2, #0]
 8006a46:	e01f      	b.n	8006a88 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5e:	81fb      	strh	r3, [r7, #14]
 8006a60:	89fb      	ldrh	r3, [r7, #14]
 8006a62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a66:	81fb      	strh	r3, [r7, #14]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	441a      	add	r2, r3
 8006a72:	89fb      	ldrh	r3, [r7, #14]
 8006a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr

08006a94 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	7b1b      	ldrb	r3, [r3, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f040 809d 	bne.w	8006be2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d04c      	beq.n	8006b4a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	823b      	strh	r3, [r7, #16]
 8006abe:	8a3b      	ldrh	r3, [r7, #16]
 8006ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01b      	beq.n	8006b00 <USB_EPClearStall+0x6c>
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	881b      	ldrh	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ade:	81fb      	strh	r3, [r7, #14]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	441a      	add	r2, r3
 8006aea:	89fb      	ldrh	r3, [r7, #14]
 8006aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	78db      	ldrb	r3, [r3, #3]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d06c      	beq.n	8006be2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1e:	81bb      	strh	r3, [r7, #12]
 8006b20:	89bb      	ldrh	r3, [r7, #12]
 8006b22:	f083 0320 	eor.w	r3, r3, #32
 8006b26:	81bb      	strh	r3, [r7, #12]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	89bb      	ldrh	r3, [r7, #12]
 8006b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	8013      	strh	r3, [r2, #0]
 8006b48:	e04b      	b.n	8006be2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	82fb      	strh	r3, [r7, #22]
 8006b58:	8afb      	ldrh	r3, [r7, #22]
 8006b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01b      	beq.n	8006b9a <USB_EPClearStall+0x106>
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b78:	82bb      	strh	r3, [r7, #20]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	441a      	add	r2, r3
 8006b84:	8abb      	ldrh	r3, [r7, #20]
 8006b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb0:	827b      	strh	r3, [r7, #18]
 8006bb2:	8a7b      	ldrh	r3, [r7, #18]
 8006bb4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006bb8:	827b      	strh	r3, [r7, #18]
 8006bba:	8a7b      	ldrh	r3, [r7, #18]
 8006bbc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bc0:	827b      	strh	r3, [r7, #18]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	8a7b      	ldrh	r3, [r7, #18]
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006bfa:	78fb      	ldrb	r3, [r7, #3]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d103      	bne.n	8006c08 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2280      	movs	r2, #128	; 0x80
 8006c04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bc80      	pop	{r7}
 8006c26:	4770      	bx	lr

08006c28 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bc80      	pop	{r7}
 8006c3a:	4770      	bx	lr

08006c3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bc80      	pop	{r7}
 8006c58:	4770      	bx	lr

08006c5a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bc80      	pop	{r7}
 8006c6e:	4770      	bx	lr

08006c70 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b08d      	sub	sp, #52	; 0x34
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	460b      	mov	r3, r1
 8006c80:	80fb      	strh	r3, [r7, #6]
 8006c82:	4613      	mov	r3, r2
 8006c84:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c86:	88bb      	ldrh	r3, [r7, #4]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	085b      	lsrs	r3, r3, #1
 8006c8c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c96:	88fb      	ldrh	r3, [r7, #6]
 8006c98:	005a      	lsls	r2, r3, #1
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ca2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca8:	e01e      	b.n	8006ce8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	021b      	lsls	r3, r3, #8
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	3302      	adds	r3, #2
 8006cd4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	3302      	adds	r3, #2
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	3301      	adds	r3, #1
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1dd      	bne.n	8006caa <USB_WritePMA+0x3a>
  }
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	3734      	adds	r7, #52	; 0x34
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bc80      	pop	{r7}
 8006cf8:	4770      	bx	lr

08006cfa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b08b      	sub	sp, #44	; 0x2c
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	4611      	mov	r1, r2
 8006d06:	461a      	mov	r2, r3
 8006d08:	460b      	mov	r3, r1
 8006d0a:	80fb      	strh	r3, [r7, #6]
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d10:	88bb      	ldrh	r3, [r7, #4]
 8006d12:	085b      	lsrs	r3, r3, #1
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d20:	88fb      	ldrh	r3, [r7, #6]
 8006d22:	005a      	lsls	r2, r3, #1
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d2c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
 8006d32:	e01b      	b.n	8006d6c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	3302      	adds	r3, #2
 8006d40:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	0a1b      	lsrs	r3, r3, #8
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	3302      	adds	r3, #2
 8006d64:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e0      	bne.n	8006d34 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006d72:	88bb      	ldrh	r3, [r7, #4]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d007      	beq.n	8006d8e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	881b      	ldrh	r3, [r3, #0]
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	701a      	strb	r2, [r3, #0]
  }
}
 8006d8e:	bf00      	nop
 8006d90:	372c      	adds	r7, #44	; 0x2c
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr

08006d98 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8006da8:	2311      	movs	r3, #17
 8006daa:	2203      	movs	r2, #3
 8006dac:	2181      	movs	r1, #129	; 0x81
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f001 fd6b 	bl	800888a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8006dba:	2302      	movs	r3, #2
 8006dbc:	2203      	movs	r2, #3
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fd62 	bl	800888a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006dce:	2054      	movs	r0, #84	; 0x54
 8006dd0:	f001 fe70 	bl	8008ab4 <USBD_static_malloc>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d102      	bne.n	8006dec <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8006de6:	2301      	movs	r3, #1
 8006de8:	73fb      	strb	r3, [r7, #15]
 8006dea:	e012      	b.n	8006e12 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df2:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	233f      	movs	r3, #63	; 0x3f
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 fe2d 	bl	8008a6c <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006e28:	2181      	movs	r1, #129	; 0x81
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 fd53 	bl	80088d6 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8006e36:	2101      	movs	r1, #1
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fd4c 	bl	80088d6 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00e      	beq.n	8006e6e <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e60:	4618      	mov	r0, r3
 8006e62:	f001 fe33 	bl	8008acc <USBD_static_free>
    pdev->pClassData = NULL;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e88:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d051      	beq.n	8006f4a <USBD_CUSTOM_HID_Setup+0xd2>
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	f040 80d8 	bne.w	800705c <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	785b      	ldrb	r3, [r3, #1]
 8006eb0:	3b02      	subs	r3, #2
 8006eb2:	2b09      	cmp	r3, #9
 8006eb4:	d841      	bhi.n	8006f3a <USBD_CUSTOM_HID_Setup+0xc2>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <USBD_CUSTOM_HID_Setup+0x44>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006f15 	.word	0x08006f15
 8006ec0:	08006ef3 	.word	0x08006ef3
 8006ec4:	08006f3b 	.word	0x08006f3b
 8006ec8:	08006f3b 	.word	0x08006f3b
 8006ecc:	08006f3b 	.word	0x08006f3b
 8006ed0:	08006f3b 	.word	0x08006f3b
 8006ed4:	08006f3b 	.word	0x08006f3b
 8006ed8:	08006f25 	.word	0x08006f25
 8006edc:	08006f03 	.word	0x08006f03
 8006ee0:	08006ee5 	.word	0x08006ee5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	885b      	ldrh	r3, [r3, #2]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8006ef0:	e02a      	b.n	8006f48 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	3340      	adds	r3, #64	; 0x40
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 f9b9 	bl	8008272 <USBD_CtlSendData>
          break;
 8006f00:	e022      	b.n	8006f48 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	885b      	ldrh	r3, [r3, #2]
 8006f06:	0a1b      	lsrs	r3, r3, #8
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8006f12:	e019      	b.n	8006f48 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	3344      	adds	r3, #68	; 0x44
 8006f18:	2201      	movs	r2, #1
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 f9a8 	bl	8008272 <USBD_CtlSendData>
          break;
 8006f22:	e011      	b.n	8006f48 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2201      	movs	r2, #1
 8006f28:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006f2a:	6939      	ldr	r1, [r7, #16]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	88db      	ldrh	r3, [r3, #6]
 8006f30:	461a      	mov	r2, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f001 f9cb 	bl	80082ce <USBD_CtlPrepareRx>
          break;
 8006f38:	e006      	b.n	8006f48 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 f92e 	bl	800819e <USBD_CtlError>
          ret = USBD_FAIL;
 8006f42:	2302      	movs	r3, #2
 8006f44:	75fb      	strb	r3, [r7, #23]
          break;
 8006f46:	bf00      	nop
      }
      break;
 8006f48:	e08f      	b.n	800706a <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	785b      	ldrb	r3, [r3, #1]
 8006f4e:	2b0b      	cmp	r3, #11
 8006f50:	d87c      	bhi.n	800704c <USBD_CUSTOM_HID_Setup+0x1d4>
 8006f52:	a201      	add	r2, pc, #4	; (adr r2, 8006f58 <USBD_CUSTOM_HID_Setup+0xe0>)
 8006f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f58:	08006f89 	.word	0x08006f89
 8006f5c:	0800704d 	.word	0x0800704d
 8006f60:	0800704d 	.word	0x0800704d
 8006f64:	0800704d 	.word	0x0800704d
 8006f68:	0800704d 	.word	0x0800704d
 8006f6c:	0800704d 	.word	0x0800704d
 8006f70:	08006fb1 	.word	0x08006fb1
 8006f74:	0800704d 	.word	0x0800704d
 8006f78:	0800704d 	.word	0x0800704d
 8006f7c:	0800704d 	.word	0x0800704d
 8006f80:	08006fff 	.word	0x08006fff
 8006f84:	08007027 	.word	0x08007027
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d107      	bne.n	8006fa2 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006f92:	f107 030e 	add.w	r3, r7, #14
 8006f96:	2202      	movs	r2, #2
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 f969 	bl	8008272 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fa0:	e05b      	b.n	800705a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 f8fa 	bl	800819e <USBD_CtlError>
            ret = USBD_FAIL;
 8006faa:	2302      	movs	r3, #2
 8006fac:	75fb      	strb	r3, [r7, #23]
          break;
 8006fae:	e054      	b.n	800705a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	885b      	ldrh	r3, [r3, #2]
 8006fb4:	0a1b      	lsrs	r3, r3, #8
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b22      	cmp	r3, #34	; 0x22
 8006fba:	d10b      	bne.n	8006fd4 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	88db      	ldrh	r3, [r3, #6]
 8006fc0:	2b31      	cmp	r3, #49	; 0x31
 8006fc2:	bf28      	it	cs
 8006fc4:	2331      	movcs	r3, #49	; 0x31
 8006fc6:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	e00d      	b.n	8006ff0 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	885b      	ldrh	r3, [r3, #2]
 8006fd8:	0a1b      	lsrs	r3, r3, #8
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	2b21      	cmp	r3, #33	; 0x21
 8006fde:	d107      	bne.n	8006ff0 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006fe0:	4b24      	ldr	r3, [pc, #144]	; (8007074 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8006fe2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	88db      	ldrh	r3, [r3, #6]
 8006fe8:	2b09      	cmp	r3, #9
 8006fea:	bf28      	it	cs
 8006fec:	2309      	movcs	r3, #9
 8006fee:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8006ff0:	8bfb      	ldrh	r3, [r7, #30]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	69b9      	ldr	r1, [r7, #24]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f001 f93b 	bl	8008272 <USBD_CtlSendData>
          break;
 8006ffc:	e02d      	b.n	800705a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007004:	2b03      	cmp	r3, #3
 8007006:	d107      	bne.n	8007018 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	3348      	adds	r3, #72	; 0x48
 800700c:	2201      	movs	r2, #1
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f001 f92e 	bl	8008272 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007016:	e020      	b.n	800705a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f001 f8bf 	bl	800819e <USBD_CtlError>
            ret = USBD_FAIL;
 8007020:	2302      	movs	r3, #2
 8007022:	75fb      	strb	r3, [r7, #23]
          break;
 8007024:	e019      	b.n	800705a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702c:	2b03      	cmp	r3, #3
 800702e:	d106      	bne.n	800703e <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	885b      	ldrh	r3, [r3, #2]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800703c:	e00d      	b.n	800705a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 f8ac 	bl	800819e <USBD_CtlError>
            ret = USBD_FAIL;
 8007046:	2302      	movs	r3, #2
 8007048:	75fb      	strb	r3, [r7, #23]
          break;
 800704a:	e006      	b.n	800705a <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 f8a5 	bl	800819e <USBD_CtlError>
          ret = USBD_FAIL;
 8007054:	2302      	movs	r3, #2
 8007056:	75fb      	strb	r3, [r7, #23]
          break;
 8007058:	bf00      	nop
      }
      break;
 800705a:	e006      	b.n	800706a <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f001 f89d 	bl	800819e <USBD_CtlError>
      ret = USBD_FAIL;
 8007064:	2302      	movs	r3, #2
 8007066:	75fb      	strb	r3, [r7, #23]
      break;
 8007068:	bf00      	nop
  }
  return ret;
 800706a:	7dfb      	ldrb	r3, [r7, #23]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3720      	adds	r7, #32
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	200000c8 	.word	0x200000c8

08007078 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	4613      	mov	r3, r2
 8007084:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007094:	2b03      	cmp	r3, #3
 8007096:	d111      	bne.n	80070bc <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10a      	bne.n	80070b8 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2201      	movs	r2, #1
 80070a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	2181      	movs	r1, #129	; 0x81
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f001 fcb8 	bl	8008a26 <USBD_LL_Transmit>
 80070b6:	e001      	b.n	80070bc <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e000      	b.n	80070be <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2229      	movs	r2, #41	; 0x29
 80070d4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80070d6:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	bc80      	pop	{r7}
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20000044 	.word	0x20000044

080070e8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2229      	movs	r2, #41	; 0x29
 80070f4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80070f6:	4b03      	ldr	r3, [pc, #12]	; (8007104 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000070 	.word	0x20000070

08007108 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2229      	movs	r2, #41	; 0x29
 8007114:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007116:	4b03      	ldr	r3, [pc, #12]	; (8007124 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007118:	4618      	mov	r0, r3
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	bc80      	pop	{r7}
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	2000009c 	.word	0x2000009c

08007128 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return USBD_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr

0800714c <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715e:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	7810      	ldrb	r0, [r2, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	7852      	ldrb	r2, [r2, #1]
 8007170:	4611      	mov	r1, r2
 8007172:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	233f      	movs	r3, #63	; 0x3f
 8007178:	2101      	movs	r1, #1
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fc76 	bl	8008a6c <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007198:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d10c      	bne.n	80071bc <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	7810      	ldrb	r0, [r2, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	7852      	ldrb	r2, [r2, #1]
 80071b2:	4611      	mov	r1, r2
 80071b4:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	220a      	movs	r2, #10
 80071d4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80071d6:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	bc80      	pop	{r7}
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	200000d4 	.word	0x200000d4

080071e8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80071f2:	2302      	movs	r3, #2
 80071f4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007208:	7bfb      	ldrb	r3, [r7, #15]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr

08007214 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007228:	4814      	ldr	r0, [pc, #80]	; (800727c <USBD_Init+0x68>)
 800722a:	f001 fcc1 	bl	8008bb0 <iprintf>
 800722e:	4814      	ldr	r0, [pc, #80]	; (8007280 <USBD_Init+0x6c>)
 8007230:	f001 fcbe 	bl	8008bb0 <iprintf>
 8007234:	200a      	movs	r0, #10
 8007236:	f001 fcd3 	bl	8008be0 <putchar>
#endif
    return USBD_FAIL;
 800723a:	2302      	movs	r3, #2
 800723c:	e01a      	b.n	8007274 <USBD_Init+0x60>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	79fa      	ldrb	r2, [r7, #7]
 800726a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f001 faa1 	bl	80087b4 <USBD_LL_Init>

  return USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	08009bc8 	.word	0x08009bc8
 8007280:	08009bd0 	.word	0x08009bd0

08007284 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d006      	beq.n	80072a6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]
 80072a4:	e00a      	b.n	80072bc <USBD_RegisterClass+0x38>
  }
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80072a6:	4808      	ldr	r0, [pc, #32]	; (80072c8 <USBD_RegisterClass+0x44>)
 80072a8:	f001 fc82 	bl	8008bb0 <iprintf>
 80072ac:	4807      	ldr	r0, [pc, #28]	; (80072cc <USBD_RegisterClass+0x48>)
 80072ae:	f001 fc7f 	bl	8008bb0 <iprintf>
 80072b2:	200a      	movs	r0, #10
 80072b4:	f001 fc94 	bl	8008be0 <putchar>
#endif
    status = USBD_FAIL;
 80072b8:	2302      	movs	r3, #2
 80072ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	08009bc8 	.word	0x08009bc8
 80072cc:	08009be8 	.word	0x08009be8

080072d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b082      	sub	sp, #8
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 fabb 	bl	8008854 <USBD_LL_Start>

  return USBD_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr

080072fc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007308:	2302      	movs	r3, #2
 800730a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00c      	beq.n	8007330 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	78fa      	ldrb	r2, [r7, #3]
 8007320:	4611      	mov	r1, r2
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	4798      	blx	r3
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	78fa      	ldrb	r2, [r7, #3]
 8007350:	4611      	mov	r1, r2
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	4798      	blx	r3

  return USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f000 fed7 	bl	8008126 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007394:	f003 031f 	and.w	r3, r3, #31
 8007398:	2b02      	cmp	r3, #2
 800739a:	d016      	beq.n	80073ca <USBD_LL_SetupStage+0x6a>
 800739c:	2b02      	cmp	r3, #2
 800739e:	d81c      	bhi.n	80073da <USBD_LL_SetupStage+0x7a>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <USBD_LL_SetupStage+0x4a>
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d008      	beq.n	80073ba <USBD_LL_SetupStage+0x5a>
 80073a8:	e017      	b.n	80073da <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9ca 	bl	800774c <USBD_StdDevReq>
      break;
 80073b8:	e01a      	b.n	80073f0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 fa2c 	bl	8007820 <USBD_StdItfReq>
      break;
 80073c8:	e012      	b.n	80073f0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fa6c 	bl	80078b0 <USBD_StdEPReq>
      break;
 80073d8:	e00a      	b.n	80073f0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80073e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f001 fa93 	bl	8008914 <USBD_LL_StallEP>
      break;
 80073ee:	bf00      	nop
  }

  return USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b086      	sub	sp, #24
 80073fe:	af00      	add	r7, sp, #0
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	460b      	mov	r3, r1
 8007404:	607a      	str	r2, [r7, #4]
 8007406:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007408:	7afb      	ldrb	r3, [r7, #11]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d14b      	bne.n	80074a6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007414:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800741c:	2b03      	cmp	r3, #3
 800741e:	d134      	bne.n	800748a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	429a      	cmp	r2, r3
 800742a:	d919      	bls.n	8007460 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	1ad2      	subs	r2, r2, r3
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007442:	429a      	cmp	r2, r3
 8007444:	d203      	bcs.n	800744e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800744a:	b29b      	uxth	r3, r3
 800744c:	e002      	b.n	8007454 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007452:	b29b      	uxth	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 ff56 	bl	800830a <USBD_CtlContinueRx>
 800745e:	e038      	b.n	80074d2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007472:	2b03      	cmp	r3, #3
 8007474:	d105      	bne.n	8007482 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 ff53 	bl	800832e <USBD_CtlSendStatus>
 8007488:	e023      	b.n	80074d2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007490:	2b05      	cmp	r3, #5
 8007492:	d11e      	bne.n	80074d2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800749c:	2100      	movs	r1, #0
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f001 fa38 	bl	8008914 <USBD_LL_StallEP>
 80074a4:	e015      	b.n	80074d2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00d      	beq.n	80074ce <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d108      	bne.n	80074ce <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	7afa      	ldrb	r2, [r7, #11]
 80074c6:	4611      	mov	r1, r2
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	4798      	blx	r3
 80074cc:	e001      	b.n	80074d2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074ce:	2302      	movs	r3, #2
 80074d0:	e000      	b.n	80074d4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	460b      	mov	r3, r1
 80074e6:	607a      	str	r2, [r7, #4]
 80074e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80074ea:	7afb      	ldrb	r3, [r7, #11]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d17f      	bne.n	80075f0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3314      	adds	r3, #20
 80074f4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d15c      	bne.n	80075ba <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	429a      	cmp	r2, r3
 800750a:	d915      	bls.n	8007538 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	68da      	ldr	r2, [r3, #12]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	1ad2      	subs	r2, r2, r3
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	b29b      	uxth	r3, r3
 8007520:	461a      	mov	r2, r3
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 fec0 	bl	80082aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800752a:	2300      	movs	r3, #0
 800752c:	2200      	movs	r2, #0
 800752e:	2100      	movs	r1, #0
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f001 fa9b 	bl	8008a6c <USBD_LL_PrepareReceive>
 8007536:	e04e      	b.n	80075d6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	6912      	ldr	r2, [r2, #16]
 8007540:	fbb3 f1f2 	udiv	r1, r3, r2
 8007544:	fb01 f202 	mul.w	r2, r1, r2
 8007548:	1a9b      	subs	r3, r3, r2
 800754a:	2b00      	cmp	r3, #0
 800754c:	d11c      	bne.n	8007588 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007556:	429a      	cmp	r2, r3
 8007558:	d316      	bcc.n	8007588 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	689a      	ldr	r2, [r3, #8]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007564:	429a      	cmp	r2, r3
 8007566:	d20f      	bcs.n	8007588 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007568:	2200      	movs	r2, #0
 800756a:	2100      	movs	r1, #0
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 fe9c 	bl	80082aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800757a:	2300      	movs	r3, #0
 800757c:	2200      	movs	r2, #0
 800757e:	2100      	movs	r1, #0
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f001 fa73 	bl	8008a6c <USBD_LL_PrepareReceive>
 8007586:	e026      	b.n	80075d6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00a      	beq.n	80075aa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800759a:	2b03      	cmp	r3, #3
 800759c:	d105      	bne.n	80075aa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80075aa:	2180      	movs	r1, #128	; 0x80
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f001 f9b1 	bl	8008914 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 fece 	bl	8008354 <USBD_CtlReceiveStatus>
 80075b8:	e00d      	b.n	80075d6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d004      	beq.n	80075ce <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d103      	bne.n	80075d6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80075ce:	2180      	movs	r1, #128	; 0x80
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f001 f99f 	bl	8008914 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d11d      	bne.n	800761c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f7ff fe81 	bl	80072e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075ee:	e015      	b.n	800761c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00d      	beq.n	8007618 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007602:	2b03      	cmp	r3, #3
 8007604:	d108      	bne.n	8007618 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	7afa      	ldrb	r2, [r7, #11]
 8007610:	4611      	mov	r1, r2
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	4798      	blx	r3
 8007616:	e001      	b.n	800761c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007618:	2302      	movs	r3, #2
 800761a:	e000      	b.n	800761e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800762e:	2340      	movs	r3, #64	; 0x40
 8007630:	2200      	movs	r2, #0
 8007632:	2100      	movs	r1, #0
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 f928 	bl	800888a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2240      	movs	r2, #64	; 0x40
 8007646:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800764a:	2340      	movs	r3, #64	; 0x40
 800764c:	2200      	movs	r2, #0
 800764e:	2180      	movs	r1, #128	; 0x80
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 f91a 	bl	800888a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2240      	movs	r2, #64	; 0x40
 8007660:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	6852      	ldr	r2, [r2, #4]
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	4611      	mov	r1, r2
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	4798      	blx	r3
  }

  return USBD_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	78fa      	ldrb	r2, [r7, #3]
 80076b8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr

080076c6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2204      	movs	r2, #4
 80076de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bc80      	pop	{r7}
 80076ec:	4770      	bx	lr

080076ee <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076fc:	2b04      	cmp	r3, #4
 80076fe:	d105      	bne.n	800770c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	bc80      	pop	{r7}
 8007716:	4770      	bx	lr

08007718 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007726:	2b03      	cmp	r3, #3
 8007728:	d10b      	bne.n	8007742 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d005      	beq.n	8007742 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d005      	beq.n	8007772 <USBD_StdDevReq+0x26>
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d84f      	bhi.n	800780a <USBD_StdDevReq+0xbe>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d009      	beq.n	8007782 <USBD_StdDevReq+0x36>
 800776e:	2b20      	cmp	r3, #32
 8007770:	d14b      	bne.n	800780a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	4798      	blx	r3
      break;
 8007780:	e048      	b.n	8007814 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	785b      	ldrb	r3, [r3, #1]
 8007786:	2b09      	cmp	r3, #9
 8007788:	d839      	bhi.n	80077fe <USBD_StdDevReq+0xb2>
 800778a:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <USBD_StdDevReq+0x44>)
 800778c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007790:	080077e1 	.word	0x080077e1
 8007794:	080077f5 	.word	0x080077f5
 8007798:	080077ff 	.word	0x080077ff
 800779c:	080077eb 	.word	0x080077eb
 80077a0:	080077ff 	.word	0x080077ff
 80077a4:	080077c3 	.word	0x080077c3
 80077a8:	080077b9 	.word	0x080077b9
 80077ac:	080077ff 	.word	0x080077ff
 80077b0:	080077d7 	.word	0x080077d7
 80077b4:	080077cd 	.word	0x080077cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f9dc 	bl	8007b78 <USBD_GetDescriptor>
          break;
 80077c0:	e022      	b.n	8007808 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077c2:	6839      	ldr	r1, [r7, #0]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fb3f 	bl	8007e48 <USBD_SetAddress>
          break;
 80077ca:	e01d      	b.n	8007808 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fb7e 	bl	8007ed0 <USBD_SetConfig>
          break;
 80077d4:	e018      	b.n	8007808 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fc07 	bl	8007fec <USBD_GetConfig>
          break;
 80077de:	e013      	b.n	8007808 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fc37 	bl	8008056 <USBD_GetStatus>
          break;
 80077e8:	e00e      	b.n	8007808 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fc65 	bl	80080bc <USBD_SetFeature>
          break;
 80077f2:	e009      	b.n	8007808 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fc74 	bl	80080e4 <USBD_ClrFeature>
          break;
 80077fc:	e004      	b.n	8007808 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80077fe:	6839      	ldr	r1, [r7, #0]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fccc 	bl	800819e <USBD_CtlError>
          break;
 8007806:	bf00      	nop
      }
      break;
 8007808:	e004      	b.n	8007814 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fcc6 	bl	800819e <USBD_CtlError>
      break;
 8007812:	bf00      	nop
  }

  return ret;
 8007814:	7bfb      	ldrb	r3, [r7, #15]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop

08007820 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007836:	2b40      	cmp	r3, #64	; 0x40
 8007838:	d005      	beq.n	8007846 <USBD_StdItfReq+0x26>
 800783a:	2b40      	cmp	r3, #64	; 0x40
 800783c:	d82e      	bhi.n	800789c <USBD_StdItfReq+0x7c>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <USBD_StdItfReq+0x26>
 8007842:	2b20      	cmp	r3, #32
 8007844:	d12a      	bne.n	800789c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784c:	3b01      	subs	r3, #1
 800784e:	2b02      	cmp	r3, #2
 8007850:	d81d      	bhi.n	800788e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	889b      	ldrh	r3, [r3, #4]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	d813      	bhi.n	8007884 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
 800786a:	4603      	mov	r3, r0
 800786c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	88db      	ldrh	r3, [r3, #6]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d110      	bne.n	8007898 <USBD_StdItfReq+0x78>
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10d      	bne.n	8007898 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fd56 	bl	800832e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007882:	e009      	b.n	8007898 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fc89 	bl	800819e <USBD_CtlError>
          break;
 800788c:	e004      	b.n	8007898 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fc84 	bl	800819e <USBD_CtlError>
          break;
 8007896:	e000      	b.n	800789a <USBD_StdItfReq+0x7a>
          break;
 8007898:	bf00      	nop
      }
      break;
 800789a:	e004      	b.n	80078a6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fc7d 	bl	800819e <USBD_CtlError>
      break;
 80078a4:	bf00      	nop
  }

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	889b      	ldrh	r3, [r3, #4]
 80078c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078cc:	2b40      	cmp	r3, #64	; 0x40
 80078ce:	d007      	beq.n	80078e0 <USBD_StdEPReq+0x30>
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	f200 8146 	bhi.w	8007b62 <USBD_StdEPReq+0x2b2>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <USBD_StdEPReq+0x40>
 80078da:	2b20      	cmp	r3, #32
 80078dc:	f040 8141 	bne.w	8007b62 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	4798      	blx	r3
      break;
 80078ee:	e13d      	b.n	8007b6c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	d10a      	bne.n	8007912 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	4798      	blx	r3
 800790a:	4603      	mov	r3, r0
 800790c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	e12d      	b.n	8007b6e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	2b03      	cmp	r3, #3
 8007918:	d007      	beq.n	800792a <USBD_StdEPReq+0x7a>
 800791a:	2b03      	cmp	r3, #3
 800791c:	f300 811b 	bgt.w	8007b56 <USBD_StdEPReq+0x2a6>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d072      	beq.n	8007a0a <USBD_StdEPReq+0x15a>
 8007924:	2b01      	cmp	r3, #1
 8007926:	d03a      	beq.n	800799e <USBD_StdEPReq+0xee>
 8007928:	e115      	b.n	8007b56 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007930:	2b02      	cmp	r3, #2
 8007932:	d002      	beq.n	800793a <USBD_StdEPReq+0x8a>
 8007934:	2b03      	cmp	r3, #3
 8007936:	d015      	beq.n	8007964 <USBD_StdEPReq+0xb4>
 8007938:	e02b      	b.n	8007992 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00c      	beq.n	800795a <USBD_StdEPReq+0xaa>
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d009      	beq.n	800795a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 ffe2 	bl	8008914 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007950:	2180      	movs	r1, #128	; 0x80
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 ffde 	bl	8008914 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007958:	e020      	b.n	800799c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fc1e 	bl	800819e <USBD_CtlError>
              break;
 8007962:	e01b      	b.n	800799c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	885b      	ldrh	r3, [r3, #2]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10e      	bne.n	800798a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00b      	beq.n	800798a <USBD_StdEPReq+0xda>
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	2b80      	cmp	r3, #128	; 0x80
 8007976:	d008      	beq.n	800798a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	88db      	ldrh	r3, [r3, #6]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d104      	bne.n	800798a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 ffc5 	bl	8008914 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fccf 	bl	800832e <USBD_CtlSendStatus>

              break;
 8007990:	e004      	b.n	800799c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fc02 	bl	800819e <USBD_CtlError>
              break;
 800799a:	bf00      	nop
          }
          break;
 800799c:	e0e0      	b.n	8007b60 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d002      	beq.n	80079ae <USBD_StdEPReq+0xfe>
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d015      	beq.n	80079d8 <USBD_StdEPReq+0x128>
 80079ac:	e026      	b.n	80079fc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00c      	beq.n	80079ce <USBD_StdEPReq+0x11e>
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b80      	cmp	r3, #128	; 0x80
 80079b8:	d009      	beq.n	80079ce <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 ffa8 	bl	8008914 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079c4:	2180      	movs	r1, #128	; 0x80
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 ffa4 	bl	8008914 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079cc:	e01c      	b.n	8007a08 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fbe4 	bl	800819e <USBD_CtlError>
              break;
 80079d6:	e017      	b.n	8007a08 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	885b      	ldrh	r3, [r3, #2]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d112      	bne.n	8007a06 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d004      	beq.n	80079f4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 ffaf 	bl	8008952 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fc9a 	bl	800832e <USBD_CtlSendStatus>
              }
              break;
 80079fa:	e004      	b.n	8007a06 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fbcd 	bl	800819e <USBD_CtlError>
              break;
 8007a04:	e000      	b.n	8007a08 <USBD_StdEPReq+0x158>
              break;
 8007a06:	bf00      	nop
          }
          break;
 8007a08:	e0aa      	b.n	8007b60 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d002      	beq.n	8007a1a <USBD_StdEPReq+0x16a>
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d032      	beq.n	8007a7e <USBD_StdEPReq+0x1ce>
 8007a18:	e097      	b.n	8007b4a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <USBD_StdEPReq+0x180>
 8007a20:	7bbb      	ldrb	r3, [r7, #14]
 8007a22:	2b80      	cmp	r3, #128	; 0x80
 8007a24:	d004      	beq.n	8007a30 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fbb8 	bl	800819e <USBD_CtlError>
                break;
 8007a2e:	e091      	b.n	8007b54 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	da0b      	bge.n	8007a50 <USBD_StdEPReq+0x1a0>
 8007a38:	7bbb      	ldrb	r3, [r7, #14]
 8007a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	3310      	adds	r3, #16
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3304      	adds	r3, #4
 8007a4e:	e00b      	b.n	8007a68 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	4413      	add	r3, r2
 8007a66:	3304      	adds	r3, #4
 8007a68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	2202      	movs	r2, #2
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fbfb 	bl	8008272 <USBD_CtlSendData>
              break;
 8007a7c:	e06a      	b.n	8007b54 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	da11      	bge.n	8007aaa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	f003 020f 	and.w	r2, r3, #15
 8007a8c:	6879      	ldr	r1, [r7, #4]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	440b      	add	r3, r1
 8007a98:	3318      	adds	r3, #24
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d117      	bne.n	8007ad0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fb7b 	bl	800819e <USBD_CtlError>
                  break;
 8007aa8:	e054      	b.n	8007b54 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	f003 020f 	and.w	r2, r3, #15
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	440b      	add	r3, r1
 8007abc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d104      	bne.n	8007ad0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fb68 	bl	800819e <USBD_CtlError>
                  break;
 8007ace:	e041      	b.n	8007b54 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	da0b      	bge.n	8007af0 <USBD_StdEPReq+0x240>
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	3310      	adds	r3, #16
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4413      	add	r3, r2
 8007aec:	3304      	adds	r3, #4
 8007aee:	e00b      	b.n	8007b08 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	4413      	add	r3, r2
 8007b06:	3304      	adds	r3, #4
 8007b08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b0a:	7bbb      	ldrb	r3, [r7, #14]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <USBD_StdEPReq+0x266>
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	2b80      	cmp	r3, #128	; 0x80
 8007b14:	d103      	bne.n	8007b1e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	e00e      	b.n	8007b3c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 ff34 	bl	8008990 <USBD_LL_IsStallEP>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2201      	movs	r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	e002      	b.n	8007b3c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fb95 	bl	8008272 <USBD_CtlSendData>
              break;
 8007b48:	e004      	b.n	8007b54 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 fb26 	bl	800819e <USBD_CtlError>
              break;
 8007b52:	bf00      	nop
          }
          break;
 8007b54:	e004      	b.n	8007b60 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fb20 	bl	800819e <USBD_CtlError>
          break;
 8007b5e:	bf00      	nop
      }
      break;
 8007b60:	e004      	b.n	8007b6c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fb1a 	bl	800819e <USBD_CtlError>
      break;
 8007b6a:	bf00      	nop
  }

  return ret;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b82:	2300      	movs	r3, #0
 8007b84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	885b      	ldrh	r3, [r3, #2]
 8007b92:	0a1b      	lsrs	r3, r3, #8
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	3b01      	subs	r3, #1
 8007b98:	2b06      	cmp	r3, #6
 8007b9a:	f200 8128 	bhi.w	8007dee <USBD_GetDescriptor+0x276>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <USBD_GetDescriptor+0x2c>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bc1 	.word	0x08007bc1
 8007ba8:	08007bd9 	.word	0x08007bd9
 8007bac:	08007c19 	.word	0x08007c19
 8007bb0:	08007def 	.word	0x08007def
 8007bb4:	08007def 	.word	0x08007def
 8007bb8:	08007d8f 	.word	0x08007d8f
 8007bbc:	08007dbb 	.word	0x08007dbb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	7c12      	ldrb	r2, [r2, #16]
 8007bcc:	f107 0108 	add.w	r1, r7, #8
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
 8007bd4:	60f8      	str	r0, [r7, #12]
      break;
 8007bd6:	e112      	b.n	8007dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7c1b      	ldrb	r3, [r3, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10d      	bne.n	8007bfc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be8:	f107 0208 	add.w	r2, r7, #8
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
 8007bf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007bfa:	e100      	b.n	8007dfe <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	f107 0208 	add.w	r2, r7, #8
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3301      	adds	r3, #1
 8007c12:	2202      	movs	r2, #2
 8007c14:	701a      	strb	r2, [r3, #0]
      break;
 8007c16:	e0f2      	b.n	8007dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	885b      	ldrh	r3, [r3, #2]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	f200 80ac 	bhi.w	8007d7c <USBD_GetDescriptor+0x204>
 8007c24:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <USBD_GetDescriptor+0xb4>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007c45 	.word	0x08007c45
 8007c30:	08007c79 	.word	0x08007c79
 8007c34:	08007cad 	.word	0x08007cad
 8007c38:	08007ce1 	.word	0x08007ce1
 8007c3c:	08007d15 	.word	0x08007d15
 8007c40:	08007d49 	.word	0x08007d49
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	7c12      	ldrb	r2, [r2, #16]
 8007c5c:	f107 0108 	add.w	r1, r7, #8
 8007c60:	4610      	mov	r0, r2
 8007c62:	4798      	blx	r3
 8007c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c66:	e091      	b.n	8007d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fa97 	bl	800819e <USBD_CtlError>
            err++;
 8007c70:	7afb      	ldrb	r3, [r7, #11]
 8007c72:	3301      	adds	r3, #1
 8007c74:	72fb      	strb	r3, [r7, #11]
          break;
 8007c76:	e089      	b.n	8007d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00b      	beq.n	8007c9c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	7c12      	ldrb	r2, [r2, #16]
 8007c90:	f107 0108 	add.w	r1, r7, #8
 8007c94:	4610      	mov	r0, r2
 8007c96:	4798      	blx	r3
 8007c98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c9a:	e077      	b.n	8007d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fa7d 	bl	800819e <USBD_CtlError>
            err++;
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	72fb      	strb	r3, [r7, #11]
          break;
 8007caa:	e06f      	b.n	8007d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00b      	beq.n	8007cd0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	7c12      	ldrb	r2, [r2, #16]
 8007cc4:	f107 0108 	add.w	r1, r7, #8
 8007cc8:	4610      	mov	r0, r2
 8007cca:	4798      	blx	r3
 8007ccc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cce:	e05d      	b.n	8007d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fa63 	bl	800819e <USBD_CtlError>
            err++;
 8007cd8:	7afb      	ldrb	r3, [r7, #11]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cde:	e055      	b.n	8007d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	7c12      	ldrb	r2, [r2, #16]
 8007cf8:	f107 0108 	add.w	r1, r7, #8
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	4798      	blx	r3
 8007d00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d02:	e043      	b.n	8007d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fa49 	bl	800819e <USBD_CtlError>
            err++;
 8007d0c:	7afb      	ldrb	r3, [r7, #11]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	72fb      	strb	r3, [r7, #11]
          break;
 8007d12:	e03b      	b.n	8007d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	7c12      	ldrb	r2, [r2, #16]
 8007d2c:	f107 0108 	add.w	r1, r7, #8
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
 8007d34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d36:	e029      	b.n	8007d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa2f 	bl	800819e <USBD_CtlError>
            err++;
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	3301      	adds	r3, #1
 8007d44:	72fb      	strb	r3, [r7, #11]
          break;
 8007d46:	e021      	b.n	8007d8c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00b      	beq.n	8007d6c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	7c12      	ldrb	r2, [r2, #16]
 8007d60:	f107 0108 	add.w	r1, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d6a:	e00f      	b.n	8007d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fa15 	bl	800819e <USBD_CtlError>
            err++;
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	3301      	adds	r3, #1
 8007d78:	72fb      	strb	r3, [r7, #11]
          break;
 8007d7a:	e007      	b.n	8007d8c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa0d 	bl	800819e <USBD_CtlError>
          err++;
 8007d84:	7afb      	ldrb	r3, [r7, #11]
 8007d86:	3301      	adds	r3, #1
 8007d88:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d8a:	e038      	b.n	8007dfe <USBD_GetDescriptor+0x286>
 8007d8c:	e037      	b.n	8007dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	7c1b      	ldrb	r3, [r3, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d109      	bne.n	8007daa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9e:	f107 0208 	add.w	r2, r7, #8
 8007da2:	4610      	mov	r0, r2
 8007da4:	4798      	blx	r3
 8007da6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007da8:	e029      	b.n	8007dfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f9f6 	bl	800819e <USBD_CtlError>
        err++;
 8007db2:	7afb      	ldrb	r3, [r7, #11]
 8007db4:	3301      	adds	r3, #1
 8007db6:	72fb      	strb	r3, [r7, #11]
      break;
 8007db8:	e021      	b.n	8007dfe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	7c1b      	ldrb	r3, [r3, #16]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10d      	bne.n	8007dde <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	f107 0208 	add.w	r2, r7, #8
 8007dce:	4610      	mov	r0, r2
 8007dd0:	4798      	blx	r3
 8007dd2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	2207      	movs	r2, #7
 8007dda:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ddc:	e00f      	b.n	8007dfe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f9dc 	bl	800819e <USBD_CtlError>
        err++;
 8007de6:	7afb      	ldrb	r3, [r7, #11]
 8007de8:	3301      	adds	r3, #1
 8007dea:	72fb      	strb	r3, [r7, #11]
      break;
 8007dec:	e007      	b.n	8007dfe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f9d4 	bl	800819e <USBD_CtlError>
      err++;
 8007df6:	7afb      	ldrb	r3, [r7, #11]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	72fb      	strb	r3, [r7, #11]
      break;
 8007dfc:	bf00      	nop
  }

  if (err != 0U)
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d11c      	bne.n	8007e3e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e04:	893b      	ldrh	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d011      	beq.n	8007e2e <USBD_GetDescriptor+0x2b6>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	88db      	ldrh	r3, [r3, #6]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00d      	beq.n	8007e2e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	88da      	ldrh	r2, [r3, #6]
 8007e16:	893b      	ldrh	r3, [r7, #8]
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	bf28      	it	cs
 8007e1c:	4613      	movcs	r3, r2
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e22:	893b      	ldrh	r3, [r7, #8]
 8007e24:	461a      	mov	r2, r3
 8007e26:	68f9      	ldr	r1, [r7, #12]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fa22 	bl	8008272 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	88db      	ldrh	r3, [r3, #6]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d104      	bne.n	8007e40 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa79 	bl	800832e <USBD_CtlSendStatus>
 8007e3c:	e000      	b.n	8007e40 <USBD_GetDescriptor+0x2c8>
    return;
 8007e3e:	bf00      	nop
    }
  }
}
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop

08007e48 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	889b      	ldrh	r3, [r3, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d130      	bne.n	8007ebc <USBD_SetAddress+0x74>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	88db      	ldrh	r3, [r3, #6]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d12c      	bne.n	8007ebc <USBD_SetAddress+0x74>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	885b      	ldrh	r3, [r3, #2]
 8007e66:	2b7f      	cmp	r3, #127	; 0x7f
 8007e68:	d828      	bhi.n	8007ebc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	885b      	ldrh	r3, [r3, #2]
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d104      	bne.n	8007e8a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f98b 	bl	800819e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e88:	e01d      	b.n	8007ec6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7bfa      	ldrb	r2, [r7, #15]
 8007e8e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fda6 	bl	80089e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fa46 	bl	800832e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d004      	beq.n	8007eb2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb0:	e009      	b.n	8007ec6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eba:	e004      	b.n	8007ec6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f96d 	bl	800819e <USBD_CtlError>
  }
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
	...

08007ed0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	885b      	ldrh	r3, [r3, #2]
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	4b41      	ldr	r3, [pc, #260]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007ee2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ee4:	4b40      	ldr	r3, [pc, #256]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d904      	bls.n	8007ef6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f955 	bl	800819e <USBD_CtlError>
 8007ef4:	e075      	b.n	8007fe2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efc:	2b02      	cmp	r3, #2
 8007efe:	d002      	beq.n	8007f06 <USBD_SetConfig+0x36>
 8007f00:	2b03      	cmp	r3, #3
 8007f02:	d023      	beq.n	8007f4c <USBD_SetConfig+0x7c>
 8007f04:	e062      	b.n	8007fcc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007f06:	4b38      	ldr	r3, [pc, #224]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d01a      	beq.n	8007f44 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007f0e:	4b36      	ldr	r3, [pc, #216]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2203      	movs	r2, #3
 8007f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f20:	4b31      	ldr	r3, [pc, #196]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7ff f9e8 	bl	80072fc <USBD_SetClassConfig>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d104      	bne.n	8007f3c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f932 	bl	800819e <USBD_CtlError>
            return;
 8007f3a:	e052      	b.n	8007fe2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f9f6 	bl	800832e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f42:	e04e      	b.n	8007fe2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f9f2 	bl	800832e <USBD_CtlSendStatus>
        break;
 8007f4a:	e04a      	b.n	8007fe2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007f4c:	4b26      	ldr	r3, [pc, #152]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d112      	bne.n	8007f7a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007f5c:	4b22      	ldr	r3, [pc, #136]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	461a      	mov	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007f66:	4b20      	ldr	r3, [pc, #128]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff f9e4 	bl	800733a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f9db 	bl	800832e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f78:	e033      	b.n	8007fe2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f7a:	4b1b      	ldr	r3, [pc, #108]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d01d      	beq.n	8007fc4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff f9d2 	bl	800733a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f96:	4b14      	ldr	r3, [pc, #80]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007fa0:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7ff f9a8 	bl	80072fc <USBD_SetClassConfig>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d104      	bne.n	8007fbc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f8f2 	bl	800819e <USBD_CtlError>
            return;
 8007fba:	e012      	b.n	8007fe2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f9b6 	bl	800832e <USBD_CtlSendStatus>
        break;
 8007fc2:	e00e      	b.n	8007fe2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f9b2 	bl	800832e <USBD_CtlSendStatus>
        break;
 8007fca:	e00a      	b.n	8007fe2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007fcc:	6839      	ldr	r1, [r7, #0]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f8e5 	bl	800819e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007fd4:	4b04      	ldr	r3, [pc, #16]	; (8007fe8 <USBD_SetConfig+0x118>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff f9ad 	bl	800733a <USBD_ClrClassConfig>
        break;
 8007fe0:	bf00      	nop
    }
  }
}
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	20000290 	.word	0x20000290

08007fec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	88db      	ldrh	r3, [r3, #6]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d004      	beq.n	8008008 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f8cc 	bl	800819e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008006:	e022      	b.n	800804e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800e:	2b02      	cmp	r3, #2
 8008010:	dc02      	bgt.n	8008018 <USBD_GetConfig+0x2c>
 8008012:	2b00      	cmp	r3, #0
 8008014:	dc03      	bgt.n	800801e <USBD_GetConfig+0x32>
 8008016:	e015      	b.n	8008044 <USBD_GetConfig+0x58>
 8008018:	2b03      	cmp	r3, #3
 800801a:	d00b      	beq.n	8008034 <USBD_GetConfig+0x48>
 800801c:	e012      	b.n	8008044 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3308      	adds	r3, #8
 8008028:	2201      	movs	r2, #1
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f920 	bl	8008272 <USBD_CtlSendData>
        break;
 8008032:	e00c      	b.n	800804e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3304      	adds	r3, #4
 8008038:	2201      	movs	r2, #1
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f918 	bl	8008272 <USBD_CtlSendData>
        break;
 8008042:	e004      	b.n	800804e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f8a9 	bl	800819e <USBD_CtlError>
        break;
 800804c:	bf00      	nop
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008066:	3b01      	subs	r3, #1
 8008068:	2b02      	cmp	r3, #2
 800806a:	d81e      	bhi.n	80080aa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	88db      	ldrh	r3, [r3, #6]
 8008070:	2b02      	cmp	r3, #2
 8008072:	d004      	beq.n	800807e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f891 	bl	800819e <USBD_CtlError>
        break;
 800807c:	e01a      	b.n	80080b4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	f043 0202 	orr.w	r2, r3, #2
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	330c      	adds	r3, #12
 800809e:	2202      	movs	r2, #2
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f8e5 	bl	8008272 <USBD_CtlSendData>
      break;
 80080a8:	e004      	b.n	80080b4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f876 	bl	800819e <USBD_CtlError>
      break;
 80080b2:	bf00      	nop
  }
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	885b      	ldrh	r3, [r3, #2]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d106      	bne.n	80080dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f929 	bl	800832e <USBD_CtlSendStatus>
  }
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f4:	3b01      	subs	r3, #1
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d80b      	bhi.n	8008112 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	885b      	ldrh	r3, [r3, #2]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d10c      	bne.n	800811c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 f90f 	bl	800832e <USBD_CtlSendStatus>
      }
      break;
 8008110:	e004      	b.n	800811c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f842 	bl	800819e <USBD_CtlError>
      break;
 800811a:	e000      	b.n	800811e <USBD_ClrFeature+0x3a>
      break;
 800811c:	bf00      	nop
  }
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781a      	ldrb	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	785a      	ldrb	r2, [r3, #1]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	3302      	adds	r3, #2
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	b29a      	uxth	r2, r3
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	3303      	adds	r3, #3
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	b29b      	uxth	r3, r3
 8008154:	4413      	add	r3, r2
 8008156:	b29a      	uxth	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	3304      	adds	r3, #4
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	b29a      	uxth	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	3305      	adds	r3, #5
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	b29b      	uxth	r3, r3
 800816c:	021b      	lsls	r3, r3, #8
 800816e:	b29b      	uxth	r3, r3
 8008170:	4413      	add	r3, r2
 8008172:	b29a      	uxth	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	3306      	adds	r3, #6
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	b29a      	uxth	r2, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	3307      	adds	r3, #7
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	b29b      	uxth	r3, r3
 8008188:	021b      	lsls	r3, r3, #8
 800818a:	b29b      	uxth	r3, r3
 800818c:	4413      	add	r3, r2
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	80da      	strh	r2, [r3, #6]

}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	bc80      	pop	{r7}
 800819c:	4770      	bx	lr

0800819e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80081a8:	2180      	movs	r1, #128	; 0x80
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fbb2 	bl	8008914 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80081b0:	2100      	movs	r1, #0
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fbae 	bl	8008914 <USBD_LL_StallEP>
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081cc:	2300      	movs	r3, #0
 80081ce:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d032      	beq.n	800823c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80081d6:	68f8      	ldr	r0, [r7, #12]
 80081d8:	f000 f834 	bl	8008244 <USBD_GetLen>
 80081dc:	4603      	mov	r3, r0
 80081de:	3301      	adds	r3, #1
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80081ea:	7dfb      	ldrb	r3, [r7, #23]
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	75fa      	strb	r2, [r7, #23]
 80081f0:	461a      	mov	r2, r3
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4413      	add	r3, r2
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	7812      	ldrb	r2, [r2, #0]
 80081fa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80081fc:	7dfb      	ldrb	r3, [r7, #23]
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	75fa      	strb	r2, [r7, #23]
 8008202:	461a      	mov	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4413      	add	r3, r2
 8008208:	2203      	movs	r2, #3
 800820a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800820c:	e012      	b.n	8008234 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	60fa      	str	r2, [r7, #12]
 8008214:	7dfa      	ldrb	r2, [r7, #23]
 8008216:	1c51      	adds	r1, r2, #1
 8008218:	75f9      	strb	r1, [r7, #23]
 800821a:	4611      	mov	r1, r2
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	440a      	add	r2, r1
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	75fa      	strb	r2, [r7, #23]
 800822a:	461a      	mov	r2, r3
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4413      	add	r3, r2
 8008230:	2200      	movs	r2, #0
 8008232:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e8      	bne.n	800820e <USBD_GetString+0x4e>
    }
  }
}
 800823c:	bf00      	nop
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008244:	b480      	push	{r7}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008250:	e005      	b.n	800825e <USBD_GetLen+0x1a>
  {
    len++;
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	3301      	adds	r3, #1
 8008256:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	3301      	adds	r3, #1
 800825c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1f5      	bne.n	8008252 <USBD_GetLen+0xe>
  }

  return len;
 8008266:	7bfb      	ldrb	r3, [r7, #15]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	bc80      	pop	{r7}
 8008270:	4770      	bx	lr

08008272 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	4613      	mov	r3, r2
 800827e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2202      	movs	r2, #2
 8008284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008288:	88fa      	ldrh	r2, [r7, #6]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008294:	88fb      	ldrh	r3, [r7, #6]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	2100      	movs	r1, #0
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 fbc3 	bl	8008a26 <USBD_LL_Transmit>

  return USBD_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	4613      	mov	r3, r2
 80082b6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082b8:	88fb      	ldrh	r3, [r7, #6]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	2100      	movs	r1, #0
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 fbb1 	bl	8008a26 <USBD_LL_Transmit>

  return USBD_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	4613      	mov	r3, r2
 80082da:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2203      	movs	r2, #3
 80082e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082e4:	88fa      	ldrh	r2, [r7, #6]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80082ec:	88fa      	ldrh	r2, [r7, #6]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082f4:	88fb      	ldrh	r3, [r7, #6]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	2100      	movs	r1, #0
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f000 fbb6 	bl	8008a6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	4613      	mov	r3, r2
 8008316:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	2100      	movs	r1, #0
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 fba4 	bl	8008a6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2204      	movs	r2, #4
 800833a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800833e:	2300      	movs	r3, #0
 8008340:	2200      	movs	r2, #0
 8008342:	2100      	movs	r1, #0
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fb6e 	bl	8008a26 <USBD_LL_Transmit>

  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2205      	movs	r2, #5
 8008360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008364:	2300      	movs	r3, #0
 8008366:	2200      	movs	r2, #0
 8008368:	2100      	movs	r1, #0
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fb7e 	bl	8008a6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008380:	2200      	movs	r2, #0
 8008382:	4912      	ldr	r1, [pc, #72]	; (80083cc <MX_USB_DEVICE_Init+0x50>)
 8008384:	4812      	ldr	r0, [pc, #72]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 8008386:	f7fe ff45 	bl	8007214 <USBD_Init>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008390:	f7f8 fa7c 	bl	800088c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008394:	490f      	ldr	r1, [pc, #60]	; (80083d4 <MX_USB_DEVICE_Init+0x58>)
 8008396:	480e      	ldr	r0, [pc, #56]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 8008398:	f7fe ff74 	bl	8007284 <USBD_RegisterClass>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083a2:	f7f8 fa73 	bl	800088c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80083a6:	490c      	ldr	r1, [pc, #48]	; (80083d8 <MX_USB_DEVICE_Init+0x5c>)
 80083a8:	4809      	ldr	r0, [pc, #36]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 80083aa:	f7fe ff1d 	bl	80071e8 <USBD_CUSTOM_HID_RegisterInterface>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083b4:	f7f8 fa6a 	bl	800088c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083b8:	4805      	ldr	r0, [pc, #20]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 80083ba:	f7fe ff89 	bl	80072d0 <USBD_Start>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083c4:	f7f8 fa62 	bl	800088c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083c8:	bf00      	nop
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20000124 	.word	0x20000124
 80083d0:	20000294 	.word	0x20000294
 80083d4:	2000000c 	.word	0x2000000c
 80083d8:	20000114 	.word	0x20000114

080083dc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bc80      	pop	{r7}
 80083e8:	4770      	bx	lr

080083ea <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80083ea:	b480      	push	{r7}
 80083ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80083ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc80      	pop	{r7}
 80083f6:	4770      	bx	lr

080083f8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	460a      	mov	r2, r1
 8008402:	71fb      	strb	r3, [r7, #7]
 8008404:	4613      	mov	r3, r2
 8008406:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008408:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr

08008414 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	6039      	str	r1, [r7, #0]
 800841e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2212      	movs	r2, #18
 8008424:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008426:	4b03      	ldr	r3, [pc, #12]	; (8008434 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	bc80      	pop	{r7}
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20000140 	.word	0x20000140

08008438 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	2204      	movs	r2, #4
 8008448:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800844a:	4b03      	ldr	r3, [pc, #12]	; (8008458 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	bc80      	pop	{r7}
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	20000154 	.word	0x20000154

0800845c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	6039      	str	r1, [r7, #0]
 8008466:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008468:	79fb      	ldrb	r3, [r7, #7]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d105      	bne.n	800847a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	4907      	ldr	r1, [pc, #28]	; (8008490 <USBD_FS_ProductStrDescriptor+0x34>)
 8008472:	4808      	ldr	r0, [pc, #32]	; (8008494 <USBD_FS_ProductStrDescriptor+0x38>)
 8008474:	f7ff fea4 	bl	80081c0 <USBD_GetString>
 8008478:	e004      	b.n	8008484 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	4904      	ldr	r1, [pc, #16]	; (8008490 <USBD_FS_ProductStrDescriptor+0x34>)
 800847e:	4805      	ldr	r0, [pc, #20]	; (8008494 <USBD_FS_ProductStrDescriptor+0x38>)
 8008480:	f7ff fe9e 	bl	80081c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008484:	4b02      	ldr	r3, [pc, #8]	; (8008490 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008486:	4618      	mov	r0, r3
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20000558 	.word	0x20000558
 8008494:	08009c00 	.word	0x08009c00

08008498 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	4603      	mov	r3, r0
 80084a0:	6039      	str	r1, [r7, #0]
 80084a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	4904      	ldr	r1, [pc, #16]	; (80084b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80084a8:	4804      	ldr	r0, [pc, #16]	; (80084bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80084aa:	f7ff fe89 	bl	80081c0 <USBD_GetString>
  return USBD_StrDesc;
 80084ae:	4b02      	ldr	r3, [pc, #8]	; (80084b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20000558 	.word	0x20000558
 80084bc:	08009c1c 	.word	0x08009c1c

080084c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	221a      	movs	r2, #26
 80084d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084d2:	f000 f843 	bl	800855c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084d6:	4b02      	ldr	r3, [pc, #8]	; (80084e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20000158 	.word	0x20000158

080084e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	4603      	mov	r3, r0
 80084ec:	6039      	str	r1, [r7, #0]
 80084ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d105      	bne.n	8008502 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	4907      	ldr	r1, [pc, #28]	; (8008518 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084fa:	4808      	ldr	r0, [pc, #32]	; (800851c <USBD_FS_ConfigStrDescriptor+0x38>)
 80084fc:	f7ff fe60 	bl	80081c0 <USBD_GetString>
 8008500:	e004      	b.n	800850c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	4904      	ldr	r1, [pc, #16]	; (8008518 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008506:	4805      	ldr	r0, [pc, #20]	; (800851c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008508:	f7ff fe5a 	bl	80081c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800850c:	4b02      	ldr	r3, [pc, #8]	; (8008518 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	20000558 	.word	0x20000558
 800851c:	08009c24 	.word	0x08009c24

08008520 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	6039      	str	r1, [r7, #0]
 800852a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800852c:	79fb      	ldrb	r3, [r7, #7]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d105      	bne.n	800853e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	4907      	ldr	r1, [pc, #28]	; (8008554 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008536:	4808      	ldr	r0, [pc, #32]	; (8008558 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008538:	f7ff fe42 	bl	80081c0 <USBD_GetString>
 800853c:	e004      	b.n	8008548 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	4904      	ldr	r1, [pc, #16]	; (8008554 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008542:	4805      	ldr	r0, [pc, #20]	; (8008558 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008544:	f7ff fe3c 	bl	80081c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008548:	4b02      	ldr	r3, [pc, #8]	; (8008554 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20000558 	.word	0x20000558
 8008558:	08009c38 	.word	0x08009c38

0800855c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008562:	4b0f      	ldr	r3, [pc, #60]	; (80085a0 <Get_SerialNum+0x44>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008568:	4b0e      	ldr	r3, [pc, #56]	; (80085a4 <Get_SerialNum+0x48>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800856e:	4b0e      	ldr	r3, [pc, #56]	; (80085a8 <Get_SerialNum+0x4c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4413      	add	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d009      	beq.n	8008596 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008582:	2208      	movs	r2, #8
 8008584:	4909      	ldr	r1, [pc, #36]	; (80085ac <Get_SerialNum+0x50>)
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 f814 	bl	80085b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800858c:	2204      	movs	r2, #4
 800858e:	4908      	ldr	r1, [pc, #32]	; (80085b0 <Get_SerialNum+0x54>)
 8008590:	68b8      	ldr	r0, [r7, #8]
 8008592:	f000 f80f 	bl	80085b4 <IntToUnicode>
  }
}
 8008596:	bf00      	nop
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	1ffff7e8 	.word	0x1ffff7e8
 80085a4:	1ffff7ec 	.word	0x1ffff7ec
 80085a8:	1ffff7f0 	.word	0x1ffff7f0
 80085ac:	2000015a 	.word	0x2000015a
 80085b0:	2000016a 	.word	0x2000016a

080085b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	4613      	mov	r3, r2
 80085c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085c2:	2300      	movs	r3, #0
 80085c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085c6:	2300      	movs	r3, #0
 80085c8:	75fb      	strb	r3, [r7, #23]
 80085ca:	e027      	b.n	800861c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	0f1b      	lsrs	r3, r3, #28
 80085d0:	2b09      	cmp	r3, #9
 80085d2:	d80b      	bhi.n	80085ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	0f1b      	lsrs	r3, r3, #28
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	005b      	lsls	r3, r3, #1
 80085de:	4619      	mov	r1, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	440b      	add	r3, r1
 80085e4:	3230      	adds	r2, #48	; 0x30
 80085e6:	b2d2      	uxtb	r2, r2
 80085e8:	701a      	strb	r2, [r3, #0]
 80085ea:	e00a      	b.n	8008602 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	0f1b      	lsrs	r3, r3, #28
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	4619      	mov	r1, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	440b      	add	r3, r1
 80085fc:	3237      	adds	r2, #55	; 0x37
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	011b      	lsls	r3, r3, #4
 8008606:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008608:	7dfb      	ldrb	r3, [r7, #23]
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	3301      	adds	r3, #1
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	4413      	add	r3, r2
 8008612:	2200      	movs	r2, #0
 8008614:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	3301      	adds	r3, #1
 800861a:	75fb      	strb	r3, [r7, #23]
 800861c:	7dfa      	ldrb	r2, [r7, #23]
 800861e:	79fb      	ldrb	r3, [r7, #7]
 8008620:	429a      	cmp	r2, r3
 8008622:	d3d3      	bcc.n	80085cc <IntToUnicode+0x18>
  }
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr

08008630 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a0d      	ldr	r2, [pc, #52]	; (8008674 <HAL_PCD_MspInit+0x44>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d113      	bne.n	800866a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008642:	4b0d      	ldr	r3, [pc, #52]	; (8008678 <HAL_PCD_MspInit+0x48>)
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	4a0c      	ldr	r2, [pc, #48]	; (8008678 <HAL_PCD_MspInit+0x48>)
 8008648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800864c:	61d3      	str	r3, [r2, #28]
 800864e:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <HAL_PCD_MspInit+0x48>)
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800865a:	2200      	movs	r2, #0
 800865c:	2100      	movs	r1, #0
 800865e:	2014      	movs	r0, #20
 8008660:	f7f9 f8e3 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008664:	2014      	movs	r0, #20
 8008666:	f7f9 f8fc 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	40005c00 	.word	0x40005c00
 8008678:	40021000 	.word	0x40021000

0800867c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f7fe fe64 	bl	8007360 <USBD_LL_SetupStage>
}
 8008698:	bf00      	nop
 800869a:	3708      	adds	r7, #8
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80086b2:	78fa      	ldrb	r2, [r7, #3]
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	440b      	add	r3, r1
 80086c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	4619      	mov	r1, r3
 80086ca:	f7fe fe96 	bl	80073fa <USBD_LL_DataOutStage>
}
 80086ce:	bf00      	nop
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b082      	sub	sp, #8
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
 80086de:	460b      	mov	r3, r1
 80086e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80086e8:	78fa      	ldrb	r2, [r7, #3]
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	4613      	mov	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	00db      	lsls	r3, r3, #3
 80086f4:	440b      	add	r3, r1
 80086f6:	333c      	adds	r3, #60	; 0x3c
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	78fb      	ldrb	r3, [r7, #3]
 80086fc:	4619      	mov	r1, r3
 80086fe:	f7fe feed 	bl	80074dc <USBD_LL_DataInStage>
}
 8008702:	bf00      	nop
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}

0800870a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008718:	4618      	mov	r0, r3
 800871a:	f7fe fffd 	bl	8007718 <USBD_LL_SOF>
}
 800871e:	bf00      	nop
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800872e:	2301      	movs	r3, #1
 8008730:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d001      	beq.n	800873e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800873a:	f7f8 f8a7 	bl	800088c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008744:	7bfa      	ldrb	r2, [r7, #15]
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f7fe ffad 	bl	80076a8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008754:	4618      	mov	r0, r3
 8008756:	f7fe ff66 	bl	8007626 <USBD_LL_Reset>
}
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
	...

08008764 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008772:	4618      	mov	r0, r3
 8008774:	f7fe ffa7 	bl	80076c6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d005      	beq.n	800878c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008780:	4b04      	ldr	r3, [pc, #16]	; (8008794 <HAL_PCD_SuspendCallback+0x30>)
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	4a03      	ldr	r2, [pc, #12]	; (8008794 <HAL_PCD_SuspendCallback+0x30>)
 8008786:	f043 0306 	orr.w	r3, r3, #6
 800878a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	e000ed00 	.word	0xe000ed00

08008798 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe ffa1 	bl	80076ee <USBD_LL_Resume>
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80087bc:	4a23      	ldr	r2, [pc, #140]	; (800884c <USBD_LL_Init+0x98>)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a21      	ldr	r2, [pc, #132]	; (800884c <USBD_LL_Init+0x98>)
 80087c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087cc:	4b1f      	ldr	r3, [pc, #124]	; (800884c <USBD_LL_Init+0x98>)
 80087ce:	4a20      	ldr	r2, [pc, #128]	; (8008850 <USBD_LL_Init+0x9c>)
 80087d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087d2:	4b1e      	ldr	r3, [pc, #120]	; (800884c <USBD_LL_Init+0x98>)
 80087d4:	2208      	movs	r2, #8
 80087d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087d8:	4b1c      	ldr	r3, [pc, #112]	; (800884c <USBD_LL_Init+0x98>)
 80087da:	2202      	movs	r2, #2
 80087dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087de:	4b1b      	ldr	r3, [pc, #108]	; (800884c <USBD_LL_Init+0x98>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80087e4:	4b19      	ldr	r3, [pc, #100]	; (800884c <USBD_LL_Init+0x98>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087ea:	4b18      	ldr	r3, [pc, #96]	; (800884c <USBD_LL_Init+0x98>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087f0:	4816      	ldr	r0, [pc, #88]	; (800884c <USBD_LL_Init+0x98>)
 80087f2:	f7f9 f9ed 	bl	8001bd0 <HAL_PCD_Init>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087fc:	f7f8 f846 	bl	800088c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008806:	2318      	movs	r3, #24
 8008808:	2200      	movs	r2, #0
 800880a:	2100      	movs	r1, #0
 800880c:	f7fa fe4a 	bl	80034a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008816:	2358      	movs	r3, #88	; 0x58
 8008818:	2200      	movs	r2, #0
 800881a:	2180      	movs	r1, #128	; 0x80
 800881c:	f7fa fe42 	bl	80034a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008826:	2398      	movs	r3, #152	; 0x98
 8008828:	2200      	movs	r2, #0
 800882a:	2181      	movs	r1, #129	; 0x81
 800882c:	f7fa fe3a 	bl	80034a4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008836:	23d8      	movs	r3, #216	; 0xd8
 8008838:	2200      	movs	r2, #0
 800883a:	2101      	movs	r1, #1
 800883c:	f7fa fe32 	bl	80034a4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000758 	.word	0x20000758
 8008850:	40005c00 	.word	0x40005c00

08008854 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800886a:	4618      	mov	r0, r3
 800886c:	f7f9 fabb 	bl	8001de6 <HAL_PCD_Start>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	4618      	mov	r0, r3
 8008878:	f000 f93c 	bl	8008af4 <USBD_Get_USB_Status>
 800887c:	4603      	mov	r3, r0
 800887e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008880:	7bbb      	ldrb	r3, [r7, #14]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3710      	adds	r7, #16
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	4608      	mov	r0, r1
 8008894:	4611      	mov	r1, r2
 8008896:	461a      	mov	r2, r3
 8008898:	4603      	mov	r3, r0
 800889a:	70fb      	strb	r3, [r7, #3]
 800889c:	460b      	mov	r3, r1
 800889e:	70bb      	strb	r3, [r7, #2]
 80088a0:	4613      	mov	r3, r2
 80088a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088b2:	78bb      	ldrb	r3, [r7, #2]
 80088b4:	883a      	ldrh	r2, [r7, #0]
 80088b6:	78f9      	ldrb	r1, [r7, #3]
 80088b8:	f7f9 fc33 	bl	8002122 <HAL_PCD_EP_Open>
 80088bc:	4603      	mov	r3, r0
 80088be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 f916 	bl	8008af4 <USBD_Get_USB_Status>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088f0:	78fa      	ldrb	r2, [r7, #3]
 80088f2:	4611      	mov	r1, r2
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7f9 fc7a 	bl	80021ee <HAL_PCD_EP_Close>
 80088fa:	4603      	mov	r3, r0
 80088fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	4618      	mov	r0, r3
 8008902:	f000 f8f7 	bl	8008af4 <USBD_Get_USB_Status>
 8008906:	4603      	mov	r3, r0
 8008908:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800890a:	7bbb      	ldrb	r3, [r7, #14]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	4611      	mov	r1, r2
 8008932:	4618      	mov	r0, r3
 8008934:	f7f9 fd23 	bl	800237e <HAL_PCD_EP_SetStall>
 8008938:	4603      	mov	r3, r0
 800893a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800893c:	7bfb      	ldrb	r3, [r7, #15]
 800893e:	4618      	mov	r0, r3
 8008940:	f000 f8d8 	bl	8008af4 <USBD_Get_USB_Status>
 8008944:	4603      	mov	r3, r0
 8008946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008948:	7bbb      	ldrb	r3, [r7, #14]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	460b      	mov	r3, r1
 800895c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800896c:	78fa      	ldrb	r2, [r7, #3]
 800896e:	4611      	mov	r1, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f7f9 fd64 	bl	800243e <HAL_PCD_EP_ClrStall>
 8008976:	4603      	mov	r3, r0
 8008978:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	4618      	mov	r0, r3
 800897e:	f000 f8b9 	bl	8008af4 <USBD_Get_USB_Status>
 8008982:	4603      	mov	r3, r0
 8008984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008986:	7bbb      	ldrb	r3, [r7, #14]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	da0c      	bge.n	80089c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089ac:	78fb      	ldrb	r3, [r7, #3]
 80089ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b2:	68f9      	ldr	r1, [r7, #12]
 80089b4:	1c5a      	adds	r2, r3, #1
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	00db      	lsls	r3, r3, #3
 80089be:	440b      	add	r3, r1
 80089c0:	3302      	adds	r3, #2
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	e00b      	b.n	80089de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089cc:	68f9      	ldr	r1, [r7, #12]
 80089ce:	4613      	mov	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	440b      	add	r3, r1
 80089d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bc80      	pop	{r7}
 80089e6:	4770      	bx	lr

080089e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a02:	78fa      	ldrb	r2, [r7, #3]
 8008a04:	4611      	mov	r1, r2
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7f9 fb66 	bl	80020d8 <HAL_PCD_SetAddress>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 f86e 	bl	8008af4 <USBD_Get_USB_Status>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b086      	sub	sp, #24
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	461a      	mov	r2, r3
 8008a32:	460b      	mov	r3, r1
 8008a34:	72fb      	strb	r3, [r7, #11]
 8008a36:	4613      	mov	r3, r2
 8008a38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a48:	893b      	ldrh	r3, [r7, #8]
 8008a4a:	7af9      	ldrb	r1, [r7, #11]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	f7f9 fc53 	bl	80022f8 <HAL_PCD_EP_Transmit>
 8008a52:	4603      	mov	r3, r0
 8008a54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a56:	7dfb      	ldrb	r3, [r7, #23]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 f84b 	bl	8008af4 <USBD_Get_USB_Status>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a62:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	607a      	str	r2, [r7, #4]
 8008a76:	461a      	mov	r2, r3
 8008a78:	460b      	mov	r3, r1
 8008a7a:	72fb      	strb	r3, [r7, #11]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a8e:	893b      	ldrh	r3, [r7, #8]
 8008a90:	7af9      	ldrb	r1, [r7, #11]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	f7f9 fbf3 	bl	800227e <HAL_PCD_EP_Receive>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 f828 	bl	8008af4 <USBD_Get_USB_Status>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aa8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <USBD_static_malloc+0x14>)
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bc80      	pop	{r7}
 8008ac6:	4770      	bx	lr
 8008ac8:	20000a44 	.word	0x20000a44

08008acc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]

}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bc80      	pop	{r7}
 8008adc:	4770      	bx	lr

08008ade <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b083      	sub	sp, #12
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bc80      	pop	{r7}
 8008af2:	4770      	bx	lr

08008af4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	4603      	mov	r3, r0
 8008afc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b02:	79fb      	ldrb	r3, [r7, #7]
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d817      	bhi.n	8008b38 <USBD_Get_USB_Status+0x44>
 8008b08:	a201      	add	r2, pc, #4	; (adr r2, 8008b10 <USBD_Get_USB_Status+0x1c>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b21 	.word	0x08008b21
 8008b14:	08008b27 	.word	0x08008b27
 8008b18:	08008b2d 	.word	0x08008b2d
 8008b1c:	08008b33 	.word	0x08008b33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73fb      	strb	r3, [r7, #15]
    break;
 8008b24:	e00b      	b.n	8008b3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b26:	2302      	movs	r3, #2
 8008b28:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2a:	e008      	b.n	8008b3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b30:	e005      	b.n	8008b3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b32:	2302      	movs	r3, #2
 8008b34:	73fb      	strb	r3, [r7, #15]
    break;
 8008b36:	e002      	b.n	8008b3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b38:	2302      	movs	r3, #2
 8008b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3c:	bf00      	nop
  }
  return usb_status;
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop

08008b4c <__errno>:
 8008b4c:	4b01      	ldr	r3, [pc, #4]	; (8008b54 <__errno+0x8>)
 8008b4e:	6818      	ldr	r0, [r3, #0]
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	20000174 	.word	0x20000174

08008b58 <__libc_init_array>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	2600      	movs	r6, #0
 8008b5c:	4d0c      	ldr	r5, [pc, #48]	; (8008b90 <__libc_init_array+0x38>)
 8008b5e:	4c0d      	ldr	r4, [pc, #52]	; (8008b94 <__libc_init_array+0x3c>)
 8008b60:	1b64      	subs	r4, r4, r5
 8008b62:	10a4      	asrs	r4, r4, #2
 8008b64:	42a6      	cmp	r6, r4
 8008b66:	d109      	bne.n	8008b7c <__libc_init_array+0x24>
 8008b68:	f001 f812 	bl	8009b90 <_init>
 8008b6c:	2600      	movs	r6, #0
 8008b6e:	4d0a      	ldr	r5, [pc, #40]	; (8008b98 <__libc_init_array+0x40>)
 8008b70:	4c0a      	ldr	r4, [pc, #40]	; (8008b9c <__libc_init_array+0x44>)
 8008b72:	1b64      	subs	r4, r4, r5
 8008b74:	10a4      	asrs	r4, r4, #2
 8008b76:	42a6      	cmp	r6, r4
 8008b78:	d105      	bne.n	8008b86 <__libc_init_array+0x2e>
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
 8008b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b80:	4798      	blx	r3
 8008b82:	3601      	adds	r6, #1
 8008b84:	e7ee      	b.n	8008b64 <__libc_init_array+0xc>
 8008b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b8a:	4798      	blx	r3
 8008b8c:	3601      	adds	r6, #1
 8008b8e:	e7f2      	b.n	8008b76 <__libc_init_array+0x1e>
 8008b90:	08009d00 	.word	0x08009d00
 8008b94:	08009d00 	.word	0x08009d00
 8008b98:	08009d00 	.word	0x08009d00
 8008b9c:	08009d04 	.word	0x08009d04

08008ba0 <memset>:
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	4402      	add	r2, r0
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d100      	bne.n	8008baa <memset+0xa>
 8008ba8:	4770      	bx	lr
 8008baa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bae:	e7f9      	b.n	8008ba4 <memset+0x4>

08008bb0 <iprintf>:
 8008bb0:	b40f      	push	{r0, r1, r2, r3}
 8008bb2:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <iprintf+0x2c>)
 8008bb4:	b513      	push	{r0, r1, r4, lr}
 8008bb6:	681c      	ldr	r4, [r3, #0]
 8008bb8:	b124      	cbz	r4, 8008bc4 <iprintf+0x14>
 8008bba:	69a3      	ldr	r3, [r4, #24]
 8008bbc:	b913      	cbnz	r3, 8008bc4 <iprintf+0x14>
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f000 f87a 	bl	8008cb8 <__sinit>
 8008bc4:	ab05      	add	r3, sp, #20
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	9a04      	ldr	r2, [sp, #16]
 8008bca:	68a1      	ldr	r1, [r4, #8]
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	f000 f9cf 	bl	8008f70 <_vfiprintf_r>
 8008bd2:	b002      	add	sp, #8
 8008bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bd8:	b004      	add	sp, #16
 8008bda:	4770      	bx	lr
 8008bdc:	20000174 	.word	0x20000174

08008be0 <putchar>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4b08      	ldr	r3, [pc, #32]	; (8008c04 <putchar+0x24>)
 8008be4:	4605      	mov	r5, r0
 8008be6:	681c      	ldr	r4, [r3, #0]
 8008be8:	b124      	cbz	r4, 8008bf4 <putchar+0x14>
 8008bea:	69a3      	ldr	r3, [r4, #24]
 8008bec:	b913      	cbnz	r3, 8008bf4 <putchar+0x14>
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 f862 	bl	8008cb8 <__sinit>
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	68a2      	ldr	r2, [r4, #8]
 8008bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bfe:	f000 bc7d 	b.w	80094fc <_putc_r>
 8008c02:	bf00      	nop
 8008c04:	20000174 	.word	0x20000174

08008c08 <std>:
 8008c08:	2300      	movs	r3, #0
 8008c0a:	b510      	push	{r4, lr}
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c16:	6083      	str	r3, [r0, #8]
 8008c18:	8181      	strh	r1, [r0, #12]
 8008c1a:	6643      	str	r3, [r0, #100]	; 0x64
 8008c1c:	81c2      	strh	r2, [r0, #14]
 8008c1e:	6183      	str	r3, [r0, #24]
 8008c20:	4619      	mov	r1, r3
 8008c22:	2208      	movs	r2, #8
 8008c24:	305c      	adds	r0, #92	; 0x5c
 8008c26:	f7ff ffbb 	bl	8008ba0 <memset>
 8008c2a:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <std+0x38>)
 8008c2c:	6224      	str	r4, [r4, #32]
 8008c2e:	6263      	str	r3, [r4, #36]	; 0x24
 8008c30:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <std+0x3c>)
 8008c32:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c34:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <std+0x40>)
 8008c36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c38:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <std+0x44>)
 8008c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c3c:	bd10      	pop	{r4, pc}
 8008c3e:	bf00      	nop
 8008c40:	080095ad 	.word	0x080095ad
 8008c44:	080095cf 	.word	0x080095cf
 8008c48:	08009607 	.word	0x08009607
 8008c4c:	0800962b 	.word	0x0800962b

08008c50 <_cleanup_r>:
 8008c50:	4901      	ldr	r1, [pc, #4]	; (8008c58 <_cleanup_r+0x8>)
 8008c52:	f000 b8af 	b.w	8008db4 <_fwalk_reent>
 8008c56:	bf00      	nop
 8008c58:	080098fd 	.word	0x080098fd

08008c5c <__sfmoreglue>:
 8008c5c:	2268      	movs	r2, #104	; 0x68
 8008c5e:	b570      	push	{r4, r5, r6, lr}
 8008c60:	1e4d      	subs	r5, r1, #1
 8008c62:	4355      	muls	r5, r2
 8008c64:	460e      	mov	r6, r1
 8008c66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c6a:	f000 f8e5 	bl	8008e38 <_malloc_r>
 8008c6e:	4604      	mov	r4, r0
 8008c70:	b140      	cbz	r0, 8008c84 <__sfmoreglue+0x28>
 8008c72:	2100      	movs	r1, #0
 8008c74:	e9c0 1600 	strd	r1, r6, [r0]
 8008c78:	300c      	adds	r0, #12
 8008c7a:	60a0      	str	r0, [r4, #8]
 8008c7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c80:	f7ff ff8e 	bl	8008ba0 <memset>
 8008c84:	4620      	mov	r0, r4
 8008c86:	bd70      	pop	{r4, r5, r6, pc}

08008c88 <__sfp_lock_acquire>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__sfp_lock_acquire+0x8>)
 8008c8a:	f000 b8b3 	b.w	8008df4 <__retarget_lock_acquire_recursive>
 8008c8e:	bf00      	nop
 8008c90:	20000a9d 	.word	0x20000a9d

08008c94 <__sfp_lock_release>:
 8008c94:	4801      	ldr	r0, [pc, #4]	; (8008c9c <__sfp_lock_release+0x8>)
 8008c96:	f000 b8ae 	b.w	8008df6 <__retarget_lock_release_recursive>
 8008c9a:	bf00      	nop
 8008c9c:	20000a9d 	.word	0x20000a9d

08008ca0 <__sinit_lock_acquire>:
 8008ca0:	4801      	ldr	r0, [pc, #4]	; (8008ca8 <__sinit_lock_acquire+0x8>)
 8008ca2:	f000 b8a7 	b.w	8008df4 <__retarget_lock_acquire_recursive>
 8008ca6:	bf00      	nop
 8008ca8:	20000a9e 	.word	0x20000a9e

08008cac <__sinit_lock_release>:
 8008cac:	4801      	ldr	r0, [pc, #4]	; (8008cb4 <__sinit_lock_release+0x8>)
 8008cae:	f000 b8a2 	b.w	8008df6 <__retarget_lock_release_recursive>
 8008cb2:	bf00      	nop
 8008cb4:	20000a9e 	.word	0x20000a9e

08008cb8 <__sinit>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	4604      	mov	r4, r0
 8008cbc:	f7ff fff0 	bl	8008ca0 <__sinit_lock_acquire>
 8008cc0:	69a3      	ldr	r3, [r4, #24]
 8008cc2:	b11b      	cbz	r3, 8008ccc <__sinit+0x14>
 8008cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc8:	f7ff bff0 	b.w	8008cac <__sinit_lock_release>
 8008ccc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008cd0:	6523      	str	r3, [r4, #80]	; 0x50
 8008cd2:	4b13      	ldr	r3, [pc, #76]	; (8008d20 <__sinit+0x68>)
 8008cd4:	4a13      	ldr	r2, [pc, #76]	; (8008d24 <__sinit+0x6c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008cda:	42a3      	cmp	r3, r4
 8008cdc:	bf08      	it	eq
 8008cde:	2301      	moveq	r3, #1
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	bf08      	it	eq
 8008ce4:	61a3      	streq	r3, [r4, #24]
 8008ce6:	f000 f81f 	bl	8008d28 <__sfp>
 8008cea:	6060      	str	r0, [r4, #4]
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 f81b 	bl	8008d28 <__sfp>
 8008cf2:	60a0      	str	r0, [r4, #8]
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 f817 	bl	8008d28 <__sfp>
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2104      	movs	r1, #4
 8008cfe:	60e0      	str	r0, [r4, #12]
 8008d00:	6860      	ldr	r0, [r4, #4]
 8008d02:	f7ff ff81 	bl	8008c08 <std>
 8008d06:	2201      	movs	r2, #1
 8008d08:	2109      	movs	r1, #9
 8008d0a:	68a0      	ldr	r0, [r4, #8]
 8008d0c:	f7ff ff7c 	bl	8008c08 <std>
 8008d10:	2202      	movs	r2, #2
 8008d12:	2112      	movs	r1, #18
 8008d14:	68e0      	ldr	r0, [r4, #12]
 8008d16:	f7ff ff77 	bl	8008c08 <std>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	61a3      	str	r3, [r4, #24]
 8008d1e:	e7d1      	b.n	8008cc4 <__sinit+0xc>
 8008d20:	08009c68 	.word	0x08009c68
 8008d24:	08008c51 	.word	0x08008c51

08008d28 <__sfp>:
 8008d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	f7ff ffac 	bl	8008c88 <__sfp_lock_acquire>
 8008d30:	4b1e      	ldr	r3, [pc, #120]	; (8008dac <__sfp+0x84>)
 8008d32:	681e      	ldr	r6, [r3, #0]
 8008d34:	69b3      	ldr	r3, [r6, #24]
 8008d36:	b913      	cbnz	r3, 8008d3e <__sfp+0x16>
 8008d38:	4630      	mov	r0, r6
 8008d3a:	f7ff ffbd 	bl	8008cb8 <__sinit>
 8008d3e:	3648      	adds	r6, #72	; 0x48
 8008d40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	d503      	bpl.n	8008d50 <__sfp+0x28>
 8008d48:	6833      	ldr	r3, [r6, #0]
 8008d4a:	b30b      	cbz	r3, 8008d90 <__sfp+0x68>
 8008d4c:	6836      	ldr	r6, [r6, #0]
 8008d4e:	e7f7      	b.n	8008d40 <__sfp+0x18>
 8008d50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d54:	b9d5      	cbnz	r5, 8008d8c <__sfp+0x64>
 8008d56:	4b16      	ldr	r3, [pc, #88]	; (8008db0 <__sfp+0x88>)
 8008d58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d5c:	60e3      	str	r3, [r4, #12]
 8008d5e:	6665      	str	r5, [r4, #100]	; 0x64
 8008d60:	f000 f847 	bl	8008df2 <__retarget_lock_init_recursive>
 8008d64:	f7ff ff96 	bl	8008c94 <__sfp_lock_release>
 8008d68:	2208      	movs	r2, #8
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d74:	6025      	str	r5, [r4, #0]
 8008d76:	61a5      	str	r5, [r4, #24]
 8008d78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d7c:	f7ff ff10 	bl	8008ba0 <memset>
 8008d80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d88:	4620      	mov	r0, r4
 8008d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d8c:	3468      	adds	r4, #104	; 0x68
 8008d8e:	e7d9      	b.n	8008d44 <__sfp+0x1c>
 8008d90:	2104      	movs	r1, #4
 8008d92:	4638      	mov	r0, r7
 8008d94:	f7ff ff62 	bl	8008c5c <__sfmoreglue>
 8008d98:	4604      	mov	r4, r0
 8008d9a:	6030      	str	r0, [r6, #0]
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d1d5      	bne.n	8008d4c <__sfp+0x24>
 8008da0:	f7ff ff78 	bl	8008c94 <__sfp_lock_release>
 8008da4:	230c      	movs	r3, #12
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	e7ee      	b.n	8008d88 <__sfp+0x60>
 8008daa:	bf00      	nop
 8008dac:	08009c68 	.word	0x08009c68
 8008db0:	ffff0001 	.word	0xffff0001

08008db4 <_fwalk_reent>:
 8008db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008db8:	4606      	mov	r6, r0
 8008dba:	4688      	mov	r8, r1
 8008dbc:	2700      	movs	r7, #0
 8008dbe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008dc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dc6:	f1b9 0901 	subs.w	r9, r9, #1
 8008dca:	d505      	bpl.n	8008dd8 <_fwalk_reent+0x24>
 8008dcc:	6824      	ldr	r4, [r4, #0]
 8008dce:	2c00      	cmp	r4, #0
 8008dd0:	d1f7      	bne.n	8008dc2 <_fwalk_reent+0xe>
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd8:	89ab      	ldrh	r3, [r5, #12]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d907      	bls.n	8008dee <_fwalk_reent+0x3a>
 8008dde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008de2:	3301      	adds	r3, #1
 8008de4:	d003      	beq.n	8008dee <_fwalk_reent+0x3a>
 8008de6:	4629      	mov	r1, r5
 8008de8:	4630      	mov	r0, r6
 8008dea:	47c0      	blx	r8
 8008dec:	4307      	orrs	r7, r0
 8008dee:	3568      	adds	r5, #104	; 0x68
 8008df0:	e7e9      	b.n	8008dc6 <_fwalk_reent+0x12>

08008df2 <__retarget_lock_init_recursive>:
 8008df2:	4770      	bx	lr

08008df4 <__retarget_lock_acquire_recursive>:
 8008df4:	4770      	bx	lr

08008df6 <__retarget_lock_release_recursive>:
 8008df6:	4770      	bx	lr

08008df8 <sbrk_aligned>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	4e0e      	ldr	r6, [pc, #56]	; (8008e34 <sbrk_aligned+0x3c>)
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	6831      	ldr	r1, [r6, #0]
 8008e00:	4605      	mov	r5, r0
 8008e02:	b911      	cbnz	r1, 8008e0a <sbrk_aligned+0x12>
 8008e04:	f000 fbc2 	bl	800958c <_sbrk_r>
 8008e08:	6030      	str	r0, [r6, #0]
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f000 fbbd 	bl	800958c <_sbrk_r>
 8008e12:	1c43      	adds	r3, r0, #1
 8008e14:	d00a      	beq.n	8008e2c <sbrk_aligned+0x34>
 8008e16:	1cc4      	adds	r4, r0, #3
 8008e18:	f024 0403 	bic.w	r4, r4, #3
 8008e1c:	42a0      	cmp	r0, r4
 8008e1e:	d007      	beq.n	8008e30 <sbrk_aligned+0x38>
 8008e20:	1a21      	subs	r1, r4, r0
 8008e22:	4628      	mov	r0, r5
 8008e24:	f000 fbb2 	bl	800958c <_sbrk_r>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d101      	bne.n	8008e30 <sbrk_aligned+0x38>
 8008e2c:	f04f 34ff 	mov.w	r4, #4294967295
 8008e30:	4620      	mov	r0, r4
 8008e32:	bd70      	pop	{r4, r5, r6, pc}
 8008e34:	20000aa4 	.word	0x20000aa4

08008e38 <_malloc_r>:
 8008e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3c:	1ccd      	adds	r5, r1, #3
 8008e3e:	f025 0503 	bic.w	r5, r5, #3
 8008e42:	3508      	adds	r5, #8
 8008e44:	2d0c      	cmp	r5, #12
 8008e46:	bf38      	it	cc
 8008e48:	250c      	movcc	r5, #12
 8008e4a:	2d00      	cmp	r5, #0
 8008e4c:	4607      	mov	r7, r0
 8008e4e:	db01      	blt.n	8008e54 <_malloc_r+0x1c>
 8008e50:	42a9      	cmp	r1, r5
 8008e52:	d905      	bls.n	8008e60 <_malloc_r+0x28>
 8008e54:	230c      	movs	r3, #12
 8008e56:	2600      	movs	r6, #0
 8008e58:	603b      	str	r3, [r7, #0]
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e60:	4e2e      	ldr	r6, [pc, #184]	; (8008f1c <_malloc_r+0xe4>)
 8008e62:	f000 fe0d 	bl	8009a80 <__malloc_lock>
 8008e66:	6833      	ldr	r3, [r6, #0]
 8008e68:	461c      	mov	r4, r3
 8008e6a:	bb34      	cbnz	r4, 8008eba <_malloc_r+0x82>
 8008e6c:	4629      	mov	r1, r5
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f7ff ffc2 	bl	8008df8 <sbrk_aligned>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	4604      	mov	r4, r0
 8008e78:	d14d      	bne.n	8008f16 <_malloc_r+0xde>
 8008e7a:	6834      	ldr	r4, [r6, #0]
 8008e7c:	4626      	mov	r6, r4
 8008e7e:	2e00      	cmp	r6, #0
 8008e80:	d140      	bne.n	8008f04 <_malloc_r+0xcc>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	4631      	mov	r1, r6
 8008e86:	4638      	mov	r0, r7
 8008e88:	eb04 0803 	add.w	r8, r4, r3
 8008e8c:	f000 fb7e 	bl	800958c <_sbrk_r>
 8008e90:	4580      	cmp	r8, r0
 8008e92:	d13a      	bne.n	8008f0a <_malloc_r+0xd2>
 8008e94:	6821      	ldr	r1, [r4, #0]
 8008e96:	3503      	adds	r5, #3
 8008e98:	1a6d      	subs	r5, r5, r1
 8008e9a:	f025 0503 	bic.w	r5, r5, #3
 8008e9e:	3508      	adds	r5, #8
 8008ea0:	2d0c      	cmp	r5, #12
 8008ea2:	bf38      	it	cc
 8008ea4:	250c      	movcc	r5, #12
 8008ea6:	4638      	mov	r0, r7
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7ff ffa5 	bl	8008df8 <sbrk_aligned>
 8008eae:	3001      	adds	r0, #1
 8008eb0:	d02b      	beq.n	8008f0a <_malloc_r+0xd2>
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	442b      	add	r3, r5
 8008eb6:	6023      	str	r3, [r4, #0]
 8008eb8:	e00e      	b.n	8008ed8 <_malloc_r+0xa0>
 8008eba:	6822      	ldr	r2, [r4, #0]
 8008ebc:	1b52      	subs	r2, r2, r5
 8008ebe:	d41e      	bmi.n	8008efe <_malloc_r+0xc6>
 8008ec0:	2a0b      	cmp	r2, #11
 8008ec2:	d916      	bls.n	8008ef2 <_malloc_r+0xba>
 8008ec4:	1961      	adds	r1, r4, r5
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	6025      	str	r5, [r4, #0]
 8008eca:	bf18      	it	ne
 8008ecc:	6059      	strne	r1, [r3, #4]
 8008ece:	6863      	ldr	r3, [r4, #4]
 8008ed0:	bf08      	it	eq
 8008ed2:	6031      	streq	r1, [r6, #0]
 8008ed4:	5162      	str	r2, [r4, r5]
 8008ed6:	604b      	str	r3, [r1, #4]
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f104 060b 	add.w	r6, r4, #11
 8008ede:	f000 fdd5 	bl	8009a8c <__malloc_unlock>
 8008ee2:	f026 0607 	bic.w	r6, r6, #7
 8008ee6:	1d23      	adds	r3, r4, #4
 8008ee8:	1af2      	subs	r2, r6, r3
 8008eea:	d0b6      	beq.n	8008e5a <_malloc_r+0x22>
 8008eec:	1b9b      	subs	r3, r3, r6
 8008eee:	50a3      	str	r3, [r4, r2]
 8008ef0:	e7b3      	b.n	8008e5a <_malloc_r+0x22>
 8008ef2:	6862      	ldr	r2, [r4, #4]
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	bf0c      	ite	eq
 8008ef8:	6032      	streq	r2, [r6, #0]
 8008efa:	605a      	strne	r2, [r3, #4]
 8008efc:	e7ec      	b.n	8008ed8 <_malloc_r+0xa0>
 8008efe:	4623      	mov	r3, r4
 8008f00:	6864      	ldr	r4, [r4, #4]
 8008f02:	e7b2      	b.n	8008e6a <_malloc_r+0x32>
 8008f04:	4634      	mov	r4, r6
 8008f06:	6876      	ldr	r6, [r6, #4]
 8008f08:	e7b9      	b.n	8008e7e <_malloc_r+0x46>
 8008f0a:	230c      	movs	r3, #12
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	603b      	str	r3, [r7, #0]
 8008f10:	f000 fdbc 	bl	8009a8c <__malloc_unlock>
 8008f14:	e7a1      	b.n	8008e5a <_malloc_r+0x22>
 8008f16:	6025      	str	r5, [r4, #0]
 8008f18:	e7de      	b.n	8008ed8 <_malloc_r+0xa0>
 8008f1a:	bf00      	nop
 8008f1c:	20000aa0 	.word	0x20000aa0

08008f20 <__sfputc_r>:
 8008f20:	6893      	ldr	r3, [r2, #8]
 8008f22:	b410      	push	{r4}
 8008f24:	3b01      	subs	r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	6093      	str	r3, [r2, #8]
 8008f2a:	da07      	bge.n	8008f3c <__sfputc_r+0x1c>
 8008f2c:	6994      	ldr	r4, [r2, #24]
 8008f2e:	42a3      	cmp	r3, r4
 8008f30:	db01      	blt.n	8008f36 <__sfputc_r+0x16>
 8008f32:	290a      	cmp	r1, #10
 8008f34:	d102      	bne.n	8008f3c <__sfputc_r+0x1c>
 8008f36:	bc10      	pop	{r4}
 8008f38:	f000 bb7c 	b.w	8009634 <__swbuf_r>
 8008f3c:	6813      	ldr	r3, [r2, #0]
 8008f3e:	1c58      	adds	r0, r3, #1
 8008f40:	6010      	str	r0, [r2, #0]
 8008f42:	7019      	strb	r1, [r3, #0]
 8008f44:	4608      	mov	r0, r1
 8008f46:	bc10      	pop	{r4}
 8008f48:	4770      	bx	lr

08008f4a <__sfputs_r>:
 8008f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	460f      	mov	r7, r1
 8008f50:	4614      	mov	r4, r2
 8008f52:	18d5      	adds	r5, r2, r3
 8008f54:	42ac      	cmp	r4, r5
 8008f56:	d101      	bne.n	8008f5c <__sfputs_r+0x12>
 8008f58:	2000      	movs	r0, #0
 8008f5a:	e007      	b.n	8008f6c <__sfputs_r+0x22>
 8008f5c:	463a      	mov	r2, r7
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f64:	f7ff ffdc 	bl	8008f20 <__sfputc_r>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d1f3      	bne.n	8008f54 <__sfputs_r+0xa>
 8008f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f70 <_vfiprintf_r>:
 8008f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f74:	460d      	mov	r5, r1
 8008f76:	4614      	mov	r4, r2
 8008f78:	4698      	mov	r8, r3
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	b09d      	sub	sp, #116	; 0x74
 8008f7e:	b118      	cbz	r0, 8008f88 <_vfiprintf_r+0x18>
 8008f80:	6983      	ldr	r3, [r0, #24]
 8008f82:	b90b      	cbnz	r3, 8008f88 <_vfiprintf_r+0x18>
 8008f84:	f7ff fe98 	bl	8008cb8 <__sinit>
 8008f88:	4b89      	ldr	r3, [pc, #548]	; (80091b0 <_vfiprintf_r+0x240>)
 8008f8a:	429d      	cmp	r5, r3
 8008f8c:	d11b      	bne.n	8008fc6 <_vfiprintf_r+0x56>
 8008f8e:	6875      	ldr	r5, [r6, #4]
 8008f90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f92:	07d9      	lsls	r1, r3, #31
 8008f94:	d405      	bmi.n	8008fa2 <_vfiprintf_r+0x32>
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	059a      	lsls	r2, r3, #22
 8008f9a:	d402      	bmi.n	8008fa2 <_vfiprintf_r+0x32>
 8008f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f9e:	f7ff ff29 	bl	8008df4 <__retarget_lock_acquire_recursive>
 8008fa2:	89ab      	ldrh	r3, [r5, #12]
 8008fa4:	071b      	lsls	r3, r3, #28
 8008fa6:	d501      	bpl.n	8008fac <_vfiprintf_r+0x3c>
 8008fa8:	692b      	ldr	r3, [r5, #16]
 8008faa:	b9eb      	cbnz	r3, 8008fe8 <_vfiprintf_r+0x78>
 8008fac:	4629      	mov	r1, r5
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 fba4 	bl	80096fc <__swsetup_r>
 8008fb4:	b1c0      	cbz	r0, 8008fe8 <_vfiprintf_r+0x78>
 8008fb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fb8:	07dc      	lsls	r4, r3, #31
 8008fba:	d50e      	bpl.n	8008fda <_vfiprintf_r+0x6a>
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	b01d      	add	sp, #116	; 0x74
 8008fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc6:	4b7b      	ldr	r3, [pc, #492]	; (80091b4 <_vfiprintf_r+0x244>)
 8008fc8:	429d      	cmp	r5, r3
 8008fca:	d101      	bne.n	8008fd0 <_vfiprintf_r+0x60>
 8008fcc:	68b5      	ldr	r5, [r6, #8]
 8008fce:	e7df      	b.n	8008f90 <_vfiprintf_r+0x20>
 8008fd0:	4b79      	ldr	r3, [pc, #484]	; (80091b8 <_vfiprintf_r+0x248>)
 8008fd2:	429d      	cmp	r5, r3
 8008fd4:	bf08      	it	eq
 8008fd6:	68f5      	ldreq	r5, [r6, #12]
 8008fd8:	e7da      	b.n	8008f90 <_vfiprintf_r+0x20>
 8008fda:	89ab      	ldrh	r3, [r5, #12]
 8008fdc:	0598      	lsls	r0, r3, #22
 8008fde:	d4ed      	bmi.n	8008fbc <_vfiprintf_r+0x4c>
 8008fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fe2:	f7ff ff08 	bl	8008df6 <__retarget_lock_release_recursive>
 8008fe6:	e7e9      	b.n	8008fbc <_vfiprintf_r+0x4c>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	9309      	str	r3, [sp, #36]	; 0x24
 8008fec:	2320      	movs	r3, #32
 8008fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ff2:	2330      	movs	r3, #48	; 0x30
 8008ff4:	f04f 0901 	mov.w	r9, #1
 8008ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ffc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80091bc <_vfiprintf_r+0x24c>
 8009000:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009004:	4623      	mov	r3, r4
 8009006:	469a      	mov	sl, r3
 8009008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800900c:	b10a      	cbz	r2, 8009012 <_vfiprintf_r+0xa2>
 800900e:	2a25      	cmp	r2, #37	; 0x25
 8009010:	d1f9      	bne.n	8009006 <_vfiprintf_r+0x96>
 8009012:	ebba 0b04 	subs.w	fp, sl, r4
 8009016:	d00b      	beq.n	8009030 <_vfiprintf_r+0xc0>
 8009018:	465b      	mov	r3, fp
 800901a:	4622      	mov	r2, r4
 800901c:	4629      	mov	r1, r5
 800901e:	4630      	mov	r0, r6
 8009020:	f7ff ff93 	bl	8008f4a <__sfputs_r>
 8009024:	3001      	adds	r0, #1
 8009026:	f000 80aa 	beq.w	800917e <_vfiprintf_r+0x20e>
 800902a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800902c:	445a      	add	r2, fp
 800902e:	9209      	str	r2, [sp, #36]	; 0x24
 8009030:	f89a 3000 	ldrb.w	r3, [sl]
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80a2 	beq.w	800917e <_vfiprintf_r+0x20e>
 800903a:	2300      	movs	r3, #0
 800903c:	f04f 32ff 	mov.w	r2, #4294967295
 8009040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009044:	f10a 0a01 	add.w	sl, sl, #1
 8009048:	9304      	str	r3, [sp, #16]
 800904a:	9307      	str	r3, [sp, #28]
 800904c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009050:	931a      	str	r3, [sp, #104]	; 0x68
 8009052:	4654      	mov	r4, sl
 8009054:	2205      	movs	r2, #5
 8009056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800905a:	4858      	ldr	r0, [pc, #352]	; (80091bc <_vfiprintf_r+0x24c>)
 800905c:	f000 fd02 	bl	8009a64 <memchr>
 8009060:	9a04      	ldr	r2, [sp, #16]
 8009062:	b9d8      	cbnz	r0, 800909c <_vfiprintf_r+0x12c>
 8009064:	06d1      	lsls	r1, r2, #27
 8009066:	bf44      	itt	mi
 8009068:	2320      	movmi	r3, #32
 800906a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800906e:	0713      	lsls	r3, r2, #28
 8009070:	bf44      	itt	mi
 8009072:	232b      	movmi	r3, #43	; 0x2b
 8009074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009078:	f89a 3000 	ldrb.w	r3, [sl]
 800907c:	2b2a      	cmp	r3, #42	; 0x2a
 800907e:	d015      	beq.n	80090ac <_vfiprintf_r+0x13c>
 8009080:	4654      	mov	r4, sl
 8009082:	2000      	movs	r0, #0
 8009084:	f04f 0c0a 	mov.w	ip, #10
 8009088:	9a07      	ldr	r2, [sp, #28]
 800908a:	4621      	mov	r1, r4
 800908c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009090:	3b30      	subs	r3, #48	; 0x30
 8009092:	2b09      	cmp	r3, #9
 8009094:	d94e      	bls.n	8009134 <_vfiprintf_r+0x1c4>
 8009096:	b1b0      	cbz	r0, 80090c6 <_vfiprintf_r+0x156>
 8009098:	9207      	str	r2, [sp, #28]
 800909a:	e014      	b.n	80090c6 <_vfiprintf_r+0x156>
 800909c:	eba0 0308 	sub.w	r3, r0, r8
 80090a0:	fa09 f303 	lsl.w	r3, r9, r3
 80090a4:	4313      	orrs	r3, r2
 80090a6:	46a2      	mov	sl, r4
 80090a8:	9304      	str	r3, [sp, #16]
 80090aa:	e7d2      	b.n	8009052 <_vfiprintf_r+0xe2>
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	1d19      	adds	r1, r3, #4
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	9103      	str	r1, [sp, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bfbb      	ittet	lt
 80090b8:	425b      	neglt	r3, r3
 80090ba:	f042 0202 	orrlt.w	r2, r2, #2
 80090be:	9307      	strge	r3, [sp, #28]
 80090c0:	9307      	strlt	r3, [sp, #28]
 80090c2:	bfb8      	it	lt
 80090c4:	9204      	strlt	r2, [sp, #16]
 80090c6:	7823      	ldrb	r3, [r4, #0]
 80090c8:	2b2e      	cmp	r3, #46	; 0x2e
 80090ca:	d10c      	bne.n	80090e6 <_vfiprintf_r+0x176>
 80090cc:	7863      	ldrb	r3, [r4, #1]
 80090ce:	2b2a      	cmp	r3, #42	; 0x2a
 80090d0:	d135      	bne.n	800913e <_vfiprintf_r+0x1ce>
 80090d2:	9b03      	ldr	r3, [sp, #12]
 80090d4:	3402      	adds	r4, #2
 80090d6:	1d1a      	adds	r2, r3, #4
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	9203      	str	r2, [sp, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bfb8      	it	lt
 80090e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80090e4:	9305      	str	r3, [sp, #20]
 80090e6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80091c0 <_vfiprintf_r+0x250>
 80090ea:	2203      	movs	r2, #3
 80090ec:	4650      	mov	r0, sl
 80090ee:	7821      	ldrb	r1, [r4, #0]
 80090f0:	f000 fcb8 	bl	8009a64 <memchr>
 80090f4:	b140      	cbz	r0, 8009108 <_vfiprintf_r+0x198>
 80090f6:	2340      	movs	r3, #64	; 0x40
 80090f8:	eba0 000a 	sub.w	r0, r0, sl
 80090fc:	fa03 f000 	lsl.w	r0, r3, r0
 8009100:	9b04      	ldr	r3, [sp, #16]
 8009102:	3401      	adds	r4, #1
 8009104:	4303      	orrs	r3, r0
 8009106:	9304      	str	r3, [sp, #16]
 8009108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910c:	2206      	movs	r2, #6
 800910e:	482d      	ldr	r0, [pc, #180]	; (80091c4 <_vfiprintf_r+0x254>)
 8009110:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009114:	f000 fca6 	bl	8009a64 <memchr>
 8009118:	2800      	cmp	r0, #0
 800911a:	d03f      	beq.n	800919c <_vfiprintf_r+0x22c>
 800911c:	4b2a      	ldr	r3, [pc, #168]	; (80091c8 <_vfiprintf_r+0x258>)
 800911e:	bb1b      	cbnz	r3, 8009168 <_vfiprintf_r+0x1f8>
 8009120:	9b03      	ldr	r3, [sp, #12]
 8009122:	3307      	adds	r3, #7
 8009124:	f023 0307 	bic.w	r3, r3, #7
 8009128:	3308      	adds	r3, #8
 800912a:	9303      	str	r3, [sp, #12]
 800912c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800912e:	443b      	add	r3, r7
 8009130:	9309      	str	r3, [sp, #36]	; 0x24
 8009132:	e767      	b.n	8009004 <_vfiprintf_r+0x94>
 8009134:	460c      	mov	r4, r1
 8009136:	2001      	movs	r0, #1
 8009138:	fb0c 3202 	mla	r2, ip, r2, r3
 800913c:	e7a5      	b.n	800908a <_vfiprintf_r+0x11a>
 800913e:	2300      	movs	r3, #0
 8009140:	f04f 0c0a 	mov.w	ip, #10
 8009144:	4619      	mov	r1, r3
 8009146:	3401      	adds	r4, #1
 8009148:	9305      	str	r3, [sp, #20]
 800914a:	4620      	mov	r0, r4
 800914c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009150:	3a30      	subs	r2, #48	; 0x30
 8009152:	2a09      	cmp	r2, #9
 8009154:	d903      	bls.n	800915e <_vfiprintf_r+0x1ee>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0c5      	beq.n	80090e6 <_vfiprintf_r+0x176>
 800915a:	9105      	str	r1, [sp, #20]
 800915c:	e7c3      	b.n	80090e6 <_vfiprintf_r+0x176>
 800915e:	4604      	mov	r4, r0
 8009160:	2301      	movs	r3, #1
 8009162:	fb0c 2101 	mla	r1, ip, r1, r2
 8009166:	e7f0      	b.n	800914a <_vfiprintf_r+0x1da>
 8009168:	ab03      	add	r3, sp, #12
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	462a      	mov	r2, r5
 800916e:	4630      	mov	r0, r6
 8009170:	4b16      	ldr	r3, [pc, #88]	; (80091cc <_vfiprintf_r+0x25c>)
 8009172:	a904      	add	r1, sp, #16
 8009174:	f3af 8000 	nop.w
 8009178:	4607      	mov	r7, r0
 800917a:	1c78      	adds	r0, r7, #1
 800917c:	d1d6      	bne.n	800912c <_vfiprintf_r+0x1bc>
 800917e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009180:	07d9      	lsls	r1, r3, #31
 8009182:	d405      	bmi.n	8009190 <_vfiprintf_r+0x220>
 8009184:	89ab      	ldrh	r3, [r5, #12]
 8009186:	059a      	lsls	r2, r3, #22
 8009188:	d402      	bmi.n	8009190 <_vfiprintf_r+0x220>
 800918a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800918c:	f7ff fe33 	bl	8008df6 <__retarget_lock_release_recursive>
 8009190:	89ab      	ldrh	r3, [r5, #12]
 8009192:	065b      	lsls	r3, r3, #25
 8009194:	f53f af12 	bmi.w	8008fbc <_vfiprintf_r+0x4c>
 8009198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800919a:	e711      	b.n	8008fc0 <_vfiprintf_r+0x50>
 800919c:	ab03      	add	r3, sp, #12
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	462a      	mov	r2, r5
 80091a2:	4630      	mov	r0, r6
 80091a4:	4b09      	ldr	r3, [pc, #36]	; (80091cc <_vfiprintf_r+0x25c>)
 80091a6:	a904      	add	r1, sp, #16
 80091a8:	f000 f882 	bl	80092b0 <_printf_i>
 80091ac:	e7e4      	b.n	8009178 <_vfiprintf_r+0x208>
 80091ae:	bf00      	nop
 80091b0:	08009c8c 	.word	0x08009c8c
 80091b4:	08009cac 	.word	0x08009cac
 80091b8:	08009c6c 	.word	0x08009c6c
 80091bc:	08009ccc 	.word	0x08009ccc
 80091c0:	08009cd2 	.word	0x08009cd2
 80091c4:	08009cd6 	.word	0x08009cd6
 80091c8:	00000000 	.word	0x00000000
 80091cc:	08008f4b 	.word	0x08008f4b

080091d0 <_printf_common>:
 80091d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	4616      	mov	r6, r2
 80091d6:	4699      	mov	r9, r3
 80091d8:	688a      	ldr	r2, [r1, #8]
 80091da:	690b      	ldr	r3, [r1, #16]
 80091dc:	4607      	mov	r7, r0
 80091de:	4293      	cmp	r3, r2
 80091e0:	bfb8      	it	lt
 80091e2:	4613      	movlt	r3, r2
 80091e4:	6033      	str	r3, [r6, #0]
 80091e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80091ea:	460c      	mov	r4, r1
 80091ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091f0:	b10a      	cbz	r2, 80091f6 <_printf_common+0x26>
 80091f2:	3301      	adds	r3, #1
 80091f4:	6033      	str	r3, [r6, #0]
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	0699      	lsls	r1, r3, #26
 80091fa:	bf42      	ittt	mi
 80091fc:	6833      	ldrmi	r3, [r6, #0]
 80091fe:	3302      	addmi	r3, #2
 8009200:	6033      	strmi	r3, [r6, #0]
 8009202:	6825      	ldr	r5, [r4, #0]
 8009204:	f015 0506 	ands.w	r5, r5, #6
 8009208:	d106      	bne.n	8009218 <_printf_common+0x48>
 800920a:	f104 0a19 	add.w	sl, r4, #25
 800920e:	68e3      	ldr	r3, [r4, #12]
 8009210:	6832      	ldr	r2, [r6, #0]
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	42ab      	cmp	r3, r5
 8009216:	dc28      	bgt.n	800926a <_printf_common+0x9a>
 8009218:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800921c:	1e13      	subs	r3, r2, #0
 800921e:	6822      	ldr	r2, [r4, #0]
 8009220:	bf18      	it	ne
 8009222:	2301      	movne	r3, #1
 8009224:	0692      	lsls	r2, r2, #26
 8009226:	d42d      	bmi.n	8009284 <_printf_common+0xb4>
 8009228:	4649      	mov	r1, r9
 800922a:	4638      	mov	r0, r7
 800922c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009230:	47c0      	blx	r8
 8009232:	3001      	adds	r0, #1
 8009234:	d020      	beq.n	8009278 <_printf_common+0xa8>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	68e5      	ldr	r5, [r4, #12]
 800923a:	f003 0306 	and.w	r3, r3, #6
 800923e:	2b04      	cmp	r3, #4
 8009240:	bf18      	it	ne
 8009242:	2500      	movne	r5, #0
 8009244:	6832      	ldr	r2, [r6, #0]
 8009246:	f04f 0600 	mov.w	r6, #0
 800924a:	68a3      	ldr	r3, [r4, #8]
 800924c:	bf08      	it	eq
 800924e:	1aad      	subeq	r5, r5, r2
 8009250:	6922      	ldr	r2, [r4, #16]
 8009252:	bf08      	it	eq
 8009254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009258:	4293      	cmp	r3, r2
 800925a:	bfc4      	itt	gt
 800925c:	1a9b      	subgt	r3, r3, r2
 800925e:	18ed      	addgt	r5, r5, r3
 8009260:	341a      	adds	r4, #26
 8009262:	42b5      	cmp	r5, r6
 8009264:	d11a      	bne.n	800929c <_printf_common+0xcc>
 8009266:	2000      	movs	r0, #0
 8009268:	e008      	b.n	800927c <_printf_common+0xac>
 800926a:	2301      	movs	r3, #1
 800926c:	4652      	mov	r2, sl
 800926e:	4649      	mov	r1, r9
 8009270:	4638      	mov	r0, r7
 8009272:	47c0      	blx	r8
 8009274:	3001      	adds	r0, #1
 8009276:	d103      	bne.n	8009280 <_printf_common+0xb0>
 8009278:	f04f 30ff 	mov.w	r0, #4294967295
 800927c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009280:	3501      	adds	r5, #1
 8009282:	e7c4      	b.n	800920e <_printf_common+0x3e>
 8009284:	2030      	movs	r0, #48	; 0x30
 8009286:	18e1      	adds	r1, r4, r3
 8009288:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009292:	4422      	add	r2, r4
 8009294:	3302      	adds	r3, #2
 8009296:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800929a:	e7c5      	b.n	8009228 <_printf_common+0x58>
 800929c:	2301      	movs	r3, #1
 800929e:	4622      	mov	r2, r4
 80092a0:	4649      	mov	r1, r9
 80092a2:	4638      	mov	r0, r7
 80092a4:	47c0      	blx	r8
 80092a6:	3001      	adds	r0, #1
 80092a8:	d0e6      	beq.n	8009278 <_printf_common+0xa8>
 80092aa:	3601      	adds	r6, #1
 80092ac:	e7d9      	b.n	8009262 <_printf_common+0x92>
	...

080092b0 <_printf_i>:
 80092b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092b4:	7e0f      	ldrb	r7, [r1, #24]
 80092b6:	4691      	mov	r9, r2
 80092b8:	2f78      	cmp	r7, #120	; 0x78
 80092ba:	4680      	mov	r8, r0
 80092bc:	460c      	mov	r4, r1
 80092be:	469a      	mov	sl, r3
 80092c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092c6:	d807      	bhi.n	80092d8 <_printf_i+0x28>
 80092c8:	2f62      	cmp	r7, #98	; 0x62
 80092ca:	d80a      	bhi.n	80092e2 <_printf_i+0x32>
 80092cc:	2f00      	cmp	r7, #0
 80092ce:	f000 80d9 	beq.w	8009484 <_printf_i+0x1d4>
 80092d2:	2f58      	cmp	r7, #88	; 0x58
 80092d4:	f000 80a4 	beq.w	8009420 <_printf_i+0x170>
 80092d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092e0:	e03a      	b.n	8009358 <_printf_i+0xa8>
 80092e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092e6:	2b15      	cmp	r3, #21
 80092e8:	d8f6      	bhi.n	80092d8 <_printf_i+0x28>
 80092ea:	a101      	add	r1, pc, #4	; (adr r1, 80092f0 <_printf_i+0x40>)
 80092ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092f0:	08009349 	.word	0x08009349
 80092f4:	0800935d 	.word	0x0800935d
 80092f8:	080092d9 	.word	0x080092d9
 80092fc:	080092d9 	.word	0x080092d9
 8009300:	080092d9 	.word	0x080092d9
 8009304:	080092d9 	.word	0x080092d9
 8009308:	0800935d 	.word	0x0800935d
 800930c:	080092d9 	.word	0x080092d9
 8009310:	080092d9 	.word	0x080092d9
 8009314:	080092d9 	.word	0x080092d9
 8009318:	080092d9 	.word	0x080092d9
 800931c:	0800946b 	.word	0x0800946b
 8009320:	0800938d 	.word	0x0800938d
 8009324:	0800944d 	.word	0x0800944d
 8009328:	080092d9 	.word	0x080092d9
 800932c:	080092d9 	.word	0x080092d9
 8009330:	0800948d 	.word	0x0800948d
 8009334:	080092d9 	.word	0x080092d9
 8009338:	0800938d 	.word	0x0800938d
 800933c:	080092d9 	.word	0x080092d9
 8009340:	080092d9 	.word	0x080092d9
 8009344:	08009455 	.word	0x08009455
 8009348:	682b      	ldr	r3, [r5, #0]
 800934a:	1d1a      	adds	r2, r3, #4
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	602a      	str	r2, [r5, #0]
 8009350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009358:	2301      	movs	r3, #1
 800935a:	e0a4      	b.n	80094a6 <_printf_i+0x1f6>
 800935c:	6820      	ldr	r0, [r4, #0]
 800935e:	6829      	ldr	r1, [r5, #0]
 8009360:	0606      	lsls	r6, r0, #24
 8009362:	f101 0304 	add.w	r3, r1, #4
 8009366:	d50a      	bpl.n	800937e <_printf_i+0xce>
 8009368:	680e      	ldr	r6, [r1, #0]
 800936a:	602b      	str	r3, [r5, #0]
 800936c:	2e00      	cmp	r6, #0
 800936e:	da03      	bge.n	8009378 <_printf_i+0xc8>
 8009370:	232d      	movs	r3, #45	; 0x2d
 8009372:	4276      	negs	r6, r6
 8009374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009378:	230a      	movs	r3, #10
 800937a:	485e      	ldr	r0, [pc, #376]	; (80094f4 <_printf_i+0x244>)
 800937c:	e019      	b.n	80093b2 <_printf_i+0x102>
 800937e:	680e      	ldr	r6, [r1, #0]
 8009380:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009384:	602b      	str	r3, [r5, #0]
 8009386:	bf18      	it	ne
 8009388:	b236      	sxthne	r6, r6
 800938a:	e7ef      	b.n	800936c <_printf_i+0xbc>
 800938c:	682b      	ldr	r3, [r5, #0]
 800938e:	6820      	ldr	r0, [r4, #0]
 8009390:	1d19      	adds	r1, r3, #4
 8009392:	6029      	str	r1, [r5, #0]
 8009394:	0601      	lsls	r1, r0, #24
 8009396:	d501      	bpl.n	800939c <_printf_i+0xec>
 8009398:	681e      	ldr	r6, [r3, #0]
 800939a:	e002      	b.n	80093a2 <_printf_i+0xf2>
 800939c:	0646      	lsls	r6, r0, #25
 800939e:	d5fb      	bpl.n	8009398 <_printf_i+0xe8>
 80093a0:	881e      	ldrh	r6, [r3, #0]
 80093a2:	2f6f      	cmp	r7, #111	; 0x6f
 80093a4:	bf0c      	ite	eq
 80093a6:	2308      	moveq	r3, #8
 80093a8:	230a      	movne	r3, #10
 80093aa:	4852      	ldr	r0, [pc, #328]	; (80094f4 <_printf_i+0x244>)
 80093ac:	2100      	movs	r1, #0
 80093ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093b2:	6865      	ldr	r5, [r4, #4]
 80093b4:	2d00      	cmp	r5, #0
 80093b6:	bfa8      	it	ge
 80093b8:	6821      	ldrge	r1, [r4, #0]
 80093ba:	60a5      	str	r5, [r4, #8]
 80093bc:	bfa4      	itt	ge
 80093be:	f021 0104 	bicge.w	r1, r1, #4
 80093c2:	6021      	strge	r1, [r4, #0]
 80093c4:	b90e      	cbnz	r6, 80093ca <_printf_i+0x11a>
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	d04d      	beq.n	8009466 <_printf_i+0x1b6>
 80093ca:	4615      	mov	r5, r2
 80093cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80093d0:	fb03 6711 	mls	r7, r3, r1, r6
 80093d4:	5dc7      	ldrb	r7, [r0, r7]
 80093d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093da:	4637      	mov	r7, r6
 80093dc:	42bb      	cmp	r3, r7
 80093de:	460e      	mov	r6, r1
 80093e0:	d9f4      	bls.n	80093cc <_printf_i+0x11c>
 80093e2:	2b08      	cmp	r3, #8
 80093e4:	d10b      	bne.n	80093fe <_printf_i+0x14e>
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	07de      	lsls	r6, r3, #31
 80093ea:	d508      	bpl.n	80093fe <_printf_i+0x14e>
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	6861      	ldr	r1, [r4, #4]
 80093f0:	4299      	cmp	r1, r3
 80093f2:	bfde      	ittt	le
 80093f4:	2330      	movle	r3, #48	; 0x30
 80093f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80093fe:	1b52      	subs	r2, r2, r5
 8009400:	6122      	str	r2, [r4, #16]
 8009402:	464b      	mov	r3, r9
 8009404:	4621      	mov	r1, r4
 8009406:	4640      	mov	r0, r8
 8009408:	f8cd a000 	str.w	sl, [sp]
 800940c:	aa03      	add	r2, sp, #12
 800940e:	f7ff fedf 	bl	80091d0 <_printf_common>
 8009412:	3001      	adds	r0, #1
 8009414:	d14c      	bne.n	80094b0 <_printf_i+0x200>
 8009416:	f04f 30ff 	mov.w	r0, #4294967295
 800941a:	b004      	add	sp, #16
 800941c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009420:	4834      	ldr	r0, [pc, #208]	; (80094f4 <_printf_i+0x244>)
 8009422:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009426:	6829      	ldr	r1, [r5, #0]
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	f851 6b04 	ldr.w	r6, [r1], #4
 800942e:	6029      	str	r1, [r5, #0]
 8009430:	061d      	lsls	r5, r3, #24
 8009432:	d514      	bpl.n	800945e <_printf_i+0x1ae>
 8009434:	07df      	lsls	r7, r3, #31
 8009436:	bf44      	itt	mi
 8009438:	f043 0320 	orrmi.w	r3, r3, #32
 800943c:	6023      	strmi	r3, [r4, #0]
 800943e:	b91e      	cbnz	r6, 8009448 <_printf_i+0x198>
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	f023 0320 	bic.w	r3, r3, #32
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	2310      	movs	r3, #16
 800944a:	e7af      	b.n	80093ac <_printf_i+0xfc>
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	f043 0320 	orr.w	r3, r3, #32
 8009452:	6023      	str	r3, [r4, #0]
 8009454:	2378      	movs	r3, #120	; 0x78
 8009456:	4828      	ldr	r0, [pc, #160]	; (80094f8 <_printf_i+0x248>)
 8009458:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800945c:	e7e3      	b.n	8009426 <_printf_i+0x176>
 800945e:	0659      	lsls	r1, r3, #25
 8009460:	bf48      	it	mi
 8009462:	b2b6      	uxthmi	r6, r6
 8009464:	e7e6      	b.n	8009434 <_printf_i+0x184>
 8009466:	4615      	mov	r5, r2
 8009468:	e7bb      	b.n	80093e2 <_printf_i+0x132>
 800946a:	682b      	ldr	r3, [r5, #0]
 800946c:	6826      	ldr	r6, [r4, #0]
 800946e:	1d18      	adds	r0, r3, #4
 8009470:	6961      	ldr	r1, [r4, #20]
 8009472:	6028      	str	r0, [r5, #0]
 8009474:	0635      	lsls	r5, r6, #24
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	d501      	bpl.n	800947e <_printf_i+0x1ce>
 800947a:	6019      	str	r1, [r3, #0]
 800947c:	e002      	b.n	8009484 <_printf_i+0x1d4>
 800947e:	0670      	lsls	r0, r6, #25
 8009480:	d5fb      	bpl.n	800947a <_printf_i+0x1ca>
 8009482:	8019      	strh	r1, [r3, #0]
 8009484:	2300      	movs	r3, #0
 8009486:	4615      	mov	r5, r2
 8009488:	6123      	str	r3, [r4, #16]
 800948a:	e7ba      	b.n	8009402 <_printf_i+0x152>
 800948c:	682b      	ldr	r3, [r5, #0]
 800948e:	2100      	movs	r1, #0
 8009490:	1d1a      	adds	r2, r3, #4
 8009492:	602a      	str	r2, [r5, #0]
 8009494:	681d      	ldr	r5, [r3, #0]
 8009496:	6862      	ldr	r2, [r4, #4]
 8009498:	4628      	mov	r0, r5
 800949a:	f000 fae3 	bl	8009a64 <memchr>
 800949e:	b108      	cbz	r0, 80094a4 <_printf_i+0x1f4>
 80094a0:	1b40      	subs	r0, r0, r5
 80094a2:	6060      	str	r0, [r4, #4]
 80094a4:	6863      	ldr	r3, [r4, #4]
 80094a6:	6123      	str	r3, [r4, #16]
 80094a8:	2300      	movs	r3, #0
 80094aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ae:	e7a8      	b.n	8009402 <_printf_i+0x152>
 80094b0:	462a      	mov	r2, r5
 80094b2:	4649      	mov	r1, r9
 80094b4:	4640      	mov	r0, r8
 80094b6:	6923      	ldr	r3, [r4, #16]
 80094b8:	47d0      	blx	sl
 80094ba:	3001      	adds	r0, #1
 80094bc:	d0ab      	beq.n	8009416 <_printf_i+0x166>
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	079b      	lsls	r3, r3, #30
 80094c2:	d413      	bmi.n	80094ec <_printf_i+0x23c>
 80094c4:	68e0      	ldr	r0, [r4, #12]
 80094c6:	9b03      	ldr	r3, [sp, #12]
 80094c8:	4298      	cmp	r0, r3
 80094ca:	bfb8      	it	lt
 80094cc:	4618      	movlt	r0, r3
 80094ce:	e7a4      	b.n	800941a <_printf_i+0x16a>
 80094d0:	2301      	movs	r3, #1
 80094d2:	4632      	mov	r2, r6
 80094d4:	4649      	mov	r1, r9
 80094d6:	4640      	mov	r0, r8
 80094d8:	47d0      	blx	sl
 80094da:	3001      	adds	r0, #1
 80094dc:	d09b      	beq.n	8009416 <_printf_i+0x166>
 80094de:	3501      	adds	r5, #1
 80094e0:	68e3      	ldr	r3, [r4, #12]
 80094e2:	9903      	ldr	r1, [sp, #12]
 80094e4:	1a5b      	subs	r3, r3, r1
 80094e6:	42ab      	cmp	r3, r5
 80094e8:	dcf2      	bgt.n	80094d0 <_printf_i+0x220>
 80094ea:	e7eb      	b.n	80094c4 <_printf_i+0x214>
 80094ec:	2500      	movs	r5, #0
 80094ee:	f104 0619 	add.w	r6, r4, #25
 80094f2:	e7f5      	b.n	80094e0 <_printf_i+0x230>
 80094f4:	08009cdd 	.word	0x08009cdd
 80094f8:	08009cee 	.word	0x08009cee

080094fc <_putc_r>:
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	460d      	mov	r5, r1
 8009500:	4614      	mov	r4, r2
 8009502:	4606      	mov	r6, r0
 8009504:	b118      	cbz	r0, 800950e <_putc_r+0x12>
 8009506:	6983      	ldr	r3, [r0, #24]
 8009508:	b90b      	cbnz	r3, 800950e <_putc_r+0x12>
 800950a:	f7ff fbd5 	bl	8008cb8 <__sinit>
 800950e:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <_putc_r+0x84>)
 8009510:	429c      	cmp	r4, r3
 8009512:	d124      	bne.n	800955e <_putc_r+0x62>
 8009514:	6874      	ldr	r4, [r6, #4]
 8009516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009518:	07d8      	lsls	r0, r3, #31
 800951a:	d405      	bmi.n	8009528 <_putc_r+0x2c>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	0599      	lsls	r1, r3, #22
 8009520:	d402      	bmi.n	8009528 <_putc_r+0x2c>
 8009522:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009524:	f7ff fc66 	bl	8008df4 <__retarget_lock_acquire_recursive>
 8009528:	68a3      	ldr	r3, [r4, #8]
 800952a:	3b01      	subs	r3, #1
 800952c:	2b00      	cmp	r3, #0
 800952e:	60a3      	str	r3, [r4, #8]
 8009530:	da05      	bge.n	800953e <_putc_r+0x42>
 8009532:	69a2      	ldr	r2, [r4, #24]
 8009534:	4293      	cmp	r3, r2
 8009536:	db1c      	blt.n	8009572 <_putc_r+0x76>
 8009538:	b2eb      	uxtb	r3, r5
 800953a:	2b0a      	cmp	r3, #10
 800953c:	d019      	beq.n	8009572 <_putc_r+0x76>
 800953e:	6823      	ldr	r3, [r4, #0]
 8009540:	1c5a      	adds	r2, r3, #1
 8009542:	6022      	str	r2, [r4, #0]
 8009544:	701d      	strb	r5, [r3, #0]
 8009546:	b2ed      	uxtb	r5, r5
 8009548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800954a:	07da      	lsls	r2, r3, #31
 800954c:	d405      	bmi.n	800955a <_putc_r+0x5e>
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	059b      	lsls	r3, r3, #22
 8009552:	d402      	bmi.n	800955a <_putc_r+0x5e>
 8009554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009556:	f7ff fc4e 	bl	8008df6 <__retarget_lock_release_recursive>
 800955a:	4628      	mov	r0, r5
 800955c:	bd70      	pop	{r4, r5, r6, pc}
 800955e:	4b09      	ldr	r3, [pc, #36]	; (8009584 <_putc_r+0x88>)
 8009560:	429c      	cmp	r4, r3
 8009562:	d101      	bne.n	8009568 <_putc_r+0x6c>
 8009564:	68b4      	ldr	r4, [r6, #8]
 8009566:	e7d6      	b.n	8009516 <_putc_r+0x1a>
 8009568:	4b07      	ldr	r3, [pc, #28]	; (8009588 <_putc_r+0x8c>)
 800956a:	429c      	cmp	r4, r3
 800956c:	bf08      	it	eq
 800956e:	68f4      	ldreq	r4, [r6, #12]
 8009570:	e7d1      	b.n	8009516 <_putc_r+0x1a>
 8009572:	4629      	mov	r1, r5
 8009574:	4622      	mov	r2, r4
 8009576:	4630      	mov	r0, r6
 8009578:	f000 f85c 	bl	8009634 <__swbuf_r>
 800957c:	4605      	mov	r5, r0
 800957e:	e7e3      	b.n	8009548 <_putc_r+0x4c>
 8009580:	08009c8c 	.word	0x08009c8c
 8009584:	08009cac 	.word	0x08009cac
 8009588:	08009c6c 	.word	0x08009c6c

0800958c <_sbrk_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	2300      	movs	r3, #0
 8009590:	4d05      	ldr	r5, [pc, #20]	; (80095a8 <_sbrk_r+0x1c>)
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	602b      	str	r3, [r5, #0]
 8009598:	f7f7 fad4 	bl	8000b44 <_sbrk>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_sbrk_r+0x1a>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_sbrk_r+0x1a>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	20000aa8 	.word	0x20000aa8

080095ac <__sread>:
 80095ac:	b510      	push	{r4, lr}
 80095ae:	460c      	mov	r4, r1
 80095b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b4:	f000 fab8 	bl	8009b28 <_read_r>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	bfab      	itete	ge
 80095bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095be:	89a3      	ldrhlt	r3, [r4, #12]
 80095c0:	181b      	addge	r3, r3, r0
 80095c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80095c6:	bfac      	ite	ge
 80095c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80095ca:	81a3      	strhlt	r3, [r4, #12]
 80095cc:	bd10      	pop	{r4, pc}

080095ce <__swrite>:
 80095ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d2:	461f      	mov	r7, r3
 80095d4:	898b      	ldrh	r3, [r1, #12]
 80095d6:	4605      	mov	r5, r0
 80095d8:	05db      	lsls	r3, r3, #23
 80095da:	460c      	mov	r4, r1
 80095dc:	4616      	mov	r6, r2
 80095de:	d505      	bpl.n	80095ec <__swrite+0x1e>
 80095e0:	2302      	movs	r3, #2
 80095e2:	2200      	movs	r2, #0
 80095e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e8:	f000 f9c4 	bl	8009974 <_lseek_r>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	4632      	mov	r2, r6
 80095f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095f4:	81a3      	strh	r3, [r4, #12]
 80095f6:	4628      	mov	r0, r5
 80095f8:	463b      	mov	r3, r7
 80095fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009602:	f000 b869 	b.w	80096d8 <_write_r>

08009606 <__sseek>:
 8009606:	b510      	push	{r4, lr}
 8009608:	460c      	mov	r4, r1
 800960a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800960e:	f000 f9b1 	bl	8009974 <_lseek_r>
 8009612:	1c43      	adds	r3, r0, #1
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	bf15      	itete	ne
 8009618:	6560      	strne	r0, [r4, #84]	; 0x54
 800961a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800961e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009622:	81a3      	strheq	r3, [r4, #12]
 8009624:	bf18      	it	ne
 8009626:	81a3      	strhne	r3, [r4, #12]
 8009628:	bd10      	pop	{r4, pc}

0800962a <__sclose>:
 800962a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800962e:	f000 b8d3 	b.w	80097d8 <_close_r>
	...

08009634 <__swbuf_r>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	460e      	mov	r6, r1
 8009638:	4614      	mov	r4, r2
 800963a:	4605      	mov	r5, r0
 800963c:	b118      	cbz	r0, 8009646 <__swbuf_r+0x12>
 800963e:	6983      	ldr	r3, [r0, #24]
 8009640:	b90b      	cbnz	r3, 8009646 <__swbuf_r+0x12>
 8009642:	f7ff fb39 	bl	8008cb8 <__sinit>
 8009646:	4b21      	ldr	r3, [pc, #132]	; (80096cc <__swbuf_r+0x98>)
 8009648:	429c      	cmp	r4, r3
 800964a:	d12b      	bne.n	80096a4 <__swbuf_r+0x70>
 800964c:	686c      	ldr	r4, [r5, #4]
 800964e:	69a3      	ldr	r3, [r4, #24]
 8009650:	60a3      	str	r3, [r4, #8]
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	071a      	lsls	r2, r3, #28
 8009656:	d52f      	bpl.n	80096b8 <__swbuf_r+0x84>
 8009658:	6923      	ldr	r3, [r4, #16]
 800965a:	b36b      	cbz	r3, 80096b8 <__swbuf_r+0x84>
 800965c:	6923      	ldr	r3, [r4, #16]
 800965e:	6820      	ldr	r0, [r4, #0]
 8009660:	b2f6      	uxtb	r6, r6
 8009662:	1ac0      	subs	r0, r0, r3
 8009664:	6963      	ldr	r3, [r4, #20]
 8009666:	4637      	mov	r7, r6
 8009668:	4283      	cmp	r3, r0
 800966a:	dc04      	bgt.n	8009676 <__swbuf_r+0x42>
 800966c:	4621      	mov	r1, r4
 800966e:	4628      	mov	r0, r5
 8009670:	f000 f944 	bl	80098fc <_fflush_r>
 8009674:	bb30      	cbnz	r0, 80096c4 <__swbuf_r+0x90>
 8009676:	68a3      	ldr	r3, [r4, #8]
 8009678:	3001      	adds	r0, #1
 800967a:	3b01      	subs	r3, #1
 800967c:	60a3      	str	r3, [r4, #8]
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	6022      	str	r2, [r4, #0]
 8009684:	701e      	strb	r6, [r3, #0]
 8009686:	6963      	ldr	r3, [r4, #20]
 8009688:	4283      	cmp	r3, r0
 800968a:	d004      	beq.n	8009696 <__swbuf_r+0x62>
 800968c:	89a3      	ldrh	r3, [r4, #12]
 800968e:	07db      	lsls	r3, r3, #31
 8009690:	d506      	bpl.n	80096a0 <__swbuf_r+0x6c>
 8009692:	2e0a      	cmp	r6, #10
 8009694:	d104      	bne.n	80096a0 <__swbuf_r+0x6c>
 8009696:	4621      	mov	r1, r4
 8009698:	4628      	mov	r0, r5
 800969a:	f000 f92f 	bl	80098fc <_fflush_r>
 800969e:	b988      	cbnz	r0, 80096c4 <__swbuf_r+0x90>
 80096a0:	4638      	mov	r0, r7
 80096a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a4:	4b0a      	ldr	r3, [pc, #40]	; (80096d0 <__swbuf_r+0x9c>)
 80096a6:	429c      	cmp	r4, r3
 80096a8:	d101      	bne.n	80096ae <__swbuf_r+0x7a>
 80096aa:	68ac      	ldr	r4, [r5, #8]
 80096ac:	e7cf      	b.n	800964e <__swbuf_r+0x1a>
 80096ae:	4b09      	ldr	r3, [pc, #36]	; (80096d4 <__swbuf_r+0xa0>)
 80096b0:	429c      	cmp	r4, r3
 80096b2:	bf08      	it	eq
 80096b4:	68ec      	ldreq	r4, [r5, #12]
 80096b6:	e7ca      	b.n	800964e <__swbuf_r+0x1a>
 80096b8:	4621      	mov	r1, r4
 80096ba:	4628      	mov	r0, r5
 80096bc:	f000 f81e 	bl	80096fc <__swsetup_r>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d0cb      	beq.n	800965c <__swbuf_r+0x28>
 80096c4:	f04f 37ff 	mov.w	r7, #4294967295
 80096c8:	e7ea      	b.n	80096a0 <__swbuf_r+0x6c>
 80096ca:	bf00      	nop
 80096cc:	08009c8c 	.word	0x08009c8c
 80096d0:	08009cac 	.word	0x08009cac
 80096d4:	08009c6c 	.word	0x08009c6c

080096d8 <_write_r>:
 80096d8:	b538      	push	{r3, r4, r5, lr}
 80096da:	4604      	mov	r4, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	4611      	mov	r1, r2
 80096e0:	2200      	movs	r2, #0
 80096e2:	4d05      	ldr	r5, [pc, #20]	; (80096f8 <_write_r+0x20>)
 80096e4:	602a      	str	r2, [r5, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	f7f7 f9df 	bl	8000aaa <_write>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	d102      	bne.n	80096f6 <_write_r+0x1e>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	b103      	cbz	r3, 80096f6 <_write_r+0x1e>
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	20000aa8 	.word	0x20000aa8

080096fc <__swsetup_r>:
 80096fc:	4b32      	ldr	r3, [pc, #200]	; (80097c8 <__swsetup_r+0xcc>)
 80096fe:	b570      	push	{r4, r5, r6, lr}
 8009700:	681d      	ldr	r5, [r3, #0]
 8009702:	4606      	mov	r6, r0
 8009704:	460c      	mov	r4, r1
 8009706:	b125      	cbz	r5, 8009712 <__swsetup_r+0x16>
 8009708:	69ab      	ldr	r3, [r5, #24]
 800970a:	b913      	cbnz	r3, 8009712 <__swsetup_r+0x16>
 800970c:	4628      	mov	r0, r5
 800970e:	f7ff fad3 	bl	8008cb8 <__sinit>
 8009712:	4b2e      	ldr	r3, [pc, #184]	; (80097cc <__swsetup_r+0xd0>)
 8009714:	429c      	cmp	r4, r3
 8009716:	d10f      	bne.n	8009738 <__swsetup_r+0x3c>
 8009718:	686c      	ldr	r4, [r5, #4]
 800971a:	89a3      	ldrh	r3, [r4, #12]
 800971c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009720:	0719      	lsls	r1, r3, #28
 8009722:	d42c      	bmi.n	800977e <__swsetup_r+0x82>
 8009724:	06dd      	lsls	r5, r3, #27
 8009726:	d411      	bmi.n	800974c <__swsetup_r+0x50>
 8009728:	2309      	movs	r3, #9
 800972a:	6033      	str	r3, [r6, #0]
 800972c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009730:	f04f 30ff 	mov.w	r0, #4294967295
 8009734:	81a3      	strh	r3, [r4, #12]
 8009736:	e03e      	b.n	80097b6 <__swsetup_r+0xba>
 8009738:	4b25      	ldr	r3, [pc, #148]	; (80097d0 <__swsetup_r+0xd4>)
 800973a:	429c      	cmp	r4, r3
 800973c:	d101      	bne.n	8009742 <__swsetup_r+0x46>
 800973e:	68ac      	ldr	r4, [r5, #8]
 8009740:	e7eb      	b.n	800971a <__swsetup_r+0x1e>
 8009742:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <__swsetup_r+0xd8>)
 8009744:	429c      	cmp	r4, r3
 8009746:	bf08      	it	eq
 8009748:	68ec      	ldreq	r4, [r5, #12]
 800974a:	e7e6      	b.n	800971a <__swsetup_r+0x1e>
 800974c:	0758      	lsls	r0, r3, #29
 800974e:	d512      	bpl.n	8009776 <__swsetup_r+0x7a>
 8009750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009752:	b141      	cbz	r1, 8009766 <__swsetup_r+0x6a>
 8009754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009758:	4299      	cmp	r1, r3
 800975a:	d002      	beq.n	8009762 <__swsetup_r+0x66>
 800975c:	4630      	mov	r0, r6
 800975e:	f000 f99b 	bl	8009a98 <_free_r>
 8009762:	2300      	movs	r3, #0
 8009764:	6363      	str	r3, [r4, #52]	; 0x34
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800976c:	81a3      	strh	r3, [r4, #12]
 800976e:	2300      	movs	r3, #0
 8009770:	6063      	str	r3, [r4, #4]
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	f043 0308 	orr.w	r3, r3, #8
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	b94b      	cbnz	r3, 8009796 <__swsetup_r+0x9a>
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800978c:	d003      	beq.n	8009796 <__swsetup_r+0x9a>
 800978e:	4621      	mov	r1, r4
 8009790:	4630      	mov	r0, r6
 8009792:	f000 f927 	bl	80099e4 <__smakebuf_r>
 8009796:	89a0      	ldrh	r0, [r4, #12]
 8009798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800979c:	f010 0301 	ands.w	r3, r0, #1
 80097a0:	d00a      	beq.n	80097b8 <__swsetup_r+0xbc>
 80097a2:	2300      	movs	r3, #0
 80097a4:	60a3      	str	r3, [r4, #8]
 80097a6:	6963      	ldr	r3, [r4, #20]
 80097a8:	425b      	negs	r3, r3
 80097aa:	61a3      	str	r3, [r4, #24]
 80097ac:	6923      	ldr	r3, [r4, #16]
 80097ae:	b943      	cbnz	r3, 80097c2 <__swsetup_r+0xc6>
 80097b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097b4:	d1ba      	bne.n	800972c <__swsetup_r+0x30>
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	0781      	lsls	r1, r0, #30
 80097ba:	bf58      	it	pl
 80097bc:	6963      	ldrpl	r3, [r4, #20]
 80097be:	60a3      	str	r3, [r4, #8]
 80097c0:	e7f4      	b.n	80097ac <__swsetup_r+0xb0>
 80097c2:	2000      	movs	r0, #0
 80097c4:	e7f7      	b.n	80097b6 <__swsetup_r+0xba>
 80097c6:	bf00      	nop
 80097c8:	20000174 	.word	0x20000174
 80097cc:	08009c8c 	.word	0x08009c8c
 80097d0:	08009cac 	.word	0x08009cac
 80097d4:	08009c6c 	.word	0x08009c6c

080097d8 <_close_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	2300      	movs	r3, #0
 80097dc:	4d05      	ldr	r5, [pc, #20]	; (80097f4 <_close_r+0x1c>)
 80097de:	4604      	mov	r4, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	602b      	str	r3, [r5, #0]
 80097e4:	f7f7 f97d 	bl	8000ae2 <_close>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_close_r+0x1a>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_close_r+0x1a>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	20000aa8 	.word	0x20000aa8

080097f8 <__sflush_r>:
 80097f8:	898a      	ldrh	r2, [r1, #12]
 80097fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fc:	4605      	mov	r5, r0
 80097fe:	0710      	lsls	r0, r2, #28
 8009800:	460c      	mov	r4, r1
 8009802:	d457      	bmi.n	80098b4 <__sflush_r+0xbc>
 8009804:	684b      	ldr	r3, [r1, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	dc04      	bgt.n	8009814 <__sflush_r+0x1c>
 800980a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800980c:	2b00      	cmp	r3, #0
 800980e:	dc01      	bgt.n	8009814 <__sflush_r+0x1c>
 8009810:	2000      	movs	r0, #0
 8009812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009816:	2e00      	cmp	r6, #0
 8009818:	d0fa      	beq.n	8009810 <__sflush_r+0x18>
 800981a:	2300      	movs	r3, #0
 800981c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009820:	682f      	ldr	r7, [r5, #0]
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	d032      	beq.n	800988c <__sflush_r+0x94>
 8009826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	075a      	lsls	r2, r3, #29
 800982c:	d505      	bpl.n	800983a <__sflush_r+0x42>
 800982e:	6863      	ldr	r3, [r4, #4]
 8009830:	1ac0      	subs	r0, r0, r3
 8009832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009834:	b10b      	cbz	r3, 800983a <__sflush_r+0x42>
 8009836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009838:	1ac0      	subs	r0, r0, r3
 800983a:	2300      	movs	r3, #0
 800983c:	4602      	mov	r2, r0
 800983e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009840:	4628      	mov	r0, r5
 8009842:	6a21      	ldr	r1, [r4, #32]
 8009844:	47b0      	blx	r6
 8009846:	1c43      	adds	r3, r0, #1
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	d106      	bne.n	800985a <__sflush_r+0x62>
 800984c:	6829      	ldr	r1, [r5, #0]
 800984e:	291d      	cmp	r1, #29
 8009850:	d82c      	bhi.n	80098ac <__sflush_r+0xb4>
 8009852:	4a29      	ldr	r2, [pc, #164]	; (80098f8 <__sflush_r+0x100>)
 8009854:	40ca      	lsrs	r2, r1
 8009856:	07d6      	lsls	r6, r2, #31
 8009858:	d528      	bpl.n	80098ac <__sflush_r+0xb4>
 800985a:	2200      	movs	r2, #0
 800985c:	6062      	str	r2, [r4, #4]
 800985e:	6922      	ldr	r2, [r4, #16]
 8009860:	04d9      	lsls	r1, r3, #19
 8009862:	6022      	str	r2, [r4, #0]
 8009864:	d504      	bpl.n	8009870 <__sflush_r+0x78>
 8009866:	1c42      	adds	r2, r0, #1
 8009868:	d101      	bne.n	800986e <__sflush_r+0x76>
 800986a:	682b      	ldr	r3, [r5, #0]
 800986c:	b903      	cbnz	r3, 8009870 <__sflush_r+0x78>
 800986e:	6560      	str	r0, [r4, #84]	; 0x54
 8009870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009872:	602f      	str	r7, [r5, #0]
 8009874:	2900      	cmp	r1, #0
 8009876:	d0cb      	beq.n	8009810 <__sflush_r+0x18>
 8009878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800987c:	4299      	cmp	r1, r3
 800987e:	d002      	beq.n	8009886 <__sflush_r+0x8e>
 8009880:	4628      	mov	r0, r5
 8009882:	f000 f909 	bl	8009a98 <_free_r>
 8009886:	2000      	movs	r0, #0
 8009888:	6360      	str	r0, [r4, #52]	; 0x34
 800988a:	e7c2      	b.n	8009812 <__sflush_r+0x1a>
 800988c:	6a21      	ldr	r1, [r4, #32]
 800988e:	2301      	movs	r3, #1
 8009890:	4628      	mov	r0, r5
 8009892:	47b0      	blx	r6
 8009894:	1c41      	adds	r1, r0, #1
 8009896:	d1c7      	bne.n	8009828 <__sflush_r+0x30>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d0c4      	beq.n	8009828 <__sflush_r+0x30>
 800989e:	2b1d      	cmp	r3, #29
 80098a0:	d001      	beq.n	80098a6 <__sflush_r+0xae>
 80098a2:	2b16      	cmp	r3, #22
 80098a4:	d101      	bne.n	80098aa <__sflush_r+0xb2>
 80098a6:	602f      	str	r7, [r5, #0]
 80098a8:	e7b2      	b.n	8009810 <__sflush_r+0x18>
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b0:	81a3      	strh	r3, [r4, #12]
 80098b2:	e7ae      	b.n	8009812 <__sflush_r+0x1a>
 80098b4:	690f      	ldr	r7, [r1, #16]
 80098b6:	2f00      	cmp	r7, #0
 80098b8:	d0aa      	beq.n	8009810 <__sflush_r+0x18>
 80098ba:	0793      	lsls	r3, r2, #30
 80098bc:	bf18      	it	ne
 80098be:	2300      	movne	r3, #0
 80098c0:	680e      	ldr	r6, [r1, #0]
 80098c2:	bf08      	it	eq
 80098c4:	694b      	ldreq	r3, [r1, #20]
 80098c6:	1bf6      	subs	r6, r6, r7
 80098c8:	600f      	str	r7, [r1, #0]
 80098ca:	608b      	str	r3, [r1, #8]
 80098cc:	2e00      	cmp	r6, #0
 80098ce:	dd9f      	ble.n	8009810 <__sflush_r+0x18>
 80098d0:	4633      	mov	r3, r6
 80098d2:	463a      	mov	r2, r7
 80098d4:	4628      	mov	r0, r5
 80098d6:	6a21      	ldr	r1, [r4, #32]
 80098d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80098dc:	47e0      	blx	ip
 80098de:	2800      	cmp	r0, #0
 80098e0:	dc06      	bgt.n	80098f0 <__sflush_r+0xf8>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ec:	81a3      	strh	r3, [r4, #12]
 80098ee:	e790      	b.n	8009812 <__sflush_r+0x1a>
 80098f0:	4407      	add	r7, r0
 80098f2:	1a36      	subs	r6, r6, r0
 80098f4:	e7ea      	b.n	80098cc <__sflush_r+0xd4>
 80098f6:	bf00      	nop
 80098f8:	20400001 	.word	0x20400001

080098fc <_fflush_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	690b      	ldr	r3, [r1, #16]
 8009900:	4605      	mov	r5, r0
 8009902:	460c      	mov	r4, r1
 8009904:	b913      	cbnz	r3, 800990c <_fflush_r+0x10>
 8009906:	2500      	movs	r5, #0
 8009908:	4628      	mov	r0, r5
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	b118      	cbz	r0, 8009916 <_fflush_r+0x1a>
 800990e:	6983      	ldr	r3, [r0, #24]
 8009910:	b90b      	cbnz	r3, 8009916 <_fflush_r+0x1a>
 8009912:	f7ff f9d1 	bl	8008cb8 <__sinit>
 8009916:	4b14      	ldr	r3, [pc, #80]	; (8009968 <_fflush_r+0x6c>)
 8009918:	429c      	cmp	r4, r3
 800991a:	d11b      	bne.n	8009954 <_fflush_r+0x58>
 800991c:	686c      	ldr	r4, [r5, #4]
 800991e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0ef      	beq.n	8009906 <_fflush_r+0xa>
 8009926:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009928:	07d0      	lsls	r0, r2, #31
 800992a:	d404      	bmi.n	8009936 <_fflush_r+0x3a>
 800992c:	0599      	lsls	r1, r3, #22
 800992e:	d402      	bmi.n	8009936 <_fflush_r+0x3a>
 8009930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009932:	f7ff fa5f 	bl	8008df4 <__retarget_lock_acquire_recursive>
 8009936:	4628      	mov	r0, r5
 8009938:	4621      	mov	r1, r4
 800993a:	f7ff ff5d 	bl	80097f8 <__sflush_r>
 800993e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009940:	4605      	mov	r5, r0
 8009942:	07da      	lsls	r2, r3, #31
 8009944:	d4e0      	bmi.n	8009908 <_fflush_r+0xc>
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	059b      	lsls	r3, r3, #22
 800994a:	d4dd      	bmi.n	8009908 <_fflush_r+0xc>
 800994c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800994e:	f7ff fa52 	bl	8008df6 <__retarget_lock_release_recursive>
 8009952:	e7d9      	b.n	8009908 <_fflush_r+0xc>
 8009954:	4b05      	ldr	r3, [pc, #20]	; (800996c <_fflush_r+0x70>)
 8009956:	429c      	cmp	r4, r3
 8009958:	d101      	bne.n	800995e <_fflush_r+0x62>
 800995a:	68ac      	ldr	r4, [r5, #8]
 800995c:	e7df      	b.n	800991e <_fflush_r+0x22>
 800995e:	4b04      	ldr	r3, [pc, #16]	; (8009970 <_fflush_r+0x74>)
 8009960:	429c      	cmp	r4, r3
 8009962:	bf08      	it	eq
 8009964:	68ec      	ldreq	r4, [r5, #12]
 8009966:	e7da      	b.n	800991e <_fflush_r+0x22>
 8009968:	08009c8c 	.word	0x08009c8c
 800996c:	08009cac 	.word	0x08009cac
 8009970:	08009c6c 	.word	0x08009c6c

08009974 <_lseek_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	4611      	mov	r1, r2
 800997c:	2200      	movs	r2, #0
 800997e:	4d05      	ldr	r5, [pc, #20]	; (8009994 <_lseek_r+0x20>)
 8009980:	602a      	str	r2, [r5, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	f7f7 f8d1 	bl	8000b2a <_lseek>
 8009988:	1c43      	adds	r3, r0, #1
 800998a:	d102      	bne.n	8009992 <_lseek_r+0x1e>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	b103      	cbz	r3, 8009992 <_lseek_r+0x1e>
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	20000aa8 	.word	0x20000aa8

08009998 <__swhatbuf_r>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	460e      	mov	r6, r1
 800999c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a0:	4614      	mov	r4, r2
 80099a2:	2900      	cmp	r1, #0
 80099a4:	461d      	mov	r5, r3
 80099a6:	b096      	sub	sp, #88	; 0x58
 80099a8:	da08      	bge.n	80099bc <__swhatbuf_r+0x24>
 80099aa:	2200      	movs	r2, #0
 80099ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099b0:	602a      	str	r2, [r5, #0]
 80099b2:	061a      	lsls	r2, r3, #24
 80099b4:	d410      	bmi.n	80099d8 <__swhatbuf_r+0x40>
 80099b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ba:	e00e      	b.n	80099da <__swhatbuf_r+0x42>
 80099bc:	466a      	mov	r2, sp
 80099be:	f000 f8c5 	bl	8009b4c <_fstat_r>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	dbf1      	blt.n	80099aa <__swhatbuf_r+0x12>
 80099c6:	9a01      	ldr	r2, [sp, #4]
 80099c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099d0:	425a      	negs	r2, r3
 80099d2:	415a      	adcs	r2, r3
 80099d4:	602a      	str	r2, [r5, #0]
 80099d6:	e7ee      	b.n	80099b6 <__swhatbuf_r+0x1e>
 80099d8:	2340      	movs	r3, #64	; 0x40
 80099da:	2000      	movs	r0, #0
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	b016      	add	sp, #88	; 0x58
 80099e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080099e4 <__smakebuf_r>:
 80099e4:	898b      	ldrh	r3, [r1, #12]
 80099e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099e8:	079d      	lsls	r5, r3, #30
 80099ea:	4606      	mov	r6, r0
 80099ec:	460c      	mov	r4, r1
 80099ee:	d507      	bpl.n	8009a00 <__smakebuf_r+0x1c>
 80099f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	6123      	str	r3, [r4, #16]
 80099f8:	2301      	movs	r3, #1
 80099fa:	6163      	str	r3, [r4, #20]
 80099fc:	b002      	add	sp, #8
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	466a      	mov	r2, sp
 8009a02:	ab01      	add	r3, sp, #4
 8009a04:	f7ff ffc8 	bl	8009998 <__swhatbuf_r>
 8009a08:	9900      	ldr	r1, [sp, #0]
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f7ff fa13 	bl	8008e38 <_malloc_r>
 8009a12:	b948      	cbnz	r0, 8009a28 <__smakebuf_r+0x44>
 8009a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a18:	059a      	lsls	r2, r3, #22
 8009a1a:	d4ef      	bmi.n	80099fc <__smakebuf_r+0x18>
 8009a1c:	f023 0303 	bic.w	r3, r3, #3
 8009a20:	f043 0302 	orr.w	r3, r3, #2
 8009a24:	81a3      	strh	r3, [r4, #12]
 8009a26:	e7e3      	b.n	80099f0 <__smakebuf_r+0xc>
 8009a28:	4b0d      	ldr	r3, [pc, #52]	; (8009a60 <__smakebuf_r+0x7c>)
 8009a2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	6020      	str	r0, [r4, #0]
 8009a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	9b00      	ldr	r3, [sp, #0]
 8009a38:	6120      	str	r0, [r4, #16]
 8009a3a:	6163      	str	r3, [r4, #20]
 8009a3c:	9b01      	ldr	r3, [sp, #4]
 8009a3e:	b15b      	cbz	r3, 8009a58 <__smakebuf_r+0x74>
 8009a40:	4630      	mov	r0, r6
 8009a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a46:	f000 f893 	bl	8009b70 <_isatty_r>
 8009a4a:	b128      	cbz	r0, 8009a58 <__smakebuf_r+0x74>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f023 0303 	bic.w	r3, r3, #3
 8009a52:	f043 0301 	orr.w	r3, r3, #1
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	89a0      	ldrh	r0, [r4, #12]
 8009a5a:	4305      	orrs	r5, r0
 8009a5c:	81a5      	strh	r5, [r4, #12]
 8009a5e:	e7cd      	b.n	80099fc <__smakebuf_r+0x18>
 8009a60:	08008c51 	.word	0x08008c51

08009a64 <memchr>:
 8009a64:	4603      	mov	r3, r0
 8009a66:	b510      	push	{r4, lr}
 8009a68:	b2c9      	uxtb	r1, r1
 8009a6a:	4402      	add	r2, r0
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	4618      	mov	r0, r3
 8009a70:	d101      	bne.n	8009a76 <memchr+0x12>
 8009a72:	2000      	movs	r0, #0
 8009a74:	e003      	b.n	8009a7e <memchr+0x1a>
 8009a76:	7804      	ldrb	r4, [r0, #0]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	428c      	cmp	r4, r1
 8009a7c:	d1f6      	bne.n	8009a6c <memchr+0x8>
 8009a7e:	bd10      	pop	{r4, pc}

08009a80 <__malloc_lock>:
 8009a80:	4801      	ldr	r0, [pc, #4]	; (8009a88 <__malloc_lock+0x8>)
 8009a82:	f7ff b9b7 	b.w	8008df4 <__retarget_lock_acquire_recursive>
 8009a86:	bf00      	nop
 8009a88:	20000a9c 	.word	0x20000a9c

08009a8c <__malloc_unlock>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	; (8009a94 <__malloc_unlock+0x8>)
 8009a8e:	f7ff b9b2 	b.w	8008df6 <__retarget_lock_release_recursive>
 8009a92:	bf00      	nop
 8009a94:	20000a9c 	.word	0x20000a9c

08009a98 <_free_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	d040      	beq.n	8009b22 <_free_r+0x8a>
 8009aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009aa4:	1f0c      	subs	r4, r1, #4
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bfb8      	it	lt
 8009aaa:	18e4      	addlt	r4, r4, r3
 8009aac:	f7ff ffe8 	bl	8009a80 <__malloc_lock>
 8009ab0:	4a1c      	ldr	r2, [pc, #112]	; (8009b24 <_free_r+0x8c>)
 8009ab2:	6813      	ldr	r3, [r2, #0]
 8009ab4:	b933      	cbnz	r3, 8009ac4 <_free_r+0x2c>
 8009ab6:	6063      	str	r3, [r4, #4]
 8009ab8:	6014      	str	r4, [r2, #0]
 8009aba:	4628      	mov	r0, r5
 8009abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ac0:	f7ff bfe4 	b.w	8009a8c <__malloc_unlock>
 8009ac4:	42a3      	cmp	r3, r4
 8009ac6:	d908      	bls.n	8009ada <_free_r+0x42>
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	1821      	adds	r1, r4, r0
 8009acc:	428b      	cmp	r3, r1
 8009ace:	bf01      	itttt	eq
 8009ad0:	6819      	ldreq	r1, [r3, #0]
 8009ad2:	685b      	ldreq	r3, [r3, #4]
 8009ad4:	1809      	addeq	r1, r1, r0
 8009ad6:	6021      	streq	r1, [r4, #0]
 8009ad8:	e7ed      	b.n	8009ab6 <_free_r+0x1e>
 8009ada:	461a      	mov	r2, r3
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	b10b      	cbz	r3, 8009ae4 <_free_r+0x4c>
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	d9fa      	bls.n	8009ada <_free_r+0x42>
 8009ae4:	6811      	ldr	r1, [r2, #0]
 8009ae6:	1850      	adds	r0, r2, r1
 8009ae8:	42a0      	cmp	r0, r4
 8009aea:	d10b      	bne.n	8009b04 <_free_r+0x6c>
 8009aec:	6820      	ldr	r0, [r4, #0]
 8009aee:	4401      	add	r1, r0
 8009af0:	1850      	adds	r0, r2, r1
 8009af2:	4283      	cmp	r3, r0
 8009af4:	6011      	str	r1, [r2, #0]
 8009af6:	d1e0      	bne.n	8009aba <_free_r+0x22>
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	4401      	add	r1, r0
 8009afe:	6011      	str	r1, [r2, #0]
 8009b00:	6053      	str	r3, [r2, #4]
 8009b02:	e7da      	b.n	8009aba <_free_r+0x22>
 8009b04:	d902      	bls.n	8009b0c <_free_r+0x74>
 8009b06:	230c      	movs	r3, #12
 8009b08:	602b      	str	r3, [r5, #0]
 8009b0a:	e7d6      	b.n	8009aba <_free_r+0x22>
 8009b0c:	6820      	ldr	r0, [r4, #0]
 8009b0e:	1821      	adds	r1, r4, r0
 8009b10:	428b      	cmp	r3, r1
 8009b12:	bf01      	itttt	eq
 8009b14:	6819      	ldreq	r1, [r3, #0]
 8009b16:	685b      	ldreq	r3, [r3, #4]
 8009b18:	1809      	addeq	r1, r1, r0
 8009b1a:	6021      	streq	r1, [r4, #0]
 8009b1c:	6063      	str	r3, [r4, #4]
 8009b1e:	6054      	str	r4, [r2, #4]
 8009b20:	e7cb      	b.n	8009aba <_free_r+0x22>
 8009b22:	bd38      	pop	{r3, r4, r5, pc}
 8009b24:	20000aa0 	.word	0x20000aa0

08009b28 <_read_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	4608      	mov	r0, r1
 8009b2e:	4611      	mov	r1, r2
 8009b30:	2200      	movs	r2, #0
 8009b32:	4d05      	ldr	r5, [pc, #20]	; (8009b48 <_read_r+0x20>)
 8009b34:	602a      	str	r2, [r5, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	f7f6 ff9a 	bl	8000a70 <_read>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d102      	bne.n	8009b46 <_read_r+0x1e>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b103      	cbz	r3, 8009b46 <_read_r+0x1e>
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	bd38      	pop	{r3, r4, r5, pc}
 8009b48:	20000aa8 	.word	0x20000aa8

08009b4c <_fstat_r>:
 8009b4c:	b538      	push	{r3, r4, r5, lr}
 8009b4e:	2300      	movs	r3, #0
 8009b50:	4d06      	ldr	r5, [pc, #24]	; (8009b6c <_fstat_r+0x20>)
 8009b52:	4604      	mov	r4, r0
 8009b54:	4608      	mov	r0, r1
 8009b56:	4611      	mov	r1, r2
 8009b58:	602b      	str	r3, [r5, #0]
 8009b5a:	f7f6 ffcd 	bl	8000af8 <_fstat>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	d102      	bne.n	8009b68 <_fstat_r+0x1c>
 8009b62:	682b      	ldr	r3, [r5, #0]
 8009b64:	b103      	cbz	r3, 8009b68 <_fstat_r+0x1c>
 8009b66:	6023      	str	r3, [r4, #0]
 8009b68:	bd38      	pop	{r3, r4, r5, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20000aa8 	.word	0x20000aa8

08009b70 <_isatty_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	2300      	movs	r3, #0
 8009b74:	4d05      	ldr	r5, [pc, #20]	; (8009b8c <_isatty_r+0x1c>)
 8009b76:	4604      	mov	r4, r0
 8009b78:	4608      	mov	r0, r1
 8009b7a:	602b      	str	r3, [r5, #0]
 8009b7c:	f7f6 ffcb 	bl	8000b16 <_isatty>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d102      	bne.n	8009b8a <_isatty_r+0x1a>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b103      	cbz	r3, 8009b8a <_isatty_r+0x1a>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	20000aa8 	.word	0x20000aa8

08009b90 <_init>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	bf00      	nop
 8009b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b96:	bc08      	pop	{r3}
 8009b98:	469e      	mov	lr, r3
 8009b9a:	4770      	bx	lr

08009b9c <_fini>:
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b9e:	bf00      	nop
 8009ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba2:	bc08      	pop	{r3}
 8009ba4:	469e      	mov	lr, r3
 8009ba6:	4770      	bx	lr
